<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-17T05:50:46.289Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用mysql优化</title>
    <link href="http://example.com/2022/02/14/java/mysql/"/>
    <id>http://example.com/2022/02/14/java/mysql/</id>
    <published>2022-02-14T05:45:09.000Z</published>
    <updated>2022-02-17T05:50:46.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引的类型及作用"><a href="#索引的类型及作用" class="headerlink" title="索引的类型及作用"></a>索引的类型及作用</h2><p>在关系数据库中,索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构,<br>它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。<br>索引的作用相当于图书的目录,可以根据目录中的页码快速找到所需的内容。</p><p>MySQL索引的建立对于MySQL的高效运行是很重要的,索引可以大大提高MySQL的检索速度。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>Mysql目前主要有以下几种索引类型：FULLTEXT,UNIQUE, NORMAL,SPATIAL</p><ul><li>FULLTEXT</li></ul><p>即为全文索引,目前只有MyISAM引擎支持。其可以在CREATE TABLE ,ALTER TABLE ,CREATE INDEX 使用,不过目前只有 CHAR、VARCHAR ,TEXT 列上可以创建全文索引。<br>全文索引并不是和MyISAM一起诞生的,它的出现是为了解决WHERE name LIKE “%word%”这类针对文本的模糊查询效率较低的问题。</p><ul><li>UNIQUE</li></ul><p>即为唯一索引,如果能确定某个数据列将只包含彼此各不相同的值,在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。<br>这么做的好处：一是简化了MySQL对这个索引的管理工作,这个索引也因此而变得更有效率;<br>二是MySQL会在有新记录插入数据表时,自动检查新记录的这个字段的值是否已经在某个记录的这个字段里出现过了;<br>如果是,MySQL将拒绝插入那条新记录。也就是说,唯一索引可以保证数据记录的唯一性。<br>事实上,在许多场合,人们创建唯一索引的目的往往不是为了提高访问速度,而只是为了避免数据出现重复。</p><ul><li>NORMAL</li></ul><p>即为普通索引, 普通索引允许被索引的数据列包含重复的值。比如说,因为人有可能同名,<br>所以同一个姓名在同一个“员工个人资料”数据表里可能出现两次或更多次。</p><p>如果能确定某个数据列将只包含彼此各不相同的值,在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。<br>这么做的好处：一是简化了MySQL对这个索引的管理工作,这个索引也因此而变得更有效率;二是MySQL会在有新记录插入数据表时,<br>自动检查新记录的这个字段的值是否已经在某个记录的这个字段里出现过了;如果是,MySQL将拒绝插入那条新记录。<br>也就是说,唯一索引可以保证数据记录的唯一性。事实上,在许多场合,人们创建唯一索引的目的往往不是为了提高访问速度,<br>而只是为了避免数据出现重复。</p><ul><li>SPATIAL<br>即为空间索引,新版本MySQL中,在新版MySQL中,InnoDB和MyISAM支持空间索引,通过R树来实现,使得空间搜索变得高效。</li></ul><p>地理特征是世界上任何具有位置的事物。一个特征可以是:<br>一个实体。例如:一座山、一座池塘、一座城市。<br>空间。例如,城镇区,热带地区。<br>一个可定义的位置。例如,十字路口,作为两条街道相交的特定地点。</p><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>主键索引是唯一索引的特殊类型。<br>数据库表通常有一列或列组合,其值用来唯一标识表中的每一行。该列称为表的主键。<br>在数据库关系图中为表定义一个主键将自动创建主键索引,主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的。当在查询中使用主键索引时,它还允许快速访问数据。</p><p>它们的一些比较:<br>(1)对于主健/unique constraint,oracle/sql server/mysql等都会自动建立唯一索引;<br>(2)主键不一定只包含一个字段,所以如果你在主键的其中一个字段建唯一索引还是必要的;<br>(3)主健可作外健,唯一索引不可以<br>(4)主健不可为空,唯一索引可以<br>(5)主健也可是多个字段的组合<br>(6)主键与唯一索引不同的是</p><p>a.主键索引有not null属性;<br>b.每个表只能有一个主键索引</p><h2 id="索引方法"><a href="#索引方法" class="headerlink" title="索引方法"></a>索引方法</h2><h3 id="BTREE"><a href="#BTREE" class="headerlink" title="BTREE"></a>BTREE</h3><p>&nbsp;&nbsp; B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型,除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。<br>不仅仅在 MySQL 中是如此,实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型,<br>这主要是因为 B-Tree 索引的存储结构在数据库的数据检 索中有非常优异的表现。</p><h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><p>&nbsp;&nbsp; Hash 索引结构的特殊性,其检索效率非常高,索引的检索可以一次定位,不像B-Tree 索引需要从根节点到枝节点,<br>最后才能访问到页节点这样多次的IO访问,所以 Hash 索引的查询效率要远高于 B-Tree 索引。</p><p>&nbsp;&nbsp;既然 Hash 索引的效率要比 B-Tree 高很多,为什么大家不都用 Hash 索引而还要使用 B-Tree 索引呢？任何事物都是有两面性的,Hash 索引也一样,<br>虽然 Hash 索引效率高,但是 Hash 索引本身由于其特殊性也带来了很多限制和弊端,主要有以下这些。</p><p>（1）Hash 索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询,不能使用范围查询。</p><p>（2）Hash 索引无法被用来避免数据的排序操作。</p><p>（3）Hash 索引不能利用部分索引键查询。</p><p>（4）Hash 索引在任何时候都不能避免表扫描。</p><p>（5）Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</p><p>常见问题:</p><p>索引失效原则:</p><ol><li>模：代表模糊查询。like的模糊查询以%开头,索引失效。</li><li>型：代表数据类型。类型错误,如字段类型为varchar,where条件用number,索引也会失效。</li><li>数：代表函数。对索引的字段使用内部函数,索引也会失效。这种情况下应该建立基于函数的索引。</li><li>空：是Null的意思。索引不存储空值,如果不限制索引列是not null,数据库会认为索引列有可能存在空值,所以不会按照索引进行计算。</li><li>运：代表运算。对索引列进行加、减、乘、除等运算,会导致索引失效。</li><li>最：代表最左原则。在复合索引中索引列的顺序至关重要。如果不是按照索引的最左列开始查找,则无法使用索引。</li><li>快：全表扫描更快的意思。如果数据库预计使用全表扫描要比使用索引快,则不使用索引。</li></ol><h3 id="进程线程携程的区别"><a href="#进程线程携程的区别" class="headerlink" title="进程线程携程的区别"></a>进程线程携程的区别</h3><p>1、进程</p><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p><p>2、线程</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p><p>3、协程</p><h3 id="协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。"><a href="#协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。" class="headerlink" title="协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。"></a>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</h3><p>tcp 三次握手四次挥手</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引的类型及作用&quot;&gt;&lt;a href=&quot;#索引的类型及作用&quot; class=&quot;headerlink&quot; title=&quot;索引的类型及作用&quot;&gt;&lt;/a&gt;索引的类型及作用&lt;/h2&gt;&lt;p&gt;在关系数据库中,索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构,&lt;</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用gitlab-ci自动构建代码</title>
    <link href="http://example.com/2022/02/12/k8s/gitlab-ci/"/>
    <id>http://example.com/2022/02/12/k8s/gitlab-ci/</id>
    <published>2022-02-12T07:43:13.000Z</published>
    <updated>2022-02-11T02:12:08.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用docker-运行-gitlab-runner"><a href="#使用docker-运行-gitlab-runner" class="headerlink" title="使用docker 运行 gitlab runner"></a>使用docker 运行 gitlab runner</h2><p>运行 gitlab runner 有很多方式， 当前我们只使用docker 的方式运行runner.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /etc/gitlab-runner/certs:/etc/gitlab-runner/certs \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><p>这个地方需要注意的是 公司使用的是自签名证书或自定义证书颁发机构所以在使用的过程中会遇到这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Couldn&#39;t execute POST against https:&#x2F;&#x2F;hostname.tld&#x2F;api&#x2F;v4&#x2F;jobs&#x2F;request:</span><br><span class="line">Post https:&#x2F;&#x2F;hostname.tld&#x2F;api&#x2F;v4&#x2F;jobs&#x2F;request: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure><p>解决方法:</p><p>您可以使用openssl客户端将 GitLab 实例的证书下载到<code>/etc/gitlab-runner/certs</code>,因为使用的是docker 所以我们需要将证书挂载到<br><code>/etc/gitlab-runner/certs</code>下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl s_client -showcerts -connect gitlab.example.com:443 &lt; /dev/null 2&gt;/dev/null | openssl x509 -outform PEM &gt; /etc/gitlab-runner/certs/gitlab.example.com.crt</span><br></pre></td></tr></table></figure><p>查看日志发现缺少config.toml 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f gitlab-runner</span><br><span class="line">Runtime platform                                    arch&#x3D;amd64 os&#x3D;linux pid&#x3D;8 revision&#x3D;98daeee0 version&#x3D;14.7.0</span><br><span class="line">Starting multi-runner from &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml...  builds&#x3D;0</span><br><span class="line">Running in system-mode.</span><br><span class="line"></span><br><span class="line">Configuration loaded                                builds&#x3D;0</span><br><span class="line">listen_address not defined, metrics &amp; debug endpoints disabled  builds&#x3D;0</span><br><span class="line">[session_server].listen_address not defined, session endpoints disabled  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br><span class="line">ERROR: Failed to load config stat &#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml: no such file or directory  builds&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h3><p>直接执行 gitlab-runner register，并填写URL、token和描述即可，tags选填（参考设置tags）。<br>executor如果不知道怎么选，就选shell吧。 直接执行shell命令，简单有效。</p><p>执行完成后，gitlab-runner会自动修改/etc/gitlab-runner/config.toml文件，并重启daemon程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 gitlab-runner 容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab-runner</span><br><span class="line"></span><br><span class="line">$ gitlab-ci-multi-runner register</span><br><span class="line">root@10c9e0311f06:/<span class="comment"># gitlab-ci-multi-runner register</span></span><br><span class="line">Runtime platform                                    arch=amd64 os=linux pid=78 revision=98daeee0 version=14.7.0</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line"></span><br><span class="line">Enter the GitLab instance URL (<span class="keyword">for</span> example, https://gitlab.com/):</span><br><span class="line">https://gitlab.example.com/</span><br><span class="line">Enter the registration token:</span><br><span class="line">xxxxxxxxxxx</span><br><span class="line">Enter a description <span class="keyword">for</span> the runner:</span><br><span class="line">[10c9e0311f06]: xxxxxxxx</span><br><span class="line">Enter tags <span class="keyword">for</span> the runner (comma-separated):</span><br><span class="line">xx</span><br><span class="line">Registering runner... succeeded                     runner=xxxxx</span><br><span class="line">Enter an executor: kubernetes, docker-ssh, virtualbox, parallels, shell, ssh, docker+machine, docker-ssh+machine, custom, docker:</span><br><span class="line">ssh</span><br><span class="line">Enter the SSH server address (<span class="keyword">for</span> example, my.server.com):</span><br><span class="line">127.0.0.1</span><br><span class="line">Enter the SSH server port (<span class="keyword">for</span> example, 22):</span><br><span class="line">22</span><br><span class="line">Enter the SSH user (<span class="keyword">for</span> example, root):</span><br><span class="line">root</span><br><span class="line">Enter the SSH password (<span class="keyword">for</span> example, docker.io):</span><br><span class="line">password</span><br><span class="line">Enter the path to the SSH identity file (<span class="keyword">for</span> example, /home/user/.ssh/id_rsa):</span><br><span class="line"></span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="编写-gitlab-ci-yaml-文件"><a href="#编写-gitlab-ci-yaml-文件" class="headerlink" title="编写.gitlab-ci.yaml 文件"></a>编写.gitlab-ci.yaml 文件</h2><p>参考文档<a class="link" href="https://docs.gitlab.com/ee/ci/yaml/">.gitlab-ci 参考<i class="fas fa-external-link-alt"></i></a></p><p>把当前文件放在项目的根目录 <code>.gitlab-ci.yaml</code> 或者使用</p><p>例如:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="comment"># 指定runner 的 tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">CI_COMMIT_REF_SLUG:</span> <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$CI_COMMIT_REF_SLUG</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vendor/</span>    </span><br><span class="line"></span><br><span class="line"><span class="attr">job A:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">solarmesh-dev</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">vendor</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;build&quot;</span> <span class="string">&gt;</span> <span class="string">vendor/hello.txt</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$CI_COMMIT_REF_SLUG</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vendor/</span>    </span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job B:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="comment"># needs:</span></span><br><span class="line">  <span class="comment">#   - job A</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">solarmesh-dev</span>  </span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$CI_COMMIT_REF_SLUG</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vendor/</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span> <span class="string">vendor/hello.txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job C:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">solarmesh-dev</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># 触发更新</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|-</span></span><br><span class="line">      <span class="string">result=$(kubectl</span> <span class="string">set</span> <span class="string">image</span> <span class="string">deployment</span> <span class="string">nginx</span> <span class="string">*=nginx:alpine</span> <span class="string">-n</span> <span class="string">default)</span></span><br><span class="line">      <span class="string">if</span> [[ <span class="string">&quot;$(echo $result | grep updated)&quot;</span> <span class="type">!=</span> <span class="string">&quot;&quot;</span>  ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">      <span class="comment"># 镜像地址更新了，会自动重新部署</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&#x27;UPDATED&#x27;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">      <span class="comment"># 镜像地址与之前相同，需要触发重新部署</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&#x27;NOT UPDATE&#x27;</span></span><br><span class="line">      <span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">restart</span> <span class="string">deployment</span> <span class="string">nginx</span> <span class="string">-n</span> <span class="string">default</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>在测试的过程中上传artifact 报错 <a class="link" href="https://gitlab.com/gitlab-org/gitlab-runner/-/issues/3752">issues<i class="fas fa-external-link-alt"></i></a>,<br>主要更新虚拟机上面的gitlab-runner 版本即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Uploading artifacts for failed job</span><br><span class="line">00:00</span><br><span class="line">mesg: ttyname failed: Inappropriate ioctl for device</span><br><span class="line">Uploading artifacts...</span><br><span class="line">Incorrect Usage: flag provided but not defined: -artifact-format</span><br><span class="line">NAME:</span><br><span class="line">   gitlab-runner artifacts-uploader - create and upload build artifacts (internal)</span><br><span class="line">USAGE:</span><br><span class="line">   gitlab-runner artifacts-uploader [command options] [arguments...]</span><br><span class="line">OPTIONS:</span><br><span class="line">FATAL: flag provided but not defined: -artifact-format </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用docker-运行-gitlab-runner&quot;&gt;&lt;a href=&quot;#使用docker-运行-gitlab-runner&quot; class=&quot;headerlink&quot; title=&quot;使用docker 运行 gitlab runner&quot;&gt;&lt;/a&gt;使用docker 运行</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>openshift 中的安全策略(scc)</title>
    <link href="http://example.com/2022/01/04/k8s/ocp/scc/"/>
    <id>http://example.com/2022/01/04/k8s/ocp/scc/</id>
    <published>2022-01-04T03:09:13.000Z</published>
    <updated>2022-01-04T10:16:54.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>在OpenShift（后文简称OCP）中, 很早就一个概念：Security Context Constraints, 简称SCC, 即安全上下文约束。 K8S的Pod安全策略和OCP中的SCC有一定继承(现有OCP的SCC后有K8S的pod安全策略)。 Security Context Constraints 是 OpenShift 提供的工具, 用于控制平台上允许为每个 pod 请求的权限类型。<br>为了更好地理解K8S的容器安全策略,并且控制篇幅,我们在本篇中先介绍OCP的SCC。</p><p><code>Security Context Constraints</code>是OpenShift提供的工具,用于控制平台上允许每个Pod请求的特权。 OpenShift带有8个预定义的<code>Security Context Constraints</code>,<br>您可以使用oc get scc命令列出这些约束。</p><table><thead><tr><th>SCC</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>restricted</td><td>受限拒绝访问所有主机功能,并要求使用分配给命名空间的 UID 和 SELinux 上下文运行 pod。这是最严格的 SCC,默认情况下用于经过身份验证的用户</td><td>换句话说,这是最安全的。<br>我们在这篇博文中进一步详细解释。</td></tr><tr><td>nonroot</td><td>nonroot 提供受限 SCC 的所有功能,但允许用户使用任何非 root UID 运行。用户必须指定 UID 或必须在容器运行时的清单中指定。</td><td>需要具有相同其他受限 SCC 安全功能的可预测非根 UID 的应用程序可以使用此 SCC,<br>只要它们在其清单中通知 UID。</td></tr><tr><td>anyuid</td><td>anyuid 提供受限 SCC 的所有功能,但允许用户使用任何 UID 和任何 GID 运行。</td><td>在 kubernetes 和 OpenShift 等平台中,这相当于在容器内部和外部允许 UID 0 或 root 用户。这将在进一步的博客文章中讨论。SELinux 在添加保护层方面发挥着重要作用, 使用 seccomp 过滤不需要的系统调用也是一个好主意。</td></tr><tr><td>hostmount-anyuid</td><td>hostmount-anyuid 提供受限 SCC 的所有功能,但允许主机挂载和 pod 的任何 UID。这主要由持久卷回收器使用。警告：此 SCC 允许主机文件系统作为任何 UID 访问,包括 UID 0。请谨慎授予。</td><td>与 anyuid 相同的警告,但在这里它更进一步,还允许安装主机卷。请注意,描述中提到的卷回收器是受信任的工作负载和必不可少的基础设施部分。</td></tr><tr><td>hostnetwork</td><td>hostnetwork 允许使用主机网络和主机端口,但仍需要使用分配给命名空间的 UID 和 SELinux 上下文运行 pod</td><td>在这里 pod/container 将能够直接“查看和使用”主机网络堆栈。非零 UID 和预先分配的 SELinux 上下文将有助于放置另一层安全性。</td></tr><tr><td>node-exporter</td><td>node-exporter scc 用于 Prometheus 节点导出器</td><td><code>node-exporter</code>    是为 Prometheus 设计的,用于从集群中检索指标。它允许访问主机网络、主机PIDS 和主机卷,但不允许访问主机IPC。也允许anyuid。不被其他应用程序使用。</td></tr><tr><td>hostaccess</td><td>hostaccess 允许访问所有主机命名空间,但仍需要使用分配给命名空间的 UID 和 SELinux 上下文运行 pod。警告：此 SCC 允许主机访问命名空间、文件系统和 PDS。它应该只由受信任的 pod 使用。谨慎授予。</td><td>主机命名空间,在描述中,意味着在 pod 或容器命名空间之外,或者,我们可以称之为节点或根 Linux 命名空间。确实,限制 UID 和使用 SELinux 会放置一层安全保护节点。但是,它仍然是一个非常轻松的 SCC,只应由绝对必要的受信任工作负载使用。</td></tr><tr><td>Privileged</td><td>特权允许访问所有特权和主机功能,并能够以任何用户、任何组、任何 fsGroup 和任何 SELinux 上下文运行。警告：这是最宽松的 SCC,应仅用于集群管理。谨慎授予。</td><td>这个 scc 允许 pod/容器控制主机/工作节点甚至其他容器中的所有内容。这是最特权和最宽松的 SCC 政策。只有受信任的工作负载才应该使用它,并且讨论是否应该在生产中使用它是有效的。特权 Pod 可以完全控制主机。</td></tr></tbody></table><p>默认情况下,在 OpenShift 中,所有 pod 和容器都将使用受限 SCC。<br>因此,它们将在请求时在 API 服务器中进行检查。<br>我们将更深入地讨论其中一些 SCC,并探讨如果不使用受限制的 SCC,我们应该牢记的一些安全注意事项。</p><p>但是为了授予额外的权限,除了通过受限 SCC 获得的权限之外,我们需要使用不同的 SCC。<br>这可以是列出的预定义 SCC 之一或自定义构建的 SCC。<br>为此,我们授予用户、服务帐户或组使用指定 SCC 的权限。</p><p>首次向 API 服务器请求 Pod 时,授权 Pod 的凭据将是请求它的用户帐户。<br>之后,pod 本身将在其服务账户下运行。<br>如果我们没有为 pod 指定服务账户,它会自动分配在它运行的命名空间上可用的默认服务帐户。<br>但是每个 pod 都将在一个服务账户下运行。<br>因此,基于用户、服务账户和/或服务账户所属的组,负责检查所请求权限的准入过程将找到可用的 SCC 集,<br>并验证所请求的资源安全上下文和约束。如果匹配,则接受 pod,否则拒绝。</p><p><img src="/2022/01/04/k8s/ocp/scc/img.png" alt="img.png"></p><h2 id="试一试"><a href="#试一试" class="headerlink" title="试一试"></a>试一试</h2><p>我们使用oc 来试一试如何使用scc来管理ocp。</p><p><code>Security Context Constraints</code>是与其他任何对象一样的OpenShift对象。<br>因此, 与oc命令一起使用的经典动词也可以与SCC一起使用。<br>描述,列出,创建,删除和编辑等任务使用与其他命令相同的命令语法。<br>不过,您需要以管理员权限登录才能更改或删除SCC。</p><p>我们如何通过oc来管理scc？我们可以通过<code>oc adm policy</code>来尝试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ oc adm policy</span><br><span class="line"></span><br><span class="line">Manage policy on pods and containers:</span><br><span class="line">  add-scc-to-user                 Add users or serviceaccount to a security context constraint</span><br><span class="line">  add-scc-to-group                Add groups to a security context constraint</span><br><span class="line">  remove-scc-from-user            Remove user from scc</span><br><span class="line">  remove-scc-from-group           Remove group from scc</span><br><span class="line"></span><br><span class="line">Assign roles to users and groups:</span><br><span class="line">  add-role-to-user                Add a role to users or serviceaccounts <span class="keyword">for</span> the current project</span><br><span class="line">  add-role-to-group               Add a role to groups <span class="keyword">for</span> the current project</span><br><span class="line">  remove-role-from-user           Remove a role from users <span class="keyword">for</span> the current project</span><br><span class="line">  remove-role-from-group          Remove a role from groups <span class="keyword">for</span> the current project</span><br><span class="line"></span><br><span class="line">Assign cluster roles to users and groups:</span><br><span class="line">  add-cluster-role-to-user        Add a role to users <span class="keyword">for</span> all projects <span class="keyword">in</span> the cluster</span><br><span class="line">  add-cluster-role-to-group       Add a role to groups <span class="keyword">for</span> all projects <span class="keyword">in</span> the cluster</span><br><span class="line">  remove-cluster-role-from-user   Remove a role from users <span class="keyword">for</span> all projects <span class="keyword">in</span> the cluster</span><br><span class="line">  remove-cluster-role-from-group  Remove a role from groups <span class="keyword">for</span> all projects <span class="keyword">in</span> the cluster</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个debug容器, 我们进入容器后我们查看当前容器的uid为<code>1000770000</code>, 且没有任何写入的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ oc create deployment debug --image=clarechu/debug:v1.0.0</span><br><span class="line"></span><br><span class="line">$ oc get po</span><br><span class="line"></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">debug-66f5d94894-hf6pm   1/1     Running   0          60s</span><br><span class="line"></span><br><span class="line">$ oc <span class="built_in">exec</span> -it debug-66f5d94894-hf6pm bash</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash-4.4$ ls</span><br><span class="line">bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var</span><br><span class="line">bash-4.4$ whoami</span><br><span class="line">1000770000</span><br><span class="line">bash-4.4$ mkdir -p a</span><br><span class="line">mkdir: can<span class="string">&#x27;t create directory &#x27;</span>a<span class="string">&#x27;: Permission denied</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>查看pod 的scc 权限, 可以看到最后的scc权限为最严格的<code>restricted</code>.看上去ocp 的scc工作的非常正常, 接下来我们创建service-acount,使当前容器使用<br>这个sa。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">oc</span> <span class="string">get</span> <span class="string">po</span> <span class="string">debug-66f5d94894-hf6pm</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">k8s.v1.cni.cncf.io/network-status:</span> <span class="string">|-</span></span><br><span class="line">      [&#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interface&quot;:</span> <span class="string">&quot;eth0&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;ips&quot;:</span> [</span><br><span class="line">              <span class="string">&quot;10.130.2.48&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;default&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;dns&quot;:</span> &#123;&#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    <span class="attr">k8s.v1.cni.cncf.io/networks-status:</span> <span class="string">|-</span></span><br><span class="line">      [&#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interface&quot;:</span> <span class="string">&quot;eth0&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;ips&quot;:</span> [</span><br><span class="line">              <span class="string">&quot;10.130.2.48&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;default&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;dns&quot;:</span> &#123;&#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    <span class="attr">openshift.io/scc:</span> <span class="string">restricted</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>创建sa, 在k8s中在创建namespace的时候默认会创建一个default 的service-account, 那么在当前<br>namespace中的pod会默认绑定这个默认的default的service-account。以下就不演示这种场景.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建sa</span></span><br><span class="line"></span><br><span class="line">$ oc create sa demo-sa</span><br><span class="line">serviceaccount/demo-sa created</span><br><span class="line"></span><br><span class="line">$ oc get sa</span><br><span class="line">demo-sa    2         4s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将pod 绑定到demo-sa这个sa中</span></span><br><span class="line"></span><br><span class="line">$ oc edit deploy debug</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccount: demo-sa</span><br><span class="line">      serviceAccountName: demo-sa</span><br><span class="line">...      </span><br></pre></td></tr></table></figure><p>要使用 oc 命令行向用户授予或绑定 SCC,我们有以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oc adm policy add-scc-to-user &lt;scc-name-here&gt; user-name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用 oc 命令行界面将 SCC 授予或绑定到服务账户,我们使用参数 -z：</span></span><br><span class="line">oc adm policy add-scc-to-user &lt;scc-name-here&gt; -z &lt;service-account-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要删除这些 SCC,我们使用相同的过程,但使用 remove-scc-from-user：</span></span><br><span class="line">oc adm policy remove-scc-from-user &lt;scc-name-here&gt; 用户名</span><br><span class="line">oc adm policy remove-scc-from-user &lt;scc-name-here&gt; -z &lt;service-account-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于组,过程是相似的：</span></span><br><span class="line">oc adm policy add-scc-to-group &lt;scc-name-here&gt; &lt;group-name&gt; oc adm policy remove-scc-from-group &lt;scc-name-here&gt; &lt;group-name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们给demo-sa 权限赋予<code>nonroot</code> 权限, 看看会发生什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ oc adm policy add-scc-to-user nonroot system:serviceaccount:demo:demo-sa</span><br><span class="line"></span><br><span class="line">$ oc get po -o yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    annotations:</span><br><span class="line">      k8s.v1.cni.cncf.io/network-status: |-</span><br><span class="line">        [&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;interface&quot;</span>: <span class="string">&quot;eth0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ips&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;10.130.2.63&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;default&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;dns&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      k8s.v1.cni.cncf.io/networks-status: |-</span><br><span class="line">        [&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;interface&quot;</span>: <span class="string">&quot;eth0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ips&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;10.130.2.63&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;default&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;dns&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      openshift.io/scc: nonroot</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    securityContext:</span><br><span class="line">      fsGroup: 2000</span><br><span class="line">      runAsGroup: 3000</span><br><span class="line">      runAsUser: 1000 </span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上例子我们可以看出我们设置scc已经生效了, 在pod的annotations中我们已经发现了<code>openshift.io/scc: nonroot</code><br>当我们在deploy中指定user 和group 时, 我们也可以看到pod中的user 和group 确实是我们指定的ID, 现在我们<br>指定 uid为0的情况, 看看会发生什么？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">oc</span> <span class="string">edit</span> <span class="string">deploy</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">securityContext:</span></span><br><span class="line">      <span class="attr">runAsGroup:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">runAsUser:</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p>我们发现pod并没有触发更新, 我们在查询rs的时候我们发现了异常我们来看看是什么问题？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ oc get rs</span><br><span class="line"></span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">debug-559bfb4fc8   1         0         0       75s</span><br><span class="line">debug-9fbc4c745    1         1         1       27m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$  oc describe rs debug-559bfb4fc8</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason        Age                   From                   Message</span><br><span class="line">  ----     ------        ----                  ----                   -------</span><br><span class="line">  Warning  FailedCreate  42s (x16 over 3m27s)  replicaset-controller  Error creating: pods <span class="string">&quot;debug-559bfb4fc8-&quot;</span> is forbidden: unable to validate against any security context constraint: [spec.containers[0].securityContext.runAsUser: Invalid value: 0: must be <span class="keyword">in</span> the ranges: [1000770000, 1000779999] spec.containers[0].securityContext.runAsUser: Invalid value: 0: running with the root UID is forbidden]</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>我们可以看到以上出现<code>securityContext.runAsUser: Invalid value: 0: running with the root UID is forbidden</code><br>uid不能为0 的情况, 看起来很正常。</p><p>查询一下我们刚刚添加的scc, 可以看到我们刚刚添加的scc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oc adm policy who-can use scc nonroot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resourceaccessreviewresponse.authorization.openshift.io/&lt;unknown&gt;</span><br><span class="line"></span><br><span class="line">Namespace: demo</span><br><span class="line">Verb:      use</span><br><span class="line">Resource:  securitycontextconstraints.security.openshift.io</span><br><span class="line"></span><br><span class="line">Users:  system:admin</span><br><span class="line">        ...</span><br><span class="line">        system:serviceaccount:demo:demo-sa</span><br><span class="line">        ...</span><br><span class="line">Groups: system:cluster-admins</span><br><span class="line">        system:masters</span><br></pre></td></tr></table></figure><p>接下来我们来试试 使用挂载<code>hostmount</code>, 下面例子显示<code>spec.volumes[0]:  Invalid value: &quot;hostPath&quot;: hostPath volumes are not allowed to be used  spec.containers[0].securityContext.runAsUser</code><br>所以我们需要<code>hostmount-anyuid</code>才可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ oc edit deploy debug</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: clarechu/debug:v1.0.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        name: debug</span><br><span class="line">        resources: &#123;&#125;</span><br><span class="line">        terminationMessagePath: /dev/termination-log</span><br><span class="line">        terminationMessagePolicy: File</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /usr/share/nginx</span><br><span class="line">          name: demo</span><br><span class="line">      dnsPolicy: ClusterFirst</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsGroup: 0</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      serviceAccount: demo-sa</span><br><span class="line">      serviceAccountName: demo-sa</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: demo</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data</span><br><span class="line">          <span class="built_in">type</span>: Directory</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">Events:</span><br><span class="line">  Type     Reason        Age                From                   Message</span><br><span class="line">  ----     ------        ----               ----                   -------</span><br><span class="line">  Warning  FailedCreate  1s (x13 over 22s)  replicaset-controller  Error creating: pods <span class="string">&quot;debug-768575dd8d-&quot;</span> is forbidden: unable to validate against any security context constraint: [spec.volumes[0]: Invalid value: <span class="string">&quot;hostPath&quot;</span>: hostPath volumes are not allowed to be used spec.volumes[0]: Invalid value: <span class="string">&quot;hostPath&quot;</span>: hostPath volumes are not allowed to be used spec.containers[0].securityContext.runAsUser: Invalid value: 0: must be <span class="keyword">in</span> the ranges: [1000770000, 1000779999] spec.volumes[0]: Invalid value: <span class="string">&quot;hostPath&quot;</span>: hostPath volumes are not allowed to be used spec.containers[0].securityContext.runAsUser: Invalid value: 0: running with the root UID is forbidden]          </span><br><span class="line">          </span><br></pre></td></tr></table></figure><h3 id="自定义scc"><a href="#自定义scc" class="headerlink" title="自定义scc"></a>自定义scc</h3><p>例如 使用 hostPath 卷插件</p><p>要放宽集群中的安全性，以便允许 Pod 使用 hostPath卷插件而不授予每个人访问更高特权的 SCC（例如privileged、hostaccess或hostmount-anyuid ），请执行以下操作：</p><p>创建一个新 SCC <code>hostpath</code></p><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">oc apply -f -&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">kind: SecurityContextConstraints</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: hostpath</span></span><br><span class="line"><span class="string">allowPrivilegedContainer: true</span></span><br><span class="line"><span class="string">runAsUser:</span></span><br><span class="line"><span class="string">  type: RunAsAny</span></span><br><span class="line"><span class="string">seLinuxContext:</span></span><br><span class="line"><span class="string">  type: RunAsAny</span></span><br><span class="line"><span class="string">fsGroup:</span></span><br><span class="line"><span class="string">  type: RunAsAny</span></span><br><span class="line"><span class="string">supplementalGroups:</span></span><br><span class="line"><span class="string">  type: RunAsAny</span></span><br><span class="line"><span class="string">users:</span></span><br><span class="line"><span class="string">- my-admin-user</span></span><br><span class="line"><span class="string">groups:</span></span><br><span class="line"><span class="string">- my-admin-group</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>为新的 SCC设置allowHostDirVolumePlugin参数true为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ oc patch scc hostpath -p <span class="string">&#x27;&#123;&quot;allowHostDirVolumePlugin&quot;: true&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>向所有用户授予对此 SCC 的访问权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ oc adm policy add-scc-to-group hostpath system:authenticated</span><br></pre></td></tr></table></figure><p>现在，所有请求<code>hostPath</code>卷的 Pod都被<code>hostpath</code>SCC接纳 。</p><h3 id="受限-SCC：最安全的标准选择"><a href="#受限-SCC：最安全的标准选择" class="headerlink" title="受限 SCC：最安全的标准选择"></a>受限 SCC：最安全的标准选择</h3><p>当创建 pod 时没有明确使用容器规范下的 PodSecurityContext 字段或 SecurityContext 字段,它将默认使用 Restricted SCC。我们来分析一下是什么意思。</p><p>以下是受限 SCC 的主要功能说明：</p><ul><li><p>确保 pod 不能以特权方式运行。<br>特权进程是在主机上以 ID 为 0 的 root 或超级用户帐户运行的进程。在这种情况下,特权容器在容器命名空间内外都拥有 root 权限,并且如果所有功能都可用并且没有其他机制（如 SELinux 策略）到位,则可以在主机上执行任何操作。受限的 SCC 会阻止该请求。如果它带有 Privileged = true ,它将被准入过程阻止。</p></li><li><p>确保 pod 无法挂载主机目录卷。<br>它不允许启用主机目录卷插件并且未列出主机路径卷类型。将这种特权授予 Pod 可能会为试图写入主机文件系统上的禁止路径的漏洞打开大门。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ oc get scc restricted -o yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">allowHostDirVolumePlugin: <span class="literal">false</span></span><br><span class="line">...</span><br><span class="line">volumes:</span><br><span class="line">- configMap</span><br><span class="line">- downwardAPI</span><br><span class="line">- emptyDir</span><br><span class="line">- persistentVolumeClaim</span><br><span class="line">- projected</span><br><span class="line">- secret</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p>要求 Pod 在预先分配的 UID 范围内以用户身份运行。<br>当我们谈论容器时,我们有一些警告要在这里探讨,因为容器是有命名空间的。这可能意味着,如果一个特定的容器正在使用我们所说的用户命名空间和 UID 映射,我们最终可能会在容器内部和容器外部为同一进程拥有不同的用户。这是一个复杂的方案,它根据可用的命名空间来改变进程在文件系统中的任何类型的 Linux 构造中查看其特权的方式。在 OpenShift 中,在撰写本文时,这些 UID 在容器内外是相同的,这意味着如果 UID 为 0,pod 将是主机上的 root。CRIO,运行时引擎已经可以进行 UID 映射,但是底层 Kubernetes 平台尚未为此做好准备。这超出了这里的范围（我们可能会在以后的文章中对此进行探讨）,但我认为在考虑 UID 时要牢记这一点很重要。有了受限的 SCC,Pod UID 将被限制在一个预先分配的 UID 范围内,以防止任何可能导致冒充或非法特权升级的操纵。</p></li><li><p>要求 pod 使用预先分配的 MCS 标签运行。<br>MCS 标签代表多类别安全标签,它是对 SELinux 的增强,允许用户使用类别标记文件。SELinux 在 OpenShift 节点中默认启用,受限 SCC 将使用该资源进一步限制保护主机文件系统的 Pod 访问。</p></li><li><p>允许 pod 使用任何 FSGroup。<br>FSGroup 是一个特殊的补充组,可以应用于 pod 中的所有容器,以使它们能够拥有主机系统上可用的某些特定卷。通过设置这个组,kubelet 能够代表 pod 更改该卷的权限。从而以更安全的方式提供一些灵活性。</p></li><li><p>允许 Pod 使用任何补充组。<br>这些是额外的 Linux 组,也可以添加到每个容器中的第一个进程,授予该进程一些较低权限的用户权限。在这里,它也增加了一些灵活性,但添加了补充组作为控制功能。</p></li><li><p>不使用受限 SCC 时的安全注意事项<br>一般而言,如果不使用受限 SCC,您可能已授予 Pod 权限,该权限可以部分影响主机、其他 Pod 或容器,甚至可以在主机上获得完全 root 访问权限。例如,当使用 anyuid SCC 时,让 Pod 在任何用户 ID 下运行,允许使用 hostaccess SCC 的大多数主机功能,允许 AllowCapabilties 字段的额外功能或授予具有特权的 SCC 的完全 root 权限,可能会发生这种情况。</p></li></ul><p>一般而言,我们可以说：永远不要以 UID 0 或 root 身份运行您的 pod。<br>如果您需要针对最低权限的特定功能拍摄并尽最大努力将 SELinux 策略与 Seccomp 过滤和/或可能的<br>AppArmor 配置文件结合使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;在OpenShift（后文简称OCP）中, 很早就一个概念：Security Context Constraints, 简称SCC, 即</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
    <category term="openshift" scheme="http://example.com/tags/openshift/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab 升级备份迁移</title>
    <link href="http://example.com/2021/12/17/linux/gitlab/"/>
    <id>http://example.com/2021/12/17/linux/gitlab/</id>
    <published>2021-12-17T06:54:59.000Z</published>
    <updated>2021-12-20T02:36:55.155Z</updated>
    
    <content type="html"><![CDATA[<p>由于我们公司的gitlab 还是n年之前的gitlab, 在升级的时候遇到很多坑, 把遇到的问题记录下来。</p><p>安全起见,旧服务器升级Gitlab前,建议先备份数据(虽然是老版本的,但总比丢失了的好)。</p><h2 id="查询版本及备份"><a href="#查询版本及备份" class="headerlink" title="查询版本及备份"></a>查询版本及备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看gitlab版本:</span></span><br><span class="line"></span><br><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION </span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份10.8.7版本数据</span></span><br><span class="line"></span><br><span class="line">gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class="line"><span class="comment"># 备份后的文件一般是位于/var/opt/gitlab/backups下, </span></span><br><span class="line"><span class="comment"># 自动生成文件名文件名如 uuid_data_version_gitlab_backup.tar</span></span><br><span class="line"><span class="comment"># 1639718728_2021_12_17_10.8.7_gitlab_backup.tar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>gitlab 在升级的时候有严格的要求, 不能跨版本升级 所以我们在升级的时候必须按照gitlab 推荐的版本来升级。</p><p>以下示例假设升级时停机是可以接受的。如果您不想停机,请阅读如何零停机升级。</p><p>找到您的版本在下面的升级路径中的位置,并相应地升级 GitLab,同时参考 版本特定的升级说明：</p><p>8.11.Z-&gt; 8.12.0-&gt; 8.17.7-&gt; 9.5.10-&gt; 10.8.7-&gt; 11.11.8-&gt; 12.0.12-&gt; 12.1.17-&gt; 12.10.14-&gt; 13.0.14-&gt; 13.1.11-&gt; 13.8.8-&gt; 13.12.15-&gt;最新14.0.Z-&gt;最新14.1.Z-&gt;最新14.Y.Z</p><p>具体升级路线可以查看gitlab的 <a class="link" href="https://docs.gitlab.com/ee/update/index.html#upgrade-paths">官方文档<i class="fas fa-external-link-alt"></i></a> 。</p><p><img src="/2021/12/17/linux/gitlab/img.png" alt="img.png"></p><p>因为我们当前的版本为<code>10.8.7</code><br>gitlab官方所有的<a class="link" href="https://ftp.sjtu.edu.cn/sites/gitlab-ce/yum/el7/">rpm包<i class="fas fa-external-link-alt"></i></a> 按照以上的升级顺序来升级我们的gitlab</p><p>所以我们可以按照应该升级到<code>11.11.8</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 11.11.8 版本的gitlab</span></span><br><span class="line"></span><br><span class="line">wget https://ftp.sjtu.edu.cn/sites/gitlab-ce/yum/el7/gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前机器没有安装gitlab</span></span><br><span class="line"></span><br><span class="line">rpm -ivh gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前机器安装老版本的gitlab 我们需要升级我们最新的gitlab</span></span><br><span class="line"></span><br><span class="line">rpm -Uih gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 74/805 resources updated <span class="keyword">in</span> 02 minutes 47 seconds</span><br><span class="line">gitlab Reconfigured!</span><br><span class="line">Restarting previously running GitLab services</span><br><span class="line">ok: run: alertmanager: (pid 22678) 1s</span><br><span class="line">ok: run: gitaly: (pid 20713) 494s</span><br><span class="line">ok: run: gitlab-exporter: (pid 22672) 1s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 22654) 2s</span><br><span class="line">ok: run: grafana: (pid 22699) 0s</span><br><span class="line">ok: run: logrotate: (pid 22711) 1s</span><br><span class="line">ok: run: nginx: (pid 22721) 0s</span><br><span class="line">ok: run: node-exporter: (pid 22736) 1s</span><br><span class="line">ok: run: postgres-exporter: (pid 22747) 0s</span><br><span class="line">ok: run: postgresql: (pid 20801) 492s</span><br><span class="line">ok: run: prometheus: (pid 22755) 1s</span><br><span class="line">ok: run: redis: (pid 22341) 159s</span><br><span class="line">ok: run: redis-exporter: (pid 22764) 0s</span><br><span class="line">ok: run: sidekiq: (pid 22773) 0s</span><br><span class="line"></span><br><span class="line">     _______ __  __          __</span><br><span class="line">    / ____(_) /_/ /   ____ _/ /_</span><br><span class="line">   / / __/ / __/ /   / __ `/ __ \</span><br><span class="line">  / /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">  \____/_/\__/_____/\__,_/_.___/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Upgrade complete! If your GitLab server is misbehaving try running</span><br><span class="line">  sudo gitlab-ctl restart</span><br><span class="line">before anything <span class="keyword">else</span>.</span><br><span class="line">If you need to roll back to the previous version you can use the database</span><br><span class="line">backup made during the upgrade (scroll up <span class="keyword">for</span> the filename).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>升级到11.11.8后重新初始化一下配置并重启gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>然后我们访问我们最新的gitlab页面看看是否正常, 查看版本完美升级</p><p><img src="/2021/12/17/linux/gitlab/img.png" alt="img.png"></p><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>新的服务器上安装最新(11.4.5)版本的gitlab,CentOS7安装请参考。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把对应版本的数据从旧服务器上拷贝到新服务器的gitlab备份目录里</span></span><br><span class="line"><span class="comment">#新服务器执行恢复命令</span></span><br><span class="line">chown -R git.git /var/opt/gitlab/backups/</span><br><span class="line">chmod +x /var/opt/gitlab/backups/</span><br><span class="line"></span><br><span class="line">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1639718728_2021_12_17_10.8.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这里没有后面的_gitlab_backup.tar名字</span></span><br><span class="line"><span class="comment"># 一路yes,恢复是会先删除新服务器上所有gitlab数据的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在还原备份文件的时候遇到了权限的问题</span></span><br><span class="line"></span><br><span class="line">chown git:git /var/opt/gitlab/backups/</span><br><span class="line">chmod +x /var/opt/gitlab/backups/</span><br></pre></td></tr></table></figure><h3 id="更改gitlab的存储路径"><a href="#更改gitlab的存储路径" class="headerlink" title="更改gitlab的存储路径"></a>更改gitlab的存储路径</h3><p>gitlab 的配置文件在<code>/etc/gitlab/gitlab.rb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份 gitlab 的文件路径 </span></span><br><span class="line"><span class="comment"># gitlab_rails[&#x27;manage_backup_path&#x27;] = true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/archive/gitlab/backups&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab 默认的存储路径 默认存放在 /var/opt/gitlab/git-data 下</span></span><br><span class="line"></span><br><span class="line">git_data_dirs(&#123;<span class="string">&quot;default&quot;</span> =&gt; <span class="string">&quot;/var/opt/gitlab/git-data&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为:</span></span><br><span class="line"></span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  <span class="string">&quot;default&quot;</span> =&gt; &#123; <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/var/opt/gitlab/git-data&quot;</span> &#125;,</span><br><span class="line">  <span class="string">&quot;alternative&quot;</span> =&gt; &#123; <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/mnt/nas/git-data&quot;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置 并重启应用</span></span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步gitlab-数据的路径"><a href="#同步gitlab-数据的路径" class="headerlink" title="同步gitlab 数据的路径"></a>同步gitlab 数据的路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /archive/new/git-data /var/opt/gitlab/git-data <span class="comment"># 目标路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步完成后 更换权限</span></span><br><span class="line"></span><br><span class="line">chown git:git /archive/new/git-data</span><br><span class="line"></span><br><span class="line">chmod 775 /archive/new/git-data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改gitlab的访问域名"><a href="#修改gitlab的访问域名" class="headerlink" title="修改gitlab的访问域名"></a>修改gitlab的访问域名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问的地址</span></span><br><span class="line">external_url <span class="string">&#x27;http://git.xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## git clone 使用的ssh地址</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;git.xx.com&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="gitlab-启动https"><a href="#gitlab-启动https" class="headerlink" title="gitlab 启动https"></a>gitlab 启动https</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># http &gt;&gt; https</span></span><br><span class="line">external_url <span class="string">&#x27;https://ip:port&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改nginx配置 </span></span><br><span class="line">nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] =<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/server.crt&quot;</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/server.key&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于我们公司的gitlab 还是n年之前的gitlab, 在升级的时候遇到很多坑, 把遇到的问题记录下来。&lt;/p&gt;
&lt;p&gt;安全起见,旧服务器升级Gitlab前,建议先备份数据(虽然是老版本的,但总比丢失了的好)。&lt;/p&gt;
&lt;h2 id=&quot;查询版本及备份&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://example.com/2021/11/26/java/Transaction/"/>
    <id>http://example.com/2021/11/26/java/Transaction/</id>
    <published>2021-11-26T14:28:03.000Z</published>
    <updated>2021-12-20T02:36:55.124Z</updated>
    
    <content type="html"><![CDATA[<p>在讲分布式事务之前, 我们先了解一下什么是事务, 在程序中事务有什么作用。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>数据库事务的四大特性(ACID)</p><p>(1) 原子性(Atomicity)</p><p>原子性是指事务包含的所有操作要么全部成功,要么全部失败回滚,<br>这和前面两篇博客介绍事务的功能是一样的概念,<br>因此事务的操作如果成功就必须要完全应用到数据库,如果操作失败则不能对数据库有任何影响。</p><p>⑵ 一致性（Consistency）</p><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态,<br>也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说,假设用户A和用户B两者的钱加起来一共是5000,<br>那么不管A和B之间如何转账,转几次账,事务结束后两个用户的钱相加起来应该还得是5000,<br>这就是事务的一致性。</p><p>⑶ 隔离性（Isolation）</p><p>隔离性是当多个用户并发访问数据库时,比如操作同一张表时,<br>数据库为每一个用户开启的事务,不能被其他事务的操作所干扰,多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2,<br>在事务T1看来,T2要么在T1开始之前就已经结束,要么在T1结束之后才开始,<br>这样每个事务都感觉不到有其他事务在并发地执行。</p><p>关于事务的隔离性数据库提供了多种隔离级别,稍后会介绍到。</p><p>⑷ 持久性（Durability）</p><p>持久性是指一个事务一旦被提交了,那么对数据库中的数据的改变就是永久性的,<br>即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>例如我们在使用JDBC操作数据库时,在提交事务方法后,提示用户事务操作完成,<br>当我们程序执行完成直到看到提示后,就可以认定事务以及正确提交,即使这时候数据库出现了问题,<br>也必须要将我们的事务完全执行完成,否则就会造成我们看到提示事务处理完毕,<br>但是数据库因为故障而没有执行事务的重大错误。</p><hr><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>分布式事务是指事务的参与者、支持事务的服务器、<br>资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。<br>例如在大型电商系统中,下单接口通常会扣减库存、减去优惠、生成订单 id,<br>而订单服务与库存、优惠、订单 id 都是不同的服务,下单接口的成功与否,<br>不仅取决于本地的 db 操作,而且依赖第三方系统的结果,<br>这时候分布式事务就保证这些操作要么全部成功,要么全部失败。<br>本质上来说,分布式事务就是为了保证不同数据库的数据一致性。</p><hr><h2 id="分布式事务的解决方案"><a href="#分布式事务的解决方案" class="headerlink" title="分布式事务的解决方案"></a>分布式事务的解决方案</h2><p>AT,XA,TCC,Saga</p><h3 id="AT"><a href="#AT" class="headerlink" title="AT"></a>AT</h3><p>这是Seata的一大特色,AT对业务代码完全无侵入性,使用非常简单,<br>改造成本低。我们只需要关注自己的业务SQL,Seata会通过分析我们业务SQL,反向生成回滚数据</p><p>AT 包含两个阶段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一阶段,所有参与事务的分支,本地事务Commit 业务数据和回滚日志(undoLog)</span><br><span class="line">二阶段,事务协调者根据所有分支的情况,决定本次全局事务是Commit 还是 Rollback(二阶段是完全异步)</span><br></pre></td></tr></table></figure><hr><h2 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h2><p>也是我们常说的二阶段提交,XA要求数据库本身提供对规范和协议的支持。<br>XA用起来的话,也是对业务代码无侵入性的。</p><p>其他三种模式,都是属于补偿型,无法保证全局一致性。<br>啥意思呢,例如刚刚说的AT模式,我们是可能读到这一次分布式事务的中间状态,而XA模式不会。</p><p>补偿型 </p><p>事务处理机制构建在 事务资源（数据库）之上（要么在中间件层面,要么在应用层面）,<br>事务资源 本身对分布式事务是无感知的,这也就导致了补偿型事务无法做到真正的 全局一致性.<br>比如,一条库存记录,处在 补偿型 事务处理过程中,由 100 扣减为 50。此时,<br>仓库管理员连接数据库,查询统计库存,就看到当前的 50。之后,<br>事务因为意外回滚,库存会被补偿回滚为 100。显然,仓库管理员查询统计到的 50 就是脏数据。<br>如果是XA的话,中间态数据库存 50 由数据库本身保证,<br>不会被仓库管理员读到（当然隔离级别需要 读已提交 以上）<br>但是全局一致性带来的结果就是数据的锁定（AT模式也是存在全局锁的,<br>但是隔离级别无法保证,后边我们会详细说）,例如全局事务中有一条update语句,<br>其他事务想要更新同一条数据的话,只能等待全局事务结束</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC 模式同样包含三个阶段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一阶段 (Try): 所有参与分布式事务的分支,对业务资源进行检查和预留</span><br><span class="line">二阶段 (Confirm): 所有分支的Try全部成功后,执行业务提交</span><br><span class="line">二阶段 (Cancel): 取消Try阶段预留的业务资源</span><br></pre></td></tr></table></figure><p>对比AT或者XA模式来说,TCC模式需要我们自己抽象并实现Try,Confirm,Cancel三个接口,<br>编码量会大一些,但是由于事务的每一个阶段都由开发人员自行实现。<br>而且相较于AT模式来说,减少了SQL解析的过程,也没有全局锁的限制,<br>所以TCC模式的性能是优于AT 、XA模式。</p><h2 id="SAGA"><a href="#SAGA" class="headerlink" title="SAGA"></a>SAGA</h2><p>Saga 是长事务解决方案,每个参与者需要实现事务的正向操作和补偿操作。<br>当参与者正向操作执行失败时,回滚本地事务的同时,<br>会调用上一阶段的补偿操作,在业务失败时最终会使事务回到初始状态.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一阶段(reduce): commit 提交事务,或者说执行当前任务</span><br><span class="line">二阶段(compensateReduce): 回滚当前业务</span><br></pre></td></tr></table></figure><p>Saga与TCC类似,同样没有全局锁。由于相比缺少锁定资源这一步,<br>在某些适合的场景,Saga要比TCC实现起来更简单。<br>由于Saga和TCC都需要我们手动编码实现,所以在开发时我们需要参考一些设计上的规范,<br>由于不是本文重点,这里就不多说了,可以参考分布式事务 <code>Seata</code> 及其三种模式详解<br>在我们了解完四种分布式事务的原理之后,我们回到本文重点AT模式</p><h2 id="结合seata"><a href="#结合seata" class="headerlink" title="结合seata"></a>结合seata</h2><p>tcc事务 </p><p>申明一个全局事务 <code>@GlobalTransactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/tc&quot;)</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">tc</span><span class="params">(<span class="meta">@RequestParam(&quot;from&quot;)</span> String accountNo, <span class="meta">@RequestParam(&quot;to&quot;)</span> String toAccountNo, <span class="meta">@RequestParam(&quot;amount&quot;)</span> <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    Boolean first = firstTccAction.prepare(<span class="keyword">null</span>, accountNo, amount);</span><br><span class="line">    secondTccAction.prepare(<span class="keyword">null</span>, toAccountNo, amount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明 tcc 的try confirm cancel, 使用 <code>@LocalTCC</code>标签 开启一个本地的tcc 事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FirstTccAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;FirstTccAction&quot;, commitMethod = &quot;commit&quot;, rollbackMethod = &quot;rollback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">prepare</span><span class="params">(BusinessActionContext businessActionContext, <span class="meta">@BusinessActionContextParameter(paramName = &quot;accountNo&quot;)</span> String accountNo, <span class="meta">@BusinessActionContextParameter(paramName = &quot;amount&quot;)</span> <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commit</span><span class="params">(BusinessActionContext businessActionContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">rollback</span><span class="params">(BusinessActionContext businessActionContext)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecondTccAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;SecondTccAction&quot;, commitMethod = &quot;commit&quot;, rollbackMethod = &quot;rollback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">prepare</span><span class="params">(BusinessActionContext businessActionContext, <span class="meta">@BusinessActionContextParameter(paramName = &quot;accountNo&quot;)</span> String accountNo, <span class="meta">@BusinessActionContextParameter(paramName = &quot;amount&quot;)</span> <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">commit</span><span class="params">(BusinessActionContext businessActionContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">rollback</span><span class="params">(BusinessActionContext businessActionContext)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在讲分布式事务之前, 我们先了解一下什么是事务, 在程序中事务有什么作用。&lt;/p&gt;
&lt;h3 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h3&gt;&lt;p&gt;数据库事务的四大特性(ACID)&lt;/p&gt;
&lt;p&gt;(</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何使用openssl 生成私有证书</title>
    <link href="http://example.com/2021/10/12/openssl/"/>
    <id>http://example.com/2021/10/12/openssl/</id>
    <published>2021-10-12T06:43:55.000Z</published>
    <updated>2021-12-20T02:36:55.196Z</updated>
    
    <content type="html"><![CDATA[<p>在以前的工作中,一直没有弄清楚证书的作用及ca证,pem等等后缀文件的作用,本篇文章主要讲解<br>证书是如何生成的及ssl加密原理是什么样的？</p><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>SSL(Secure Sockets Layer 安全套接字协议),<br>及其继任者传输层安全（Transport Layer Security,TLS）<br>是为网络通信提供安全及数据完整性的一种安全协议。<br>TLS与SSL在传输层与应用层之间对网络连接进行加密。</p><p>在我们访问一个https的域名的时候,在这之间一共触发了多少个流程?</p><p><img src="/2021/10/12/openssl/img.png" alt="img.png"></p><p>主要步骤如下:</p><ol><li>客户端请求服务器获取 证书公钥</li><li>客户端(SSL/TLS)解析证书（无效会弹出警告）</li><li>生成随机值</li><li>用 公钥加密 随机值生成密钥</li><li>客户端将 秘钥 发送给服务器</li><li>服务端用 私钥 解密 秘钥 得到随机值</li><li>将信息和随机值混合在一起 进行对称加密</li><li>将加密的内容发送给客户端</li></ol><p>在客户端和服务端进行交互中一共涉及了两种类型的加密算法,一种叫做非对称加密,一种叫做对称加密。</p><h3 id="什么是对称加密？"><a href="#什么是对称加密？" class="headerlink" title="什么是对称加密？"></a>什么是对称加密？</h3><p>简单说就是有一个密钥,它可以加密一段信息,也可以对加密后的信息进行解密,和我们日常生活中用的钥匙作用差不多。<br>加密和解密使用同一个字符串, 在上述例子中随机字符串为加密和解密的钥匙, 最常见的 对称加密 算法主要有 DES、3DES、AES。</p><h3 id="什么是非对称加密"><a href="#什么是非对称加密" class="headerlink" title="什么是非对称加密"></a>什么是非对称加密</h3><p>非对称加密算法,又称为 公开密钥加密算法。它需要两个密钥,一个称为 公开密钥 (public key),即 公钥,另一个称为 私有密钥 (private key),即 私钥。<br>因为 加密 和 解密 使用的是两个不同的密钥,所以这种算法称为 非对称加密算法。</p><ul><li>如果使用 公钥 对数据 进行加密,只有用对应的 私钥 才能 进行解密。</li><li>如果使用 私钥 对数据 进行加密,只有用对应的 公钥 才能 进行解密。</li></ul><p>常见的 非对称算法 主要有 RSA、DSA 等</p><p>了解了https的工作原理以后, 我们需要在内网使用https该如何使用, 证书又是从哪里来呢？这样我们就需要去了解<br>openssl。</p><h3 id="什么是证书签名请求-csr"><a href="#什么是证书签名请求-csr" class="headerlink" title="什么是证书签名请求(csr)"></a>什么是证书签名请求(csr)</h3><p>CSR是英文Certificate Signing Request的缩写,即证书签名请求。<br>CSR文件是申请SSL证书时所需要的一个数据文件,下面将为你详细介绍CSR文件的具体内容。</p><p>  数字证书的核心,其实就是非对称加密,也就是公私钥对加密。 非对称加密之所以安全,前提条件是用户必须要保障私钥的安全。<br>因此在用户向CA申请数字证书时,用户首先需要在自己的电脑中先产生一个公私钥对。<br>用户需要保管好自己的私钥,然后再把公钥和你的个人信息发送给CA机构,<br>CA机构通过你的公钥和个人信息最终签发出数字证书。 </p><p>  而CSR文件,其实就是包含了用户公钥和个人信息的一个数据文件。<br>用户产生出这个CSR文件,再把这个CSR文件发送给CA,CA就会根据CSR中的内容来签发出数字证书。</p><p>当组织需要签署 SSL 证书时,他们向中间证书颁发机构发送证书签名请求 (CSR)。作为中间证书颁发机构发送的响应</p><ul><li>由中间 CA 签署的 SSL 证书。</li><li>由根 CA 签署的中间 CA 证书。<br>以下命令将为组织生成私钥（.key）以及证书签名请求（.csr）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr</span><br></pre></td></tr></table></figure><p>证书签名请求输出两个文件。一个是[organization_domain_name].crt,另一个是intermediate.crt<br>  （如果您的中间 CA 是 GoDaddy,则称为gd-bundle-g2-.crt）</p><ul><li>计算机可以信任intermediate(中间) CA 的证书,因为它是由root(根) CA 签署的,root(根) CA 最初在制造级别嵌入到 Web 浏览器中。</li><li>因此,现在可以信任组织的 SSL 证书,因为intermediate(中间) CA 证书是可信任的。 上面的 信任层次称为信任链。</li></ul><h3 id="https-工作原理"><a href="#https-工作原理" class="headerlink" title="https 工作原理"></a>https 工作原理</h3><p>当浏览器向站点发送 HTTPS 请求时,它会将[organization_domain_name].crt和中间件.crt发送回浏览器。<br>现在中间件.crt可以被浏览器中列出的根 CA 信任,<br>而[organization_domain_name].crt可以被浏览器信任该intermediate.crt。<br>最终,组织的公钥由浏览器提取。<br><img src="/2021/10/12/openssl/img_5.png" alt="img.png"></p><h3 id="什么是crt文件"><a href="#什么是crt文件" class="headerlink" title="什么是crt文件"></a>什么是crt文件</h3><p>crt和密钥文件代表证书的两个部分,key是证书的私钥,crt是签名的证书。</p><p>这只是生成证书的一种方法,另一种方法是将它们都包含在一个pem文件中,或者将另一个包含在p12容器中。</p><h3 id="CA根证书的生成步骤"><a href="#CA根证书的生成步骤" class="headerlink" title="CA根证书的生成步骤"></a>CA根证书的生成步骤</h3><p>生成 RSA 私钥和自签名证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate CA private key   </span></span><br><span class="line">openssl genrsa -des3 -passout pass:demo -out ca.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate CSR   </span></span><br><span class="line">openssl req -new -key ca.key -out ca.csr  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>系统将提示您输入密码,我建议不要跳过并确保安全。<br>密码短语将阻止任何获得您的私钥的人, 来生成他们自己的根证书。输出应如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Generating</span> <span class="string">RSA</span> <span class="string">private</span> <span class="string">key,</span> <span class="number">2048 </span><span class="string">bit</span> <span class="string">long</span> <span class="string">modulus</span></span><br><span class="line"><span class="string">.................................................................+++</span></span><br><span class="line"><span class="string">.....................................+++</span></span><br><span class="line"><span class="string">e</span> <span class="string">is</span> <span class="number">65537</span> <span class="string">(0x10001)</span></span><br><span class="line"><span class="attr">Enter pass phrase for ca.key:</span></span><br><span class="line"><span class="attr">Verifying - Enter pass phrase for ca.key:</span></span><br></pre></td></tr></table></figure><p>然后我们生成一个根证书：</p><p>系统将提示您输入您的私钥（您刚刚选择的）的密码和一系列问题。这些问题的答案并不那么重要。<br>他们在查看证书时会出现,而您几乎永远不会这样做。<br>我建议在其他证书列表中将通用名称设为您可以识别为根证书的名称。这真的是唯一重要的事情。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -x509 -new -nodes -key ca.key -sha256 -days 1825 -out ca.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用下面 生成crt文件</span></span><br><span class="line"><span class="comment"># Generate Self Signed certificate（CA 根证书）  </span></span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> ca.csr -signkey ca.key -out ca.crt  </span><br><span class="line"></span><br><span class="line">Enter pass phrase <span class="keyword">for</span> ca.key:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:Guangdong</span><br><span class="line">Locality Name (eg, city) []:ShenZheng</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]: demo</span><br><span class="line">Organizational Unit Name (eg, section) []: demo</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []: demo1</span><br><span class="line">Email Address []:1062186165@qq.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>您现在应该有两个文件：ca.key（私钥）和 ca.pem（根证书）还有一个 ca.csr。</p><h3 id="用户证书的生成步骤"><a href="#用户证书的生成步骤" class="headerlink" title="用户证书的生成步骤"></a>用户证书的生成步骤</h3><p>服务器端用户证书: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># private key  </span></span><br><span class="line">openssl genrsa -aes256 -passout pass:111111 -out server.key 2048</span><br><span class="line"><span class="comment"># generate csr  </span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 CA 证书及CA密钥 对请求签发证书进行签发,生成 x509证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate certificate  </span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca.key -passin pass:111111 -CAcreateserial -out server.crt</span><br><span class="line"><span class="comment"># 或者使用 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">openssl ca -<span class="keyword">in</span> server.csr -out server.crt -cert ca.crt -keyfile ca.key  </span><br></pre></td></tr></table></figure><p>客户端用户证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out client.key 1024   </span><br><span class="line"></span><br><span class="line">openssl req -new -key client.key -out client.csr  </span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca.key -passin pass:111111 -CAcreateserial -out client.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用 不过在使用的过程中有这个问题待解决, 以后在处理吧 </span></span><br><span class="line"><span class="comment"># Using configuration from /private/etc/ssl/openssl.cnf</span></span><br><span class="line"><span class="comment"># Enter pass phrase for ca.key:</span></span><br><span class="line"><span class="comment"># No such file or directory</span></span><br><span class="line"><span class="comment"># unable to open &#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 4508040876:error:02FFF002:system library:func(4095):No such file or directory:/System/Volumes/Data/SWE/macOS/BuildRoots/38cf1d983f/Library/Caches/com.apple.xbs/Sources/libressl/libressl-56.60.2/libressl-2.8/crypto/bio/bss_file.c:255:fopen(&#x27;&#x27;, &#x27;r&#x27;)</span></span><br><span class="line"><span class="comment"># 4508040876:error:20FFF002:BIO routines:CRYPTO_internal:system lib:/System/Volumes/Data/SWE/macOS/BuildRoots/38cf1d983f/Library/Caches/com.apple.xbs/Sources/libressl/libressl-56.60.2/libressl-2.8/crypto/bio/bss_file.c:257:</span></span><br><span class="line"></span><br><span class="line">openssl ca -<span class="keyword">in</span> client.csr -out client.crt -cert ca.crt -keyfile ca.key</span><br></pre></td></tr></table></figure><p>生成pem格式证书：<br>有时需要用到pem格式的证书,可以用以下方式合并证书文件（crt）和私钥文件（key）来生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat client.crt client.key&gt; client.pem</span><br><span class="line"></span><br><span class="line">cat server.crt server.key &gt; server.pem</span><br></pre></td></tr></table></figure><h3 id="安装根证书"><a href="#安装根证书" class="headerlink" title="安装根证书"></a>安装根证书</h3><p>将根证书添加到 macOS 钥匙串</p><p>1。 打开 macOS 钥匙串应用<br>2。 转到文件 &gt; 导入项目…<br>3。 选择您的私钥文件（即 ca.pem）<br>4。 搜索您回答的任何内容作为上面的通用名称名称</p><p><img src="/2021/10/12/openssl/img_1.png" alt="img_1.png"></p><p>5。 双击列表中的根证书<br>6。 展开Trust部分<br>7。 将When using this certificate:选择框更改为“始终信任”</p><p><img src="/2021/10/12/openssl/img_2.png" alt="img_2.png"></p><p>8。 关闭证书窗口<br>9。 它会要求你输入密码（或扫描你的手指）,这样做</p><h2 id="如何在自己的私有网站创建https的征书"><a href="#如何在自己的私有网站创建https的征书" class="headerlink" title="如何在自己的私有网站创建https的征书"></a>如何在自己的私有网站创建https的征书</h2><p>创建一个新的OpenSSL配置文件, server.csr.cnf以便在创建证书时可以导入这些设置,<br>而不必在命令行上输入它们。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[req]</span><br><span class="line">default_bits = 2048</span><br><span class="line">prompt = no</span><br><span class="line">default_md = sha256</span><br><span class="line">distinguished_name = dn</span><br><span class="line"></span><br><span class="line">[dn]</span><br><span class="line">C=US</span><br><span class="line">ST=RandomState</span><br><span class="line">L=RandomCity</span><br><span class="line">O=RandomOrganization</span><br><span class="line">OU=RandomOrganizationUnit</span><br><span class="line">emailAddress=hello@example.com</span><br><span class="line">CN = localhost</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们是所有设备上的 CA,我们可以为任何需要 HTTPS 的新开发站点签署证书。<br>首先,我们创建一个私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">openssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 \</span><br><span class="line">-keyout server.key -config &lt;(cat server.csr.cnf)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>您将得到与上述相同的所有步骤,而且您的输出证书的内容并不重要。<br>因为您不会在其他的列表中查看此证书。</p><p>接下来,我们将使用 CSR、CA 私钥、CA 证书和配置文件创建证书,但首先我们需要创建该配置文件。</p><p>需要配置文件来定义在证书的本节（即扩展名）中定义的主题备用名称（SAN）扩展名：</p><p>我们将运行该openssl x509命令来创建证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> cert.csr \</span><br><span class="line">-CA ca.pem -CAkey ca.key -CAcreateserial \</span><br><span class="line">-out server.crt -days 825 -sha256 \</span><br><span class="line">-extfile server.ext</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件 (server.ext) 包含以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subjectKeyIdentifier = <span class="built_in">hash</span></span><br><span class="line">basicConstraints = critical, CA:<span class="literal">true</span></span><br><span class="line">keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line"><span class="comment"># 需要添加https的域名</span></span><br><span class="line">DNS.1 = www.baidu.com</span><br></pre></td></tr></table></figure><p>我现在有三个文件： server.key（私钥）、<br>server.csr（证书签名请求）和  server.crt（签名证书）。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>使用golang 验证</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,</span><br><span class="line"><span class="string">&quot;Hi, This is an example of https service in golang!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">err := http.ListenAndServeTLS(<span class="string">&quot;:443&quot;</span>, <span class="string">&quot;server.crt&quot;</span>,</span><br><span class="line"><span class="string">&quot;private.key&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<a class="link" href="https://localhost/">https://localhost<i class="fas fa-external-link-alt"></i></a></p><p><img src="/2021/10/12/openssl/img_4.png" alt="img.png"></p><p>在自己的mac电脑上面导入ca.pem证书,并信任此证书。</p><p><img src="/2021/10/12/openssl/img_3.png" alt="img3.png"></p><p>再次访问当前的页面, 此时已经成功访问。</p><p><img src="/2021/10/12/openssl/img_6.png" alt="img.png"></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>浏览器是如何验证HTTPS证书合法性的<br><a class="link" href="https://www.anxinssl.com/9304.html">https://www.anxinssl.com/9304.html<i class="fas fa-external-link-alt"></i></a></p></li><li><p>HTTPS 的工作原理<br><a class="link" href="https://dahamposithapathiraja.medium.com/how-https-works-5c44fd3f694c">https://dahamposithapathiraja.medium.com/how-https-works-5c44fd3f694c<i class="fas fa-external-link-alt"></i></a></p></li><li><p>OpenSSL Examples to Help You in Real-World<br><a class="link" href="https://geekflare.com/openssl-commands-certificates/">https://geekflare.com/openssl-commands-certificates/<i class="fas fa-external-link-alt"></i></a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在以前的工作中,一直没有弄清楚证书的作用及ca证,pem等等后缀文件的作用,本篇文章主要讲解&lt;br&gt;证书是如何生成的及ssl加密原理是什么样的？&lt;/p&gt;
&lt;h3 id=&quot;SSL&quot;&gt;&lt;a href=&quot;#SSL&quot; class=&quot;headerlink&quot; title=&quot;SSL&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>java-序列化</title>
    <link href="http://example.com/2021/09/22/java/serialization/"/>
    <id>http://example.com/2021/09/22/java/serialization/</id>
    <published>2021-09-22T14:28:03.000Z</published>
    <updated>2021-12-20T02:36:54.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其他方法优先于java序列化"><a href="#其他方法优先于java序列化" class="headerlink" title="其他方法优先于java序列化"></a>其他方法优先于java序列化</h2><pre><code>java反序列化是一个明显存在的风险,它不仅被应用直接广泛使用,也被java子系统RMI(远程方法调用)、JMX(Java管理扩展)和JMS等大量的间接被使用。将不被信任的流进行反序列化,可能导致远程代码执行,拒绝服务,以及一系列其他的攻击。即使应用本身没有做错任何事情,也可能被攻击。下面举一个例子, 在下面的例子中只要引入serializable, 就可以轻易地展开一次拒绝服务的攻击。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] bomb() &#123;</span><br><span class="line">    Set&lt;Object&gt; root = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Set&lt;Object&gt; s1 = root;</span><br><span class="line">    Set&lt;Object&gt; s2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Set&lt;Object&gt; t1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Object&gt; t2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        t1.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        s1.add(t1);</span><br><span class="line">        s2.add(t1);</span><br><span class="line">        s1 = t1;</span><br><span class="line">        s2 = t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialize(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每当反序列化一个不信任的字节流时,自己就需要试着去攻击它。<code>避免序列化攻击的最佳方式是永远不要序列化任何东西</code>。主要原因 </p><ol><li>如果系统是机遇java序列化的 ,那么就无法迁移到别的平台或者别的语言的结构化数据表示法。</li><li>java序列化存在很高的风险.</li></ol><p>我们应该使用一种支持跨平台的数据结构例如： json 和protobuf。</p><h2 id="谨慎地实现serializable-接口"><a href="#谨慎地实现serializable-接口" class="headerlink" title="谨慎地实现serializable 接口"></a>谨慎地实现serializable 接口</h2><p>实现了serializable 接口主要有以下代价:</p><ol><li><p>如果想要这个类允许被序列化,那么非常简单 只需要在类上声明 implements serializable即可。但是这样做就会导致 一旦这个类被发布,<br>就大大降低了”改变这个类的实现”的灵活性,如果实现了serializable,那么他的所有的字节流编码就本城了它的导出API的一部分。如果接受了<br>默认的反序列化形式,那么这个类中的私有的实例都变成导出的API的一部分。这个不符合”最低限度地访问域”</p></li><li><p>实现了serializable 接口之后增加了出现BUG 和安全漏洞爹可能性。</p></li><li><p>随着类发行新的版本,相关的测试负担也会增加。</p></li></ol><p>以上几处 我们应该为了继承而设计类 我们应该尽可能少地去实现serializable 接口,用户的接口也应该少的继承serializable 接口。</p><h2 id="考虑使用自定义的序列化形式"><a href="#考虑使用自定义的序列化形式" class="headerlink" title="考虑使用自定义的序列化形式"></a>考虑使用自定义的序列化形式</h2><p>如果一个对象的物理表示法等同于它的逻辑内容,可能就适合于使用默认的序列化形式。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String middleName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使你确定了默认的序列化形式是适合的,通常还必须提供一个readObject 方法以保证约束关系和安全性。</p><p>当一个对象的物理表示法与它的逻辑数据内容有实质性的区别时,使用默认序列形式会有以下4个缺点：</p><ol><li>它使这个类的导出API 永远地束缚在该类的内部表示法上。</li><li>他会消耗过多的空间</li><li>他会消耗过多的时间</li><li>他会引起堆栈溢出</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;其他方法优先于java序列化&quot;&gt;&lt;a href=&quot;#其他方法优先于java序列化&quot; class=&quot;headerlink&quot; title=&quot;其他方法优先于java序列化&quot;&gt;&lt;/a&gt;其他方法优先于java序列化&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;java反序列化是一个明显存</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在go中查看代码的内存及cpu使用情况 (二)</title>
    <link href="http://example.com/2021/09/13/go-gc/go-heap2/"/>
    <id>http://example.com/2021/09/13/go-gc/go-heap2/</id>
    <published>2021-09-12T16:20:13.000Z</published>
    <updated>2021-12-20T02:36:55.245Z</updated>
    
    <content type="html"><![CDATA[<p>在上面的章节我们讲了如何在go的代码中发现内存和cpu的使用情况, 这个章节主要是讲一个具体的例子,通过这个例子我们怎么来找到我们代码中的问题 , 然后我们怎么去解决的。</p><p>首先我们来看一下现象, 以下图片是我查询prometheus返回的图片, 以下是promql 语句, 意思就是查询 6h小时内 simple 这个服务内存使用情况,<br>我们从图中很明显看出来这个服务的内存一直在增加。在内存增加的过程中我们可以看到有一些波谷的情况, 这是由于go的垃圾回收机制在起作用,但是 回收的真是杯水车薪。主要的趋势还是在增加的。在10-11 点的时候我中断请求,<br>内存有显著的下降但是也有很多没有回收, 从这个图我们可以明显得出结论, 当前这个服务存在内存泄漏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_memory_usage_bytes&#123;container&#x3D;&quot;simple&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/13/go-gc/go-heap2/img4.png" alt="img.png"></p><p>当我们定位出了内存泄漏, 接下来我们怎么来定位代码中哪个地方内存泄漏了呢？ 接下来我们需要使用pprof来定位具体的原因,在上一个章节我们已经讲过如果使用 pprof 这里我就不在多余的赘述这个问题。 接下来我们具体看现象,<br>在图中我们看到了一处异常的情况。当前服务使用了79399次gorouting。我不确定这个是不是引起内存泄漏的根本原因,但是出现这个问题 对于服务也是很严重的。我们首先看看为什么会产生这么多的gorouting吧。</p><p><img src="/2021/09/13/go-gc/go-heap2/img5.png" alt="img.png"></p><p>接下来我们来看看具体是哪个代码导致的。在下图中我们可以看到是由于pipeline.go 61行导致的。 我们来看看代码吧。</p><p><img src="/2021/09/13/go-gc/go-heap2/img6.png" alt="img.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilterService</span><span class="params">(itemChan &lt;-<span class="keyword">chan</span> ingress.Access, services []<span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">ingress</span>.<span class="title">Access</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> ingress.Access)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(channel)</span><br><span class="line">        data := &lt;-itemChan</span><br><span class="line">        <span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> _, service := <span class="keyword">range</span> services &#123;</span><br><span class="line">            <span class="keyword">if</span> data.ServiceName() == service &#123;</span><br><span class="line">                <span class="comment">// 主要是由于这行死锁导致这么多gorouting的</span></span><br><span class="line">                channel &lt;- data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到这里我们已经知道是什么原因了？ 我们在这里先了解以下channel会产生死锁的因素。</p><h3 id="例一"><a href="#例一" class="headerlink" title="例一:"></a>例一:</h3><p>如果a为空时 那么b := &lt;-a这个地方会一直死锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    a = <span class="literal">nil</span></span><br><span class="line">    b := &lt;-a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b :%d \n&quot;</span>, b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;complete !!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例二"><a href="#例二" class="headerlink" title="例二:"></a>例二:</h3><p>当我们新建一个size 为0 的channel 时, 这个时候当前channel 的缓冲区为0, 如果没有消费者的时候也会造成死锁的情况。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc1</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">mu := sync.WaitGroup&#123;&#125;</span><br><span class="line">mu.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(a)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">a &lt;- <span class="number">1</span></span><br><span class="line">mu.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(<span class="number">1</span> * time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> cc := &lt;-a:</span><br><span class="line">fmt.Println(<span class="string">&quot;xx&quot;</span>, cc)</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">fmt.Println(<span class="string">&quot;ticker&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">mu.Done()</span><br><span class="line">&#125;()</span><br><span class="line">mu.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;complete !!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从上面俩个例子看应该是第二种 没有消费者导致这个死锁的产生。因为在放入这个channel 中上面的代码已经判断这个data是否为空。<br>所以我们往后看。data就是消费这个channel的, 我们可以看到这个地方只有一个select,所以这个地方 要么就走了这个data,要么就<br>走进了这个tick 定时器。这个定时器的时长是12s, 所以就是这个时长超过了12s 导致了走了定时器, 消费者没了。到了这个地方似乎是明确了<br>问题的所在。但是这个也是一个猜测,这个时候我们就使用了opentracing在代码中埋点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalculateQPS</span><span class="params">(data &lt;-<span class="keyword">chan</span> ingress.Access, timeTick &lt;-<span class="keyword">chan</span> time.Time,</span></span></span><br><span class="line"><span class="function"><span class="params">qpsRecord <span class="keyword">map</span>[<span class="keyword">string</span>]*metrics.Calculate)</span> &lt;-<span class="title">chan</span> *<span class="title">serviceInfo</span></span> &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> *serviceInfo)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(channel)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> item := &lt;-data:</span><br><span class="line"><span class="keyword">if</span> item == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record, exist := qpsRecord[item.ServiceName()]; exist &#123;</span><br><span class="line">record.Update(item.Upstream(), item.AccessTime())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">qpsRecord[item.ServiceName()] = metrics.NewCalculate(item.Upstream(), item.AccessTime())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-timeTick:</span><br><span class="line"><span class="keyword">for</span> service, calculate := <span class="keyword">range</span> qpsRecord &#123;</span><br><span class="line">channel &lt;- &amp;serviceInfo&#123;Name: service, AvgQps: calculate.AvgQps(), PodCount: calculate.GetPodCount()&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我看到这个消费能力很不错都控制在12us以内, 所以我猜想的这个想法是所务的。</p><p><img src="/2021/09/13/go-gc/go-heap2/img8.png" alt="img.png"></p><p>改了这个问题后服务的内存恢复了正常, 这个时候我们需要回顾一下, 为什么那么多的gorouting 会产生内存 很高的情况,cpu 基本没有什么变化。<br>那么下一讲我们来介绍死锁会导致内存高 还是cpu高还是都高呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上面的章节我们讲了如何在go的代码中发现内存和cpu的使用情况, 这个章节主要是讲一个具体的例子,通过这个例子我们怎么来找到我们代码中的问题 , 然后我们怎么去解决的。&lt;/p&gt;
&lt;p&gt;首先我们来看一下现象, 以下图片是我查询prometheus返回的图片, 以下是prom</summary>
      
    
    
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>在go中查看代码的内存及cpu使用情况 (一)</title>
    <link href="http://example.com/2021/09/10/go-gc/go-heap/"/>
    <id>http://example.com/2021/09/10/go-gc/go-heap/</id>
    <published>2021-09-10T15:23:13.000Z</published>
    <updated>2021-12-20T02:36:55.174Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的开发过程中, 开发者很容易忽略一个问题。我们代码使用的内存堆栈的大小, 我们是在什么地方使用了较大的内存, cpu<br>的消耗在什么地方。以下我就针对我之前写的一个服务对我代码中内存和cpu进行分析。</p><p>首先这种方式仅限于在go中使用,对其他的语言不适用。</p><p>在我们的代码main中引入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//pprof</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      http.ListenAndServe(<span class="string">&quot;0.0.0.0:6060&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动之后我们访问localhost:6060 我们就可以看到我们内存堆栈的信息。如下图</p><p><img src="/2021/09/10/go-gc/go-heap/img.png" alt="img.png"></p><p>allocs： 过去所有内存分配的样本<br>block： 导致同步原语阻塞的堆栈跟踪<br>cmdline： 当前程序的命令行调用<br>goroutine： 所有当前 goroutine 的堆栈跟踪<br>heap：活动对象的内存分配示例。您可以指定 gc GET 参数以在获取堆样本之前运行 GC。<br>mutex： 竞争互斥锁持有者的堆栈跟踪<br>profile：CPU 配置文件。您可以在 seconds GET 参数中指定持续时间。获取配置文件后,使用 go tool pprof 命令调查配置文件。<br>threadcreate： 导致创建新操作系统线程的堆栈跟踪<br>trace：当前程序的执行轨迹。您可以在 seconds GET 参数中指定持续时间。获取跟踪文件后,使用 go tool trace 命令调查跟踪。</p><h2 id="火力图"><a href="#火力图" class="headerlink" title="火力图"></a>火力图</h2><p>以下我们展示一下, 在go中展示火力图 看起来很炫酷。</p><p><img src="/2021/09/10/go-gc/go-heap/img1.png" alt="img1.png"></p><p>我们来看一下怎么做的首先我们先安装uber 开发的<code>go-torch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/uber/go-torch</span><br></pre></td></tr></table></figure><p>这个需要依赖一个flamegraph <a class="link" href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install flamegraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我们生成我们的火力图吧</span></span><br><span class="line">go-torch -u http://10.10.13.118:31795/debug/pprof</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行完以上命令会生成一个svg文件打开当前文件我们就可以看到火力图了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/09/10/go-gc/go-heap/img2.png" alt="img2.png"></p><p>我们可以从红色的框可以看到具体内存使用的地方在哪里。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simple-hpa/src/handler.(*nginxDataHandler).parseData.func1</span><br><span class="line">这个函数使用了<span class="number">43.42</span>%</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我们的开发过程中, 开发者很容易忽略一个问题。我们代码使用的内存堆栈的大小, 我们是在什么地方使用了较大的内存, cpu&lt;br&gt;的消耗在什么地方。以下我就针对我之前写的一个服务对我代码中内存和cpu进行分析。&lt;/p&gt;
&lt;p&gt;首先这种方式仅限于在go中使用,对其他的语言不适</summary>
      
    
    
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>istio无法访问外部tcp服务(一)</title>
    <link href="http://example.com/2021/08/24/k8s/istio/istio-network/"/>
    <id>http://example.com/2021/08/24/k8s/istio/istio-network/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-12-20T02:36:55.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天在生产环境出现了一个非常奇怪的问题, 集群内部环境无法访问集群外部的mysql, 好像redis也有类似的问题, 当时k8s版本1.11 istio 1.4,<br>istio和k8s 版本都比较低。后面 用istio1.6 貌似也有同样的问题。</p><h2 id="使用集群内部的mysql"><a href="#使用集群内部的mysql" class="headerlink" title="使用集群内部的mysql"></a>使用集群内部的mysql</h2><p>首先我们在集群内访问试一下, 我使用一个mysql的client 端和server 来模拟这种情况</p><p>mysql-client —-&gt; mysql-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  generation: 2</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  name: mysql-server</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  progressDeadlineSeconds: 600</span></span><br><span class="line"><span class="string">  replicas: 1</span></span><br><span class="line"><span class="string">  revisionHistoryLimit: 10</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: mysql-server</span></span><br><span class="line"><span class="string">  strategy:</span></span><br><span class="line"><span class="string">    rollingUpdate:</span></span><br><span class="line"><span class="string">      maxSurge: 25%</span></span><br><span class="line"><span class="string">      maxUnavailable: 25%</span></span><br><span class="line"><span class="string">    type: RollingUpdate</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      creationTimestamp: null</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        app: mysql-server</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">        - env:</span></span><br><span class="line"><span class="string">            - name: MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="string">              value: password</span></span><br><span class="line"><span class="string">          image: mysql</span></span><br><span class="line"><span class="string">          imagePullPolicy: Always</span></span><br><span class="line"><span class="string">          name: mysql</span></span><br><span class="line"><span class="string">          ports:</span></span><br><span class="line"><span class="string">            - containerPort: 3306</span></span><br><span class="line"><span class="string">              protocol: TCP</span></span><br><span class="line"><span class="string">          resources: &#123;&#125;</span></span><br><span class="line"><span class="string">          terminationMessagePath: /dev/termination-log</span></span><br><span class="line"><span class="string">          terminationMessagePolicy: File</span></span><br><span class="line"><span class="string">      dnsPolicy: ClusterFirst</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">      schedulerName: default-scheduler</span></span><br><span class="line"><span class="string">      securityContext: &#123;&#125;</span></span><br><span class="line"><span class="string">      terminationGracePeriodSeconds: 30</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  name: mysql-server</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  clusterIP: 10.68.228.107</span></span><br><span class="line"><span class="string">  externalTrafficPolicy: Cluster</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">    - name: 3306-3306</span></span><br><span class="line"><span class="string">      nodePort: 32011</span></span><br><span class="line"><span class="string">      port: 3306</span></span><br><span class="line"><span class="string">      protocol: TCP</span></span><br><span class="line"><span class="string">      targetPort: 3306</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  sessionAffinity: None</span></span><br><span class="line"><span class="string">  type: NodePort</span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"></span><br><span class="line">$ kubectl apply -f - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  generation: 2</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-client</span></span><br><span class="line"><span class="string">  name: mysql-client</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  progressDeadlineSeconds: 600</span></span><br><span class="line"><span class="string">  replicas: 1</span></span><br><span class="line"><span class="string">  revisionHistoryLimit: 10</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: mysql-client</span></span><br><span class="line"><span class="string">  strategy:</span></span><br><span class="line"><span class="string">    rollingUpdate:</span></span><br><span class="line"><span class="string">      maxSurge: 25%</span></span><br><span class="line"><span class="string">      maxUnavailable: 25%</span></span><br><span class="line"><span class="string">    type: RollingUpdate</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      creationTimestamp: null</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        app: mysql-client</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">        - image: clarechu/mysql-client:v1</span></span><br><span class="line"><span class="string">          imagePullPolicy: Always</span></span><br><span class="line"><span class="string">          name: mysql</span></span><br><span class="line"><span class="string">          resources: &#123;&#125;</span></span><br><span class="line"><span class="string">          terminationMessagePath: /dev/termination-log</span></span><br><span class="line"><span class="string">          terminationMessagePolicy: File</span></span><br><span class="line"><span class="string">      dnsPolicy: ClusterFirst</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">      schedulerName: default-scheduler</span></span><br><span class="line"><span class="string">      securityContext: &#123;&#125;</span></span><br><span class="line"><span class="string">      terminationGracePeriodSeconds: 30</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看pod状态并注入sidecar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl get po</span><br><span class="line"> </span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-client-b7db8cc46-99cx5    2/2     Running   0          81s</span><br><span class="line">mysql-server-6c845f449b-525q6   2/2     Running   0          81s</span><br></pre></td></tr></table></figure><p>当我们注入sidecar 之后我们测试一下 client端能否访问的server mysql, 可以看到是可以正常访问mysql-server 的,我们现在看看其中到底发生了什么？ 在同一个ns下是可以正常的访问mysql-server的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet mysql-server 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to mysql-server</span><br><span class="line">J</span><br><span class="line">8.0.26*F?eZTM\�~h<span class="comment">#DD#2)caching_sha2_password</span></span><br></pre></td></tr></table></figure><p>我们首先查看mysql-client 这个pod 出口的listener(监听器), 从下面的返回的监听器我们可以看出3306 端口只有一个<code>mysql-server.demo1.svc.cluster.local</code>的监听器, 然后我们看看这个监听器的cluster是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl  pc listener mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ADDRESS       PORT MATCH DESTINATION</span><br><span class="line">10.68.228.107 3306 ALL   Cluster: outbound|3306||mysql-server.demo1.svc.cluster.local</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为监听器的打印太多了 我就截了一小段, 可以看到3306出口cluster 为<code>outbound|3306||mysql-server.demo1.svc.cluster.local</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.filters.network.tcp_proxy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;statPrefix&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cluster&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accessLog&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.access_loggers.file&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/dev/stdout&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;logFormat&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;textFormat&quot;</span>: <span class="string">&quot;[%START_TIME%] \&quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&quot; %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% \&quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&quot;%REQ(X-FORWARDED-FOR)%\&quot; \&quot;%REQ(USER-AGENT)%\&quot; \&quot;%REQ(X-REQUEST-ID)%\&quot; \&quot;%REQ(:AUTHORITY)%\&quot; \&quot;%UPSTREAM_HOST%\&quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们查询当前pod的cluster</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">$ stioctl pc cluster mysql-client-b7db8cc46-99cx5 --fqdn <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span> -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;transportSocketMatches&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tlsMode-istio&quot;</span>,</span><br><span class="line">                <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tlsMode&quot;</span>: <span class="string">&quot;istio&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;transportSocket&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.transport_sockets.tls&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;commonTlsContext&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;tlsCertificateSdsSecretConfigs&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;sdsConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;apiConfigSource&quot;</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;apiType&quot;</span>: <span class="string">&quot;GRPC&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;transportApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;grpcServices&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="string">&quot;envoyGrpc&quot;</span>: &#123;</span><br><span class="line">                                                        <span class="string">&quot;clusterName&quot;</span>: <span class="string">&quot;sds-grpc&quot;</span></span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ],</span><br><span class="line">                                            <span class="string">&quot;setNodeOnFirstMessageOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="string">&quot;initialFetchTimeout&quot;</span>: <span class="string">&quot;0s&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            <span class="string">&quot;combinedValidationContext&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;defaultValidationContext&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;matchSubjectAltNames&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="string">&quot;exact&quot;</span>: <span class="string">&quot;spiffe://cluster.local/ns/demo1/sa/default&quot;</span></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;validationContextSdsSecretConfig&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ROOTCA&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;sdsConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;apiConfigSource&quot;</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;apiType&quot;</span>: <span class="string">&quot;GRPC&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;transportApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;grpcServices&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="string">&quot;envoyGrpc&quot;</span>: &#123;</span><br><span class="line">                                                        <span class="string">&quot;clusterName&quot;</span>: <span class="string">&quot;sds-grpc&quot;</span></span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ],</span><br><span class="line">                                            <span class="string">&quot;setNodeOnFirstMessageOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="string">&quot;initialFetchTimeout&quot;</span>: <span class="string">&quot;0s&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="string">&quot;alpnProtocols&quot;</span>: [</span><br><span class="line">                                <span class="string">&quot;istio-peer-exchange&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;istio&quot;</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;sni&quot;</span>: <span class="string">&quot;outbound_.3306_._.mysql-server.demo1.svc.cluster.local&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tlsMode-disabled&quot;</span>,</span><br><span class="line">                <span class="string">&quot;match&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;transportSocket&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.transport_sockets.raw_buffer&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EDS&quot;</span>,</span><br><span class="line">        <span class="string">&quot;edsClusterConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;edsConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ads&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;serviceName&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;connectTimeout&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;circuitBreakers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;thresholds&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;maxConnections&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxPendingRequests&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxRequests&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxRetries&quot;</span>: 4294967295</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;filterMetadata&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;istio&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;default_original_port&quot;</span>: 3306,</span><br><span class="line">                    <span class="string">&quot;services&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql-server&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;demo1&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;filters&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;istio.metadata_exchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/udpa.type.v1.TypedStruct&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;typeUrl&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;istio-peer-exchange&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们从cluster的配置我们知道</p><p>使用EDS来找到destination 的pod, Envoy 将查找名为的服务的列表 <code>outbound|3306||mysql-server.demo1.svc.cluster.local</code></p><p>下面我们看看envoy 中endpoint <code>outbound|3306||mysql-server.demo1.svc.cluster.local</code> 列表,  从而找到mysql-server 的pod ip<br>–&gt; <code>172.20.0.30</code> 看起来没有任何问题。所以我们从这个地方可以得出一个结论。</p><p>我当时认为流量是这么路由的 但是通过我们对ep的查看流量是没有经过svc地址的 直接访问当前服务的<code>endpoint</code>地址<br><img src="/2021/08/24/k8s/istio/istio-network/img_2.png" alt="img2.png"></p><p>此时是这个样子的, 当服务注入sidecar之后是不经过k8s 的svc的直接访问出口的pod ip。</p><p><img src="/2021/08/24/k8s/istio/istio-network/img_1.png" alt="img1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  istioctl pc ep mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ENDPOINT             STATUS      OUTLIER CHECK     CLUSTER</span><br><span class="line">172.20.0.30:3306     HEALTHY     OK                outbound|3306||mysql-server.demo1.svc.cluster.local</span><br><span class="line"></span><br><span class="line">➜  ~ k get po -o wide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">mysql-client-b7db8cc46-99cx5    2/2     Running   0          33m   172.20.0.31   10.10.13.118   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">mysql-server-6c845f449b-525q6   2/2     Running   0          33m   172.20.0.30   10.10.13.118   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="使用集群外部mysql"><a href="#使用集群外部mysql" class="headerlink" title="使用集群外部mysql"></a>使用集群外部mysql</h2><p>集群里面的流量是正常的,现在我们在集群外面部署一个mysql 从集群内部pod(mysql-client-b7db8cc46-99cx5)访问集群外部的mysql, 此时我们看看能不能正常访问当前的mysql-server, 此时也可以访问的 这个时候我们在来看看listener</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet 10.10.13.110 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to 10.10.13.110</span><br><span class="line">J</span><br><span class="line">8.0.26\r(Juh�5kguvqI2<span class="string">&quot;&#125;!caching_sha2_password</span></span><br></pre></td></tr></table></figure><p>我们现在在任意的命名空间创建一个serviceentry, 这个时候我们在来看发生来什么变化,从下面的例子我们可以看出我们不能正常访问集群外部的流量了, 此时我们看看这个流量到哪里去了呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet 10.10.13.110 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to 10.10.13.110</span><br><span class="line">Connection closed by foreign host</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure><p>我们获取client 的listener, 我们发现多了一个<code>0.0.0.0</code> 的监听器, 这个是由于我在别的ns下创建了一个se导致的,<br>默认在所有监听器都匹配不上的时候就会默认去访问这个<code>0.0.0.0</code>的listener。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl pc listener mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ADDRESS       PORT MATCH DESTINATION</span><br><span class="line">0.0.0.0       3306 ALL   Cluster: outbound|3306||mysql.demo</span><br><span class="line">10.68.228.107 3306 ALL   Cluster: outbound|3306||mysql-server.demo1.svc.cluster.local</span><br></pre></td></tr></table></figure><p>接下来我们来看看cluster是什么, 默认访问的是<code>outbound|3306||mysql.demo</code>, 这个地址指向到一个空的svc上面, 所以我们访问不了外部的svc地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl pc listener mysql-client-b7db8cc46-99cx5 --port 3306 -o json</span><br><span class="line">        </span><br><span class="line">&#123;</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.filters.network.tcp_proxy&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;statPrefix&quot;</span>: <span class="string">&quot;outbound|3306||mysql.demo&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;cluster&quot;</span>: <span class="string">&quot;outbound|3306||mysql.demo&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;accessLog&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.access_loggers.file&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&quot;</span>,</span><br><span class="line">                                        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/dev/stdout&quot;</span>,</span><br><span class="line">                                        <span class="attr">&quot;logFormat&quot;</span>: &#123;</span><br><span class="line">                                            <span class="attr">&quot;textFormat&quot;</span>: <span class="string">&quot;[%START_TIME%] \&quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&quot; %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% \&quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&quot;%REQ(X-FORWARDED-FOR)%\&quot; \&quot;%REQ(USER-AGENT)%\&quot; \&quot;%REQ(X-REQUEST-ID)%\&quot; \&quot;%REQ(:AUTHORITY)%\&quot; \&quot;%UPSTREAM_HOST%\&quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&quot;</span></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br></pre></td></tr></table></figure><p>在别的命名空间下创建serviceentry 会影响当前namespace 下服务。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>使用sidecar crd资源</li></ol><p>在我们创建serviceentry 的namespace 中写入一个sidecar的资源,该例子是在demo1的<br>命名空间中声明了一个全局默认配置,该配置在所有命名空间中配置sidecar以仅允许出口流量到同一命名空间中的其他工作负载以及命名空间中的服务 istio-system</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sidecar</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;./*&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;istio-system/*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们创建了sidecar 资源后我们在观察mysql-client 这个pod的listener, 此时少了一个0.0.0.0 的监听器,我们在来求证一下mysql-client 是否能正常访问外部mysql服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">istioctl</span> <span class="string">pc</span>  <span class="string">listener</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">--port</span> <span class="number">3306</span></span><br><span class="line"><span class="string">ADDRESS</span>       <span class="string">PORT</span> <span class="string">MATCH</span> <span class="string">DESTINATION</span></span><br><span class="line"><span class="attr">10.68.228.107 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-server.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">10.68.66.97   3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-client.demo1.svc.cluster.local</span></span><br><span class="line"></span><br><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">kubectl</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">telnet</span> <span class="number">10.10</span><span class="number">.13</span><span class="number">.110</span> <span class="number">3306</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">exec</span> [<span class="string">POD</span>] [<span class="string">COMMAND</span>] <span class="string">is</span> <span class="string">DEPRECATED</span> <span class="string">and</span> <span class="string">will</span> <span class="string">be</span> <span class="string">removed</span> <span class="string">in</span> <span class="string">a</span> <span class="string">future</span> <span class="string">version.</span> <span class="string">Use</span> <span class="string">kubectl</span> <span class="string">exec</span> [<span class="string">POD</span>] <span class="string">--</span> [<span class="string">COMMAND</span>] <span class="string">instead.</span></span><br><span class="line"><span class="string">Defaulted</span> <span class="string">container</span> <span class="string">&quot;mysql&quot;</span> <span class="attr">out of:</span> <span class="string">mysql,</span> <span class="string">istio-proxy,</span> <span class="string">istio-init</span> <span class="string">(init)</span></span><br><span class="line"><span class="string">Connected</span> <span class="string">to</span> <span class="number">10.10</span><span class="number">.13</span><span class="number">.110</span></span><br><span class="line"><span class="string">J</span></span><br><span class="line"><span class="string">B5&gt;�I=6s=E6,&amp;M&#125;Qcaching_sha2_password</span></span><br><span class="line"></span><br><span class="line"><span class="type">!#08S01Got</span> <span class="string">packets</span> <span class="string">out</span> <span class="string">of</span> <span class="string">orderConnection</span> <span class="string">closed</span> <span class="string">by</span> <span class="string">foreign</span> <span class="string">host</span></span><br><span class="line"><span class="string">command</span> <span class="string">terminated</span> <span class="string">with</span> <span class="string">exit</span> <span class="string">code</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>更改其他的端口</li></ol><p>这种方式当创建了一个端口的se之后我们更改mysql的port 那么就不会匹配到0.0.0.0 3306 的端口这样就不会有这个问题。</p><ol start="3"><li>开启智能dns</li></ol><p>在安装istio的时候开启istio 智能dns,不过这个功能是istio1.8才有的功能,如果版本偏低建议还是升级一下.</p><p>在安装istio的过程中我们需要在iop资源中添加一下以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">meshConfig:</span></span><br><span class="line">  <span class="attr">accessLogFile:</span> <span class="string">/dev/stdout</span></span><br><span class="line">  <span class="attr">defaultConfig:</span></span><br><span class="line">    <span class="attr">proxyMetadata:</span></span><br><span class="line">      <span class="attr">ISTIO_META_DNS_CAPTURE:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>在创建se的时候指定address 使 mysql.demo122 这个host指向这个ip</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">addresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">240.0</span><span class="number">.221</span><span class="number">.130</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql.demo122</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">MESH_INTERNAL</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">resolution:</span> <span class="string">STATIC</span></span><br></pre></td></tr></table></figure><p>当我们创建了这个serviceentry 之后我们在mysql-client中在访问这个host的时候指向这个<code>240.0.221.130</code>的虚拟ip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 ping mysql.demo122</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">PING mysql.demo122 (240.0.221.130) 56(84) bytes of data.</span><br></pre></td></tr></table></figure><p>在来看mysql-client-b7db8cc46-99cx5的监听器少了0.0.0.0 的监听器 多了一条<code>240.0.221.130 3306 ALL   Cluster: outbound|3306||mysql.demo122</code>的监听器,我们在来访问外部的mysql的时候就不会冲突匹配到0.0.0.0的监听器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">istioctl</span> <span class="string">pc</span>  <span class="string">listener</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">--port</span> <span class="number">3306</span></span><br><span class="line"><span class="string">ADDRESS</span>       <span class="string">PORT</span> <span class="string">MATCH</span> <span class="string">DESTINATION</span></span><br><span class="line"><span class="attr">10.68.228.107 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-server.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">10.68.66.97   3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-client.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">240.0.221.130 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql.demo122</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果存在集群内部访问集群外部的应用的时候, 我们应该做到以下几点</p><ol><li>在每个namespace 空间内部创建默认的sidecar, 这样即可降低envoy的内存, 也可以避免其他命名空间的干扰</li><li>访问外部的服务的时候创建serivceentry</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天在生产环境出现了一个非常奇怪的问题, 集群内部环境无法访问集群外部的mysql, 好像redis也有类似的问题, 当时k8s版本1.1</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>在istio1.9中iptables链规则的意义</title>
    <link href="http://example.com/2021/07/19/istio/istio-iptables/"/>
    <id>http://example.com/2021/07/19/istio/istio-iptables/</id>
    <published>2021-07-19T15:23:13.000Z</published>
    <updated>2021-12-20T02:36:55.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在istio1-9中iptables链规则的意义"><a href="#在istio1-9中iptables链规则的意义" class="headerlink" title="在istio1.9中iptables链规则的意义"></a>在istio1.9中iptables链规则的意义</h2><p>我们在k8s集群中安装1.9.4 版本的 istio 。</p><p>基于 istio1.9.4 版本,我们主要介绍istio在虚拟机中对iptables设置规则是什么样的？</p><p>在虚拟机中安装istio中, istio进程交给system进程保管,<br>进程中主要是运行了一个脚本,<br>我们可以看到istio dep 包的脚本如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/<span class="built_in">local</span>/bin/istio-start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright Istio Authors. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Script to configure and start the Istio sidecar.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Match pilot/docker/Dockerfile.proxyv2</span></span><br><span class="line"><span class="comment"># istio 的版本</span></span><br><span class="line"><span class="built_in">export</span> ISTIO_META_ISTIO_VERSION=<span class="string">&quot;1.9.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -a</span><br><span class="line"><span class="comment"># Load optional config variables</span></span><br><span class="line"><span class="comment"># 读取配置文件</span></span><br><span class="line">ISTIO_SIDECAR_CONFIG=<span class="variable">$&#123;ISTIO_SIDECAR_CONFIG:-/var/lib/istio/envoy/sidecar.env&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ -r <span class="variable">$&#123;ISTIO_SIDECAR_CONFIG&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line">  . <span class="string">&quot;<span class="variable">$ISTIO_SIDECAR_CONFIG</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load config variables ISTIO_SYSTEM_NAMESPACE, CONTROL_PLANE_AUTH_POLICY</span></span><br><span class="line">ISTIO_CLUSTER_CONFIG=<span class="variable">$&#123;ISTIO_CLUSTER_CONFIG:-/var/lib/istio/envoy/cluster.env&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ -r <span class="variable">$&#123;ISTIO_CLUSTER_CONFIG&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line">  . <span class="string">&quot;<span class="variable">$ISTIO_CLUSTER_CONFIG</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">set</span> +a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set defaults</span></span><br><span class="line">ISTIO_BIN_BASE=<span class="variable">$&#123;ISTIO_BIN_BASE:-/usr/local/bin&#125;</span></span><br><span class="line">ISTIO_LOG_DIR=<span class="variable">$&#123;ISTIO_LOG_DIR:-/var/log/istio&#125;</span></span><br><span class="line">NS=<span class="variable">$&#123;ISTIO_NAMESPACE:-default&#125;</span></span><br><span class="line">SVC=<span class="variable">$&#123;ISTIO_SERVICE:-rawvm&#125;</span></span><br><span class="line">ISTIO_SYSTEM_NAMESPACE=<span class="variable">$&#123;ISTIO_SYSTEM_NAMESPACE:-istio-system&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default matches the default istio.yaml - use sidecar.env to override this if you</span></span><br><span class="line"><span class="comment"># enable auth. This requires node-agent to be running.</span></span><br><span class="line"><span class="comment"># istiod 控制面的网关地址</span></span><br><span class="line">ISTIO_PILOT_PORT=<span class="variable">$&#123;ISTIO_PILOT_PORT:-15012&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, override the default</span></span><br><span class="line">CONTROL_PLANE_AUTH_POLICY=<span class="variable">$&#123;ISTIO_CP_AUTH:-&quot;MUTUAL_TLS&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;ISTIO_SVC_IP:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  ISTIO_SVC_IP=$(hostname --all-ip-addresses | cut -d <span class="string">&#x27; &#x27;</span> -f 1)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;POD_NAME:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  POD_NAME=$(hostname -s)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Init option will only initialize iptables. set ISTIO_CUSTOM_IP_TABLES to true if you would like to ignore this step</span></span><br><span class="line"><span class="comment"># 初始化iptables 目的讲虚拟机上面的流量打到envoy中</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;ISTIO_CUSTOM_IP_TABLES&#125;</span>&quot;</span> != <span class="string">&quot;true&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 如果是初始化容器 </span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;1-&#125;</span> == <span class="string">&quot;init&quot;</span> || <span class="variable">$&#123;1-&#125;</span> == <span class="string">&quot;-p&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># clean the previous Istio iptables chains. This part is different from the init image mode,</span></span><br><span class="line">      <span class="comment"># where the init container runs in a fresh environment and there cannot be previous Istio chains</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 在istio启动的时候应该清理掉所有的iptables的链</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-clean-iptables</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Update iptables, based on current config. This is for backward compatibility with the init image mode.</span></span><br><span class="line">      <span class="comment"># The sidecar image can replace the k8s init image, to avoid downloading 2 different images.</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 根据规则设置iptables的链</span></span><br><span class="line">      </span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-iptables <span class="string">&quot;<span class="variable">$&#123;@&#125;</span>&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 如果没有在运行的时候</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;1-&#125;</span> != <span class="string">&quot;run&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># clean the previous Istio iptables chains. This part is different from the init image mode,</span></span><br><span class="line">      <span class="comment"># where the init container runs in a fresh environment and there cannot be previous Istio chains</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-clean-iptables</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Update iptables, based on config file</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-iptables</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">EXEC_USER=<span class="variable">$&#123;EXEC_USER:-istio-proxy&#125;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;ISTIO_INBOUND_INTERCEPTION_MODE&#125;</span>&quot;</span> = <span class="string">&quot;TPROXY&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># In order to allow redirect inbound traffic using TPROXY, run envoy with the CAP_NET_ADMIN capability.</span></span><br><span class="line">  <span class="comment"># This allows configuring listeners with the &quot;transparent&quot; socket option set to true.</span></span><br><span class="line">  EXEC_USER=root</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;PILOT_ADDRESS:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  PILOT_ADDRESS=istiod.<span class="variable">$&#123;ISTIO_SYSTEM_NAMESPACE&#125;</span>.svc:<span class="variable">$&#123;ISTIO_PILOT_PORT&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">CA_ADDR=<span class="variable">$&#123;CA_ADDR:-<span class="variable">$&#123;PILOT_ADDRESS&#125;</span>&#125;</span></span><br><span class="line">PROV_CERT=<span class="variable">$&#123;PROV_CERT-/etc/certs&#125;</span></span><br><span class="line">OUTPUT_CERTS=<span class="variable">$&#123;OUTPUT_CERTS-/etc/certs&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PROV_CERT</span><br><span class="line"><span class="built_in">export</span> OUTPUT_CERTS</span><br><span class="line"><span class="built_in">export</span> CA_ADDR</span><br><span class="line"></span><br><span class="line"><span class="comment"># If predefined ISTIO_AGENT_FLAGS is null, make it an empty string.</span></span><br><span class="line">ISTIO_AGENT_FLAGS=<span class="variable">$&#123;ISTIO_AGENT_FLAGS:-&#125;</span></span><br><span class="line"><span class="comment"># Split ISTIO_AGENT_FLAGS by spaces.</span></span><br><span class="line">IFS=<span class="string">&#x27; &#x27;</span> <span class="built_in">read</span> -r -a ISTIO_AGENT_FLAGS_ARRAY &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$ISTIO_AGENT_FLAGS</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PROXY_CONFIG=<span class="variable">$&#123;PROXY_CONFIG:-&quot;</span></span><br><span class="line"><span class="variable">serviceCluster: $SVC</span></span><br><span class="line"><span class="variable">controlPlaneAuthPolicy: <span class="variable">$&#123;CONTROL_PLANE_AUTH_POLICY&#125;</span></span></span><br><span class="line"><span class="variable">discoveryAddress: <span class="variable">$&#123;PILOT_ADDRESS&#125;</span></span></span><br><span class="line"><span class="variable">&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;EXEC_USER&#125;</span> == <span class="string">&quot;<span class="variable">$&#123;USER:-&#125;</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># if started as istio-proxy (or current user), do a normal start, without</span></span><br><span class="line">  <span class="comment"># redirecting stderr.</span></span><br><span class="line">  INSTANCE_IP=<span class="variable">$&#123;ISTIO_SVC_IP&#125;</span> POD_NAME=<span class="variable">$&#123;POD_NAME&#125;</span> POD_NAMESPACE=<span class="variable">$&#123;NS&#125;</span> <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> proxy <span class="string">&quot;<span class="variable">$&#123;ISTIO_AGENT_FLAGS_ARRAY[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will run: $&#123;ISTIO_BIN_BASE&#125;/envoy -c $ENVOY_CFG --restart-epoch 0 --drain-time-s 2 --parent-shutdown-time-s 3 --service-cluster $SVC --service-node &#x27;sidecar~$&#123;ISTIO_SVC_IP&#125;~$&#123;POD_NAME&#125;.$&#123;NS&#125;.svc.cluster.local~$&#123;NS&#125;.svc.cluster.local&#x27; $ISTIO_DEBUG &gt;$&#123;ISTIO_LOG_DIR&#125;/istio.log&quot; istio-proxy</span></span><br><span class="line"><span class="built_in">exec</span> su -s /bin/bash -c <span class="string">&quot;INSTANCE_IP=<span class="variable">$&#123;ISTIO_SVC_IP&#125;</span> POD_NAME=<span class="variable">$&#123;POD_NAME&#125;</span> POD_NAMESPACE=<span class="variable">$&#123;NS&#125;</span> exec <span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent proxy <span class="variable">$&#123;ISTIO_AGENT_FLAGS_ARRAY[*]&#125;</span> 2&gt; <span class="variable">$&#123;ISTIO_LOG_DIR&#125;</span>/istio.err.log &gt; <span class="variable">$&#123;ISTIO_LOG_DIR&#125;</span>/istio.log&quot;</span> <span class="variable">$&#123;EXEC_USER&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="运行的进程为"><a href="#运行的进程为" class="headerlink" title="运行的进程为"></a>运行的进程为</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># INSTANCE_IP 当前虚拟机的ip</span></span><br><span class="line"><span class="comment"># 虚拟机中设置的ip</span></span><br><span class="line"><span class="comment"># 运行 pilot-agent proxy 当前进程</span></span><br><span class="line">$ su -s /bin/bash -c INSTANCE_IP=10.10.13.113 POD_NAME=localhost POD_NAMESPACE=vm <span class="built_in">exec</span> /usr/<span class="built_in">local</span>/bin/pilot-agent proxy  2&gt; /var/<span class="built_in">log</span>/istio/istio.err.log &gt; /var/<span class="built_in">log</span>/istio/istio.log istio-proxy</span><br></pre></td></tr></table></figure><p>我们来看看pilot-agent proxy 具体干了些什么吧？</p><p>我们来到istio/pilot/cmd/pilot-agent/main.go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">agent := envoy.NewAgent(envoyProxy, drainDuration)</span><br><span class="line"></span><br><span class="line">// Watcher is also kicking envoy start.</span><br><span class="line">watcher := envoy.NewWatcher(agent.Restart)</span><br><span class="line">go watcher.Run(ctx)</span><br><span class="line"></span><br><span class="line">// On SIGINT or SIGTERM, cancel the context, triggering a graceful shutdown</span><br><span class="line">go cmd.WaitSignalFunc(cancel)</span><br><span class="line">            <span class="comment"># 前面是数据组装我们就不过多的讲解, 最后一句agent 运行 envoy </span></span><br><span class="line"><span class="built_in">return</span> agent.Run(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我们看看实现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (a *agent) Run(ctx context.Context) error &#123;</span><br><span class="line">log.Info(<span class="string">&quot;Starting proxy agent&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">select &#123;</span><br><span class="line"><span class="keyword">case</span> status := &lt;-a.statusCh:</span><br><span class="line">a.mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> status.err != nil &#123;</span><br><span class="line"><span class="keyword">if</span> status.err.Error() == errOutOfMemory &#123;</span><br><span class="line">log.Warnf(<span class="string">&quot;Envoy may have been out of memory killed. Check memory usage and limits.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Errorf(<span class="string">&quot;Epoch %d exited with error: %v&quot;</span>, status.epoch, status.err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Infof(<span class="string">&quot;Epoch %d exited normally&quot;</span>, status.epoch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete(a.activeEpochs, status.epoch)</span><br><span class="line"></span><br><span class="line">active := len(a.activeEpochs)</span><br><span class="line">a.mutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> active == 0 &#123;</span><br><span class="line">log.Infof(<span class="string">&quot;No more active epochs, terminating&quot;</span>)</span><br><span class="line"><span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Infof(<span class="string">&quot;%d active epochs running&quot;</span>, active)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="comment"># terminate</span></span><br><span class="line">a.terminate()</span><br><span class="line">log.Info(<span class="string">&quot;Agent has successfully terminated&quot;</span>)</span><br><span class="line"><span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用enovy的API 运行envoy 动态加载配置</span></span><br><span class="line">func doEnvoyPost(path, contentType, body string, adminPort uint32) (*bytes.Buffer, error) &#123;</span><br><span class="line">requestURL := fmt.Sprintf(<span class="string">&quot;http://127.0.0.1:%d/%s&quot;</span>, adminPort, path)</span><br><span class="line">buffer, err := doHTTPPost(requestURL, contentType, body)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span> nil, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> buffer, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在istio启动时的日志及设置链的规则如下"><a href="#在istio启动时的日志及设置链的规则如下" class="headerlink" title="在istio启动时的日志及设置链的规则如下"></a>在istio启动时的日志及设置链的规则如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- Logs begin at 一 2021-07-19 08:59:42 UTC, end at 一 2021-07-19 16:01:01 UTC. --</span><br><span class="line">7月 19 09:03:35 localhost.localdomain systemd[1]: Started istio-sidecar: The Istio sidecar.</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by ip6tables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by ip6tables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Environment:</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ------------</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ENVOY_PORT=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_CAPTURE_PORT=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_INTERCEPTION_MODE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_TPROXY_MARK=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_TPROXY_ROUTE_TABLE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_PORTS=8080</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_OUTBOUND_PORTS=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_LOCAL_EXCLUDE_PORTS=15090,15021</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_SERVICE_CIDR=*</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_SERVICE_EXCLUDE_CIDR=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Variables:</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ----------</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_PORT=15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_INBOUND_CAPTURE_PORT=15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_TUNNEL_PORT=15008</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_UID=997</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_GID=997</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_INTERCEPTION_MODE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_TPROXY_MARK=1337</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_TPROXY_ROUTE_TABLE=133</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_PORTS_INCLUDE=8080</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_PORTS_EXCLUDE=15090,15021</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_IP_RANGES_INCLUDE=*</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_IP_RANGES_EXCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_PORTS_INCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_PORTS_EXCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: KUBEVIRT_INTERFACES=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ENABLE_INBOUND_IPV6=<span class="literal">false</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: DNS_SERVERS=[10.10.10.6],[]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Writing following contents to rules file:  /tmp/iptables-rules-1626685415906987113.txt145448538</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: * nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp --dport 8080 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -p tcp ! --dport 53 -m owner --uid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -p tcp --dport 53 -d 10.10.10.6/32 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -d 10.10.10.6/32 -j REDIRECT --to-port 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-restore --noflush /tmp/iptables-rules-1626685415906987113.txt145448538</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Writing following contents to rules file:  /tmp/ip6tables-rules-1626685415940193066.txt564611057</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables-restore --noflush /tmp/ip6tables-rules-1626685415940193066.txt564611057</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_INBOUND - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_IN_REDIRECT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_OUTPUT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_REDIRECT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp -m udp --dport 53 -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp -m udp --dport 53 -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -d 10.10.10.6/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp -m tcp --dport 15008 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp -m tcp --dport 8080 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -s 127.0.0.6/32 -o lo -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -p tcp -m tcp ! --dport 53 -m owner --uid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp -m tcp ! --dport 53 -m owner ! --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --gid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp -m tcp ! --dport 53 -m owner ! --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 10.10.10.6/32 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在istio1-9中iptables链规则的意义&quot;&gt;&lt;a href=&quot;#在istio1-9中iptables链规则的意义&quot; class=&quot;headerlink&quot; title=&quot;在istio1.9中iptables链规则的意义&quot;&gt;&lt;/a&gt;在istio1.9中ipta</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>ebpf</title>
    <link href="http://example.com/2021/07/12/ebpf/"/>
    <id>http://example.com/2021/07/12/ebpf/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-08-24T16:25:21.602Z</updated>
    
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>wasm项目</title>
    <link href="http://example.com/2021/07/12/wasm/"/>
    <id>http://example.com/2021/07/12/wasm/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-12-20T02:36:54.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wasm项目"><a href="#wasm项目" class="headerlink" title="wasm项目"></a>wasm项目</h1><h2 id="envoy为什么使用WASM-filter"><a href="#envoy为什么使用WASM-filter" class="headerlink" title="envoy为什么使用WASM filter"></a>envoy为什么使用WASM filter</h2><h4 id="通过-WASM-filter的实现-我们可以得到："><a href="#通过-WASM-filter的实现-我们可以得到：" class="headerlink" title="通过 WASM filter的实现,我们可以得到："></a>通过 WASM filter的实现,我们可以得到：</h4><ul><li><p>敏捷性 - 过滤器可以动态加载到正在运行的 Envoy 进程中,而无需停止或重新编译。</p></li><li><p>可维护性 - 我们不必更改 Envoy 的代码库来扩展其功能。</p></li><li><p>多样性 - 流行的编程语言如 C/C++ 和 Rust 可以编译成 WASM,因此开发人员可以使用他们选择的编程语言来实现过滤器。</p></li><li><p>可靠性和隔离 - 过滤器部署到 VM（沙箱）中,因此与托管 Envoy 进程本身隔离（例如,当 WASM 过滤器崩溃时,它不会影响 Envoy 进程）。</p></li><li><p>安全性 - 由于过滤器通过定义良好的 API 与主机（Envoy 代理）通信,因此它们可以访问并且只能修改有限数量的连接或请求属性。</p></li></ul><h4 id="它还具有一些需要考虑的缺点："><a href="#它还具有一些需要考虑的缺点：" class="headerlink" title="它还具有一些需要考虑的缺点："></a>它还具有一些需要考虑的缺点：</h4><ul><li>性能比原生 C++ 快约 70%。</li><li>由于需要启动一个或多个 WASM 虚拟机,因此内存使用量更高。</li></ul><h3 id="envoy-代理-WASM-SDK"><a href="#envoy-代理-WASM-SDK" class="headerlink" title="envoy 代理 WASM SDK"></a>envoy 代理 WASM SDK</h3><p>Envoy Proxy 在基于堆栈的虚拟机中运行 WASM 过滤器,因此过滤器的内存与主机环境隔离。嵌入主机（Envoy Proxy）和 WASM 过滤器之间的所有交互都是通过 Envoy Proxy WASM SDK 提供的函数和回调实现的。WASM SDK 具有多种编程语言的实现,例如：</p><ul><li>C++</li><li>rust</li><li>AssemblyScript</li><li>Go</li></ul><p>在这篇文章中,我们将讨论如何使用Go Envoy Proxy WASM SDK为 Envoy 编写 WASM 过滤器。我们不打算详细讨论 Envoy Proxy WASM SDK 的 API,因为它超出了本文的范围。但是,我们将涉及掌握为 Envoy 编写 WASM 过滤器的基础知识所必需的一些内容。<br>我们的过滤器实现必须派生自以下两个类：<br>当加载 WASM 插件（包含过滤器的 WASM 二进制文件）时,会创建一个根上下文。根上下文与 VM 实例具有相同的生命周期,它执行我们的过滤器并用于：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> rootContext <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// You&#x27;d better embed the default root context</span></span><br><span class="line"><span class="comment">// so that you don&#x27;t need to reimplement all the methods by yourself.</span></span><br><span class="line">proxywasm.DefaultRootContext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> httpHeaders <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// we must embed the default context so that you need not to reimplement all the methods by yourself</span></span><br><span class="line">proxywasm.DefaultHttpContext</span><br><span class="line">contextID <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>初始化wasm项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  cmd git:(istio-1.9.4-dev) ✗ ./cmd init demo</span><br><span class="line"> buildVersion = unknown, buildGitRevision = unknown, buildStatus = unknown, buildTag  = unknown, buildHub = unknown</span><br><span class="line">Use the arrow keys to navigate: ↓ ↑ → ← </span><br><span class="line">? What language <span class="keyword">do</span> you wish to use <span class="keyword">for</span> the filter: </span><br><span class="line">  ▸ cpp</span><br><span class="line">    rust</span><br><span class="line">    assemblyscript</span><br><span class="line">    tinygo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>项目结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo</span><br><span class="line">|-- go.mod</span><br><span class="line">|-- main.go</span><br><span class="line">|-- runtime-config.json</span><br></pre></td></tr></table></figure><ol start="2"><li><p>我们在代码中加上我们所需的代码 例如:<br>在http的头中加上一个key=”hello”  value=”world”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Override DefaultHttpContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctx *httpHeaders)</span> <span class="title">OnHttpResponseHeaders</span><span class="params">(numHeaders <span class="keyword">int</span>, endOfStream <span class="keyword">bool</span>)</span> <span class="title">types</span>.<span class="title">Action</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := proxywasm.SetHttpResponseHeader(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">proxywasm.LogCriticalf(<span class="string">&quot;failed to set response header: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.ActionContinue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译demo项目</p></li></ol><p>使用go语言构建wasm的时候需要安装tinygo</p><p>macos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tinygo</span><br></pre></td></tr></table></figure><p>安装完成后,在当前项目的根目录执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinygo build -o filter.wasm -target=wasi -wasm-abi=generic .</span><br></pre></td></tr></table></figure><p>执行当前命令后会生成 <code>filter.wasm</code></p><ol start="4"><li>将wasm的包scp 到某个sidecar 容器中, 例如:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -n demo</span><br><span class="line"></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-5588477696-2sw7b       2/2     Running   0          8d</span><br><span class="line">productpage-v1-5bd6875444-j75dp   2/2     Running   0          8d</span><br><span class="line">ratings-v1-c9d5c65fc-l65mq        2/2     Running   0          8d</span><br><span class="line">reviews-v2-c789c7bdc-tsg7q        2/2     Running   0          8d</span><br><span class="line">reviews-v3-78944b866f-96nbw       2/2     Running   0          8d</span><br><span class="line"></span><br><span class="line">kubectl cp filter.wasm -n demo productpage-v1-5bd6875444-j75dp:/var/<span class="built_in">local</span>/filter.wasm</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们查看一下容器中是否包含<code>filter.wasm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  wasm git:(main) ✗ k <span class="built_in">exec</span> -it productpage-v1-5bd6875444-j75dp ls /var/<span class="built_in">local</span></span><br><span class="line">Defaulting container name to productpage.</span><br><span class="line">Use <span class="string">&#x27;kubectl describe pod/productpage-v1-5bd6875444-j75dp -n demo&#x27;</span> to see all of the containers <span class="keyword">in</span> this pod.</span><br><span class="line">filter.wasm</span><br></pre></td></tr></table></figure><p>可以看到/var/local 中包含<code>filter.wasm</code></p><ol start="5"><li>创建envoyfilter</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f-&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EnvoyFilter</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">productpage-v1-examplefilter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">configPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">applyTo:</span> <span class="string">HTTP_FILTER</span></span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">SIDECAR_INBOUND</span></span><br><span class="line">      <span class="attr">proxy:</span></span><br><span class="line">        <span class="attr">proxyVersion:</span> <span class="string">&#x27;^1\.8.*&#x27;</span></span><br><span class="line">      <span class="attr">listener:</span></span><br><span class="line">        <span class="attr">portNumber:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">filterChain:</span></span><br><span class="line">          <span class="attr">filter:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">envoy.http_connection_manager</span></span><br><span class="line">            <span class="attr">subFilter:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">envoy.router</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">operation:</span> <span class="string">INSERT_BEFORE</span></span><br><span class="line">      <span class="attr">value:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">productpage-demo</span></span><br><span class="line">            <span class="attr">rootId:</span> <span class="string">my_root_id</span></span><br><span class="line">            <span class="attr">vmConfig:</span></span><br><span class="line">              <span class="attr">code:</span></span><br><span class="line">                <span class="attr">local:</span></span><br><span class="line">                  <span class="attr">filename:</span> <span class="string">/var/local/filter.wasm</span></span><br><span class="line">              <span class="attr">runtime:</span> <span class="string">envoy.wasm.runtime.v8</span></span><br><span class="line">              <span class="attr">vmId:</span> <span class="string">filter</span></span><br><span class="line">              <span class="attr">allow_precompiled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">envoy.filters.http.wasm</span></span><br><span class="line">  <span class="attr">workloadSelector:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">productpage</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol><li>向productpage服务上的 HTTP 端口 8080 发送一些流量：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=xxx --restart=Never -it --rm sh</span><br><span class="line"></span><br><span class="line">~ <span class="comment"># curl -L -v http://productpage.demo:9080</span></span><br></pre></td></tr></table></figure><p>在响应中,我们希望看到过滤器的标头添加到响应标头中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">About</span> <span class="string">to</span> <span class="string">connect()</span> <span class="string">to</span> <span class="string">frontpage.backyards-demo</span> <span class="string">port</span> <span class="number">8080</span> <span class="string">(#0)</span></span><br><span class="line"><span class="string">*</span>   <span class="string">Trying</span> <span class="number">10.10</span><span class="number">.178</span><span class="number">.38</span><span class="string">...</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: conn:</span> <span class="number">0x10eadbd8</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: send:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: recv:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Curl_addHandleToPipeline: length:</span> <span class="number">1</span></span><br><span class="line"><span class="string">*</span> <span class="bullet">-</span> <span class="string">Conn</span> <span class="number">0</span> <span class="string">(0x10eadbd8)</span> <span class="attr">send_pipe:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">recv_pipe:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="string">Connected</span> <span class="string">to</span> <span class="string">frontpage.backyards-demo</span> <span class="string">(10.10.178.38)</span> <span class="string">port</span> <span class="number">8080</span> <span class="string">(#0)</span></span><br><span class="line"><span class="string">&gt;</span> <span class="string">GET</span> <span class="string">/</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">User-Agent:</span> <span class="string">curl/7.30.0</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">Host:</span> <span class="string">frontpage.backyards-demo:8080</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">Accept:</span> <span class="string">*/*</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;</span> <span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">content-type:</span> <span class="string">text/plain</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">date:</span> <span class="string">Thu,</span> <span class="number">16</span> <span class="string">Apr</span> <span class="number">2020 16:32:20 </span><span class="string">GMT</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">content-length:</span> <span class="number">9</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-upstream-service-time:</span> <span class="number">10</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">resp-header-demo:</span> <span class="string">added</span> <span class="string">by</span> <span class="string">our</span> <span class="string">filter</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-peer-metadata:</span> <span class="string">CjYKDElOU1RBTkNFX0lQUxImGiQxMC4yMC4xLjU3LGZlODA6OmQwNDM6NDdmZjpmZWYwOmVkMjkK2QEKBkxBQkVMUxLOASrLAQoSCgNhcHASCxoJZnJvbnRwYWdlCiEKEXBvZC10ZW1wbGF0ZS1oYXNoEgwaCjU3OGM2NTU0ZDQKJAoZc2VjdXJpdHkuaXN0aW8uaW8vdGxzTW9k</span></span><br><span class="line"><span class="string">ZRIHGgVpc3RpbwouCh9zZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1uYW1lEgsaCWZyb250cGFnZQorCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIEGgJ2MQoPCgd2ZXJzaW9uEgQaAnYxChoKB01FU0hfSUQSDxoNY2x1c3Rlci5sb2NhbAonCgROQU1FEh8aHWZyb250cGFnZS12MS01N</span></span><br><span class="line"><span class="string">zhjNjU1NGQ0LWxidnFrCh0KCU5BTUVTUEFDRRIQGg5iYWNreWFyZHMtZGVtbwpXCgVPV05FUhJOGkxrdWJlcm5ldGVzOi8vYXBpcy9hcHBzL3YxL25hbWVzcGFjZXMvYmFja3lhcmRzLWRlbW8vZGVwbG95bWVudHMvZnJvbnRwYWdlLXYxCi8KEVBMQVRGT1JNX01FVEFEQVRBEhoqGAoWCgpjbHVzdGVyX2lkEg</span></span><br><span class="line"><span class="string">gaBm1hc3RlcgocCg9TRVJWSUNFX0FDQ09VTlQSCRoHZGVmYXVsdAofCg1XT1JLTE9BRF9OQU1FEg4aDGZyb250cGFnZS12MQ==</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-peer-metadata-id:</span> <span class="string">sidecar~10.20.1.57~frontpage-v1-578c6554d4-lbvqk.backyards-demo~backyards-demo.svc.cluster.local</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-by-metadata:</span> <span class="string">CjYKDElOU1RBTkNFX0lQUxImGiQxMC4yMC4xLjU3LGZlODA6OmQwNDM6NDdmZjpmZWYwOmVkMjkK2QEKBkxBQkVMUxLOASrLAQoSCgNhcHASCxoJZnJvbnRwYWdlCiEKEXBvZC10ZW1wbGF0ZS1oYXNoEgwaCjU3OGM2NTU0ZDQKJAoZc2VjdXJpdHkuaXN0aW8uaW8vdGxzTW9kZRIHGgVp</span></span><br><span class="line"><span class="string">c3RpbwouCh9zZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1uYW1lEgsaCWZyb250cGFnZQorCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIEGgJ2MQoPCgd2ZXJzaW9uEgQaAnYxChoKB01FU0hfSUQSDxoNY2x1c3Rlci5sb2NhbAonCgROQU1FEh8aHWZyb250cGFnZS12MS01NzhjNjU1N</span></span><br><span class="line"><span class="string">GQ0LWxidnFrCh0KCU5BTUVTUEFDRRIQGg5iYWNreWFyZHMtZGVtbwpXCgVPV05FUhJOGkxrdWJlcm5ldGVzOi8vYXBpcy9hcHBzL3YxL25hbWVzcGFjZXMvYmFja3lhcmRzLWRlbW8vZGVwbG95bWVudHMvZnJvbnRwYWdlLXYxCi8KEVBMQVRGT1JNX01FVEFEQVRBEhoqGAoWCgpjbHVzdGVyX2lkEggaBm1hc3</span></span><br><span class="line"><span class="string">RlcgocCg9TRVJWSUNFX0FDQ09VTlQSCRoHZGVmYXVsdAofCg1XT1JLTE9BRF9OQU1FEg4aDGZyb250cGFnZS12MQ==</span></span><br><span class="line"><span class="string">*</span> <span class="string">Server</span> <span class="string">istio-envoy</span> <span class="string">is</span> <span class="string">not</span> <span class="string">blacklisted</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">server:</span> <span class="string">istio-envoy</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-decorator-operation:</span> <span class="string">frontpage.backyards-demo.svc.cluster.local:8080/*</span></span><br><span class="line"><span class="string">&lt;</span></span><br><span class="line"><span class="string">*</span> <span class="string">Connection</span> <span class="comment">#0 to host frontpage.backyards-demo left intact</span></span><br><span class="line"><span class="string">frontpage</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wasm项目&quot;&gt;&lt;a href=&quot;#wasm项目&quot; class=&quot;headerlink&quot; title=&quot;wasm项目&quot;&gt;&lt;/a&gt;wasm项目&lt;/h1&gt;&lt;h2 id=&quot;envoy为什么使用WASM-filter&quot;&gt;&lt;a href=&quot;#envoy为什么使用WASM-f</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>孤儿进程与僵尸进程</title>
    <link href="http://example.com/2021/07/12/proccess/"/>
    <id>http://example.com/2021/07/12/proccess/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-12-20T02:36:55.118Z</updated>
    
    <content type="html"><![CDATA[<p>孤儿进程：一个父进程退出,<br>而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程。<br>孤儿进程将被init进程(进程号为1)所收养,并由init进程对它们完成状态收集工作。</p><p>僵尸进程：一个进程使用fork创建子进程,如果子进程退出,<br>而父进程并没有调用wait或waitpid获取子进程的状态信息,那么子进程的进程描述符仍然保存在系统中。<br>这种进程称之为僵死进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;孤儿进程：一个父进程退出,&lt;br&gt;而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程。&lt;br&gt;孤儿进程将被init进程(进程号为1)所收养,并由init进程对它们完成状态收集工作。&lt;/p&gt;
&lt;p&gt;僵尸进程：一个进程使用fork创建子进程,如果子进程退出,&lt;br&gt;而</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>读写锁与互斥锁、自旋锁、悲观锁和乐观锁的区别</title>
    <link href="http://example.com/2021/06/28/lock/"/>
    <id>http://example.com/2021/06/28/lock/</id>
    <published>2021-06-28T06:43:55.000Z</published>
    <updated>2021-12-20T02:36:55.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多线程访问共享资源的时候,避免不了资源竞争而导致数据错乱的问题,所以我们通常为了解决这一问题,都会在访问共享资源之前加锁。</p><p>最常用的就是互斥锁,当然还有很多种不同的锁,比如自旋锁、读写锁、乐观锁等,不同种类的锁自然适用于不同的场景。</p><p>如果选择了错误的锁,那么在一些高并发的场景下,可能会降低系统的性能,这样用户体验就会非常差了。</p><p>所以,为了选择合适的锁,我们不仅需要清楚知道加锁的成本开销有多大,还需要分析业务场景中访问的共享资源的方式,再来还要考虑并发访问共享资源时的冲突概率。</p><p>对症下药,才能减少锁对高并发性能的影响。</p><h2 id="读写锁-RWMutex"><a href="#读写锁-RWMutex" class="headerlink" title="读写锁(RWMutex)"></a>读写锁(RWMutex)</h2><p>读写锁是针对于读写操作的互斥锁。它与普通的互斥锁最大的不同就是,<br>它可以分别针对读操作和写操作进行锁定和解锁操作。<br>读写锁遵循的访问控制规则与互斥锁有所不同。<br>在读写锁管辖的范围内,它允许任意个读操作的同时进行。<br>但是,在同一时刻,它只允许有一个写操作在进行。<br>并且,在某一个写操作被进行的过程中,读操作的进行也是不被允许的。<br>也就是说,读写锁控制下的多个写操作之间都是互斥的,并且写操作与读操作之间也都是互斥的。<br>但是,多个读操作之间却不存在互斥关系。</p><p>1、 读锁: 所有的 goroutine 都可以同时读, 但不允许写。<br>2、 写锁: 写锁 只允许一个goroutine 写, 其他的goroutine 不允许读也不允许写</p><p>用golang 来演示读写锁的作用,如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span>       //写锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span>     //写解锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span>      //读锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span>    //读解锁</span></span><br></pre></td></tr></table></figure><h2 id="互斥锁-Mutex"><a href="#互斥锁-Mutex" class="headerlink" title="互斥锁(Mutex)"></a>互斥锁(Mutex)</h2><p>使用互斥锁（Mutex,全称 mutual exclusion）是为了来保护一个资源不会因为并发操作而引起冲突导致<br>数据不准确。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(count *<span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">*count = *count + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">wg.Add(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;count 的值为：&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="互斥锁与自旋锁"><a href="#互斥锁与自旋锁" class="headerlink" title="互斥锁与自旋锁"></a>互斥锁与自旋锁</h2><h3 id="互斥锁与自旋锁的区别"><a href="#互斥锁与自旋锁的区别" class="headerlink" title="互斥锁与自旋锁的区别"></a>互斥锁与自旋锁的区别</h3><p>最底层的两种就是会「互斥锁和自旋锁」,有很多高级的锁都是基于它们实现的,你可以认为它们是各种锁的地基,所以我们必须清楚它俩之间的区别和应用。</p><p>加锁的目的就是保证共享资源在任意时间里,只有一个线程访问,这样就可以避免多线程导致共享数据错乱的问题。</p><p>当已经有一个线程加锁后,其他线程加锁则就会失败,互斥锁和自旋锁对于加锁失败后的处理方式是不一样的：</p><h3 id="互斥锁与自旋锁的开销成本"><a href="#互斥锁与自旋锁的开销成本" class="headerlink" title="互斥锁与自旋锁的开销成本:"></a>互斥锁与自旋锁的开销成本:</h3><p>互斥锁加锁失败后,线程会释放 CPU ,给其他线程；<br>自旋锁加锁失败后,线程会忙等待,直到它拿到锁；<br>互斥锁是一种「独占锁」,比如当线程 A 加锁成功后,此时互斥锁已经被线程 A 独占了,<br>只要线程 A 没有释放手中的锁,线程 B 加锁就会失败,于是就会释放 CPU 让给其他线程,<br>既然线程 B 释放掉了 CPU,自然线程 B 加锁的代码就会被阻塞。</p><p>对于互斥锁加锁失败而阻塞的现象,是由操作系统内核实现的。当加锁失败时,<br>内核会将线程置为「睡眠」状态,等到锁被释放后,内核会在合适的时机唤醒线程,<br>当这个线程成功获取到锁后,于是就可以继续执行。</p><h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><p>前面提到的互斥锁、自旋锁、读写锁,都是属于悲观锁。<br>悲观锁做事比较悲观,它认为多线程同时修改共享资源的概率比较高,于是很容易出现冲突,所以访问共享资源前,先要上锁。<br>那相反的,如果多线程同时修改共享资源的概率比较低,就可以采用乐观锁。<br>乐观锁做事比较乐观,它假定冲突的概率很低,它的工作方式是：先修改完共享资源,<br>再验证这段时间内有没有发生冲突,如果没有其他线程在修改资源,那么操作完成,如果发现有其他线程已经修改过这个资源,就放弃本次操作。<br>放弃后如何重试,这跟业务场景息息相关,虽然重试的成本很高,但是冲突的概率足够低的话,还是可以接受的。<br>可见,乐观锁的心态是,不管三七二十一,先改了资源再说。<br>另外,你会发现乐观锁全程并没有加锁,所以它也叫无锁编程。</p><ul><li>这里举一个场景例子：在线文档。</li></ul><p>我们都知道在线文档可以同时多人编辑的,如果使用了悲观锁,那么只要有一个用户正在编辑文档,此时其他用户就无法打开相同的文档了,这用户体验当然不好了。<br>那实现多人同时编辑,实际上是用了乐观锁,它允许多个用户打开同一个文档进行编辑,编辑完提交之后才验证修改的内容是否有冲突。<br>怎么样才算发生冲突？这里举个例子,比如用户 A 先在浏览器编辑文档,之后用户 B 在浏览器也打开了相同的文档进行编辑,但是用户 B 比用户 A 提交改动,这一过程用户 A 是不知道的,当 A 提交修改完的内容时,那么 A 和 B 之间并行修改的地方就会发生冲突。</p><p>服务端要怎么验证是否冲突了呢？通常方案如下：<br>由于发生冲突的概率比较低,所以先让用户编辑文档,但是浏览器在下载文档时会记录下服务端返回的文档版本号；<br>当用户提交修改时,发给服务端的请求会带上原始文档版本号,服务器收到后将它与当前版本号进行比较,如果版本号一致则修改成功,否则提交失败。<br>实际上,我们常见的 SVN 和 Git 也是用了乐观锁的思想,先让用户编辑代码,然后提交的时候,通过版本号来判断是否产生了冲突,发生了冲突的地方,需要我们自己修改后,再重新提交。<br>乐观锁虽然去除了加锁解锁的操作,但是一旦发生冲突,重试的成本非常高,所以只有在冲突概率非常低,且加锁成本非常高的场景时,才考虑使用乐观锁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;多线程访问共享资源的时候,避免不了资源竞争而导致数据错乱的问题,所以我们通常为了解决这一问题,都会在访问共享资源之前加锁。&lt;/p&gt;
&lt;p&gt;最</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 内存分配之逃逸分析</title>
    <link href="http://example.com/2021/05/30/go-gc/"/>
    <id>http://example.com/2021/05/30/go-gc/</id>
    <published>2021-05-30T13:58:12.000Z</published>
    <updated>2021-12-20T02:38:05.820Z</updated>
    
    <content type="html"><![CDATA[<p>在C/C++开发中,动态分配内存(new/malloc)需要我们手动释放资源。<br>这样做的好处是,需要申请多少内存空间可以很好的掌握怎么分配。<br>但是这有个缺点,如果忘记释放内存,则会导致内存泄漏。<br>在很多高级语言中(python/Go/java)都加上了垃圾回收机制。</p><p>golang 的内存分配之堆和栈</p><p>Go的垃圾回收,让堆和栈堆程序员保持透明。真正解放了程序员的双手,让他们可以专注于业务,“高效”地完成代码编写。把那些内存管理的复杂机制交给编译器。</p><p>栈 可以简单得理解成一次函数调用内部申请到的内存,它们会随着函数的返回把内存还给系统。下面来看看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子,内函数内部申请的临时变量,即使你是用make申请到的内存,如果发现在退出函数后没有用了,那么就把丢到栈上,毕竟栈上的内存分配比堆上快很多。</p><p>下面在看看一个堆的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> []<span class="title">int</span></span>&#123;</span><br><span class="line">    a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而上面这段代码,申请的代码和上面的一模一样,但是申请后作为返回值返回了,编译器会认为在退出函数之后还有其他地方在引用,当函数返回之后并不会将其内存归还。那么就申请到堆里。</p><p>如果变量都分配到堆上,堆不像栈可以自动清理。它会引起Go频繁地进行垃圾回收,而垃圾回收会占用比较大的系统开销。</p><p>堆和栈相比</p><p>堆适合不可预知的大小的内存分配。但是为此付出的代价是分配速度较慢,而且会形成内存碎片。</p><p>栈内存分配则会非常快,栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块。之后要通过垃圾回收才能释放。</p><p>逃逸分析</p><p>逃逸分析是一种确定指针动态范围的方法。简单来说就是分析在程序的哪些地方可以访问到该指针。</p><p>简单来说,编译器会根据变量是否被外部引用来决定是否逃逸：</p><p>1、如果函数外部没有引用,则优先放到栈中；<br>2、如果函数外部存在引用,则必定放到堆中；</p><p>对此你可以理解为,逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p><p>注意：go 在编译阶段确立逃逸,并不是在运行时。</p><p>如何得知变量是分配在栈（stack）上还是堆（heap）上？</p><p>准确地说,你并不需要知道。Golang 中的变量只要被引用就一直会存活,存储在堆上还是栈上由内部实现决定而和具体的语法没有关系。</p><p>知道变量的存储位置确实和效率编程有关系。如果可能,Golang 编译器会将函数的局部变量分配到函数栈帧（stack frame）上。 然而,如果编译器不能确保变量在函数 return之后不再被引用,编译器就会将变量分配到堆上。而且,如果一个局部变量非常大,那么它也应该被分配到堆上而不是栈上。</p><p>当前情况下,如果一个变量被取地址,那么它就有可能被分配到堆上。然而,还要对这些变量做逃逸分析,如果函数return之后,变量不再被引用,则将其分配到栈上。</p><p>Go可以返回局部变量指针,这其实是一个典型的变量逃逸案例,示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StudentRegister</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line">    s := <span class="built_in">new</span>(Student) <span class="comment">//局部变量s逃逸到堆</span></span><br><span class="line">    s.Name = name</span><br><span class="line">    s.Age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">StudentRegister(<span class="string">&quot;Jim&quot;</span>, <span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然在函数 StudentRegister() 内部 s 为局部变量,其值通过函数返回值返回,s 本身为一指针,其指向的内存地址不会是栈而是堆,这就是典型的逃逸案例。</p><p>终端运行命令查看逃逸分析日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -gcflags=-m</span><br></pre></td></tr></table></figure><p>指令集 -gcflags 用于将标识参数传递给 Go 编译器。</p><p>-m 会打印出逃逸分析的优化策略。</p><p>可见在StudentRegister()函数中,也即代码第9行显示”escapes to heap”,代表该行内存分配发生了逃逸现象。</p><p>栈空间不足逃逸</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, _ := <span class="keyword">range</span> s &#123;</span><br><span class="line">        s[index] = index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码主函数中分配了一个1000个长度的切片,是否逃逸取决于栈空间是否足够大。 直接查看编译提示,如下：</p><p>终端运行命令查看逃逸分析日志：</p><p>根据上面的信息,没有发生逃逸。分配了一个1000的长度还不足以发生逃逸现象。然后就x10倍吧,再看看情况。</p><p>逃逸分析的作用是什么呢？</p><p>1、逃逸分析的好处是为了减少gc的压力,不逃逸的对象分配在栈上,当函数返回时就回收了资源,不需要gc标记清除。</p><p>2、逃逸分析完后可以确定哪些变量可以分配在栈上,栈的分配比堆快,性能好(逃逸的局部变量会在堆上分配 ,而没有发生逃逸的则有编译器在栈上分配)。</p><p>3、同步消除,如果你定义的对象的方法上有同步锁,但在运行时,却只有一个线程在访问,此时逃逸分析后的机器码,会去掉同步锁运行。</p><p>总结</p><p>1、堆上动态分配内存比栈上静态分配内存,开销大很多。</p><p>2、变量分配在栈上需要能在编译期确定它的作用域,否则会分配到堆上。</p><p>3、Go编译器会在编译期对考察变量的作用域,并作一系列检查,如果它的作用域在运行期间对编译器一直是可知的,<br>那么就会分配到栈上。简单来说,编译器会根据变量是否被外部引用来决定是否逃逸。</p><p>4、对于Go程序员来说,编译器的这些逃逸分析规则不需要掌握,我们只需通过go build -gcflags ‘-m’命令来观察变量逃逸情况就行了。</p><p>5、不要盲目使用变量的指针作为函数参数,虽然它会减少复制操作。但其实当参数为变量自身的时候,复制是在栈上完成的操作,开销远比变量逃逸后动态地在堆上分配内存少的多。</p><p>6、逃逸分析在编译阶段完成的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C/C++开发中,动态分配内存(new/malloc)需要我们手动释放资源。&lt;br&gt;这样做的好处是,需要申请多少内存空间可以很好的掌握怎么分配。&lt;br&gt;但是这有个缺点,如果忘记释放内存,则会导致内存泄漏。&lt;br&gt;在很多高级语言中(python/Go/java)都加上了垃圾</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>集群内部负载均衡 lb</title>
    <link href="http://example.com/2021/04/07/k8s/lb/"/>
    <id>http://example.com/2021/04/07/k8s/lb/</id>
    <published>2021-04-07T14:50:01.000Z</published>
    <updated>2021-12-20T02:36:55.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集群内部负载均衡-lb"><a href="#集群内部负载均衡-lb" class="headerlink" title="集群内部负载均衡 lb"></a>集群内部负载均衡 lb</h1><p>k8s的LoadBalancer类型的Service依赖云服务商的Load Balancer, 如阿里云的slb。</p><p>当我们把k8s部署在私有云时,需要简单的LoadBalancer来验证工作,开源的metallb就是一个不错的选择。</p><p>MetalLB支持2种 一种是<code>Layer2</code> 、<code>BGP</code></p><h2 id="MetalLB-安装"><a href="#MetalLB-安装" class="headerlink" title="MetalLB 安装"></a>MetalLB 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml;</span><br><span class="line">kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<span class="string">&quot;<span class="subst">$(openssl rand -base64 128)</span>&quot;</span>;</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml;</span><br></pre></td></tr></table></figure><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>MetalLB需要以下功能才能发挥作用：</p><ul><li>一个 Kubernetes 运行Kubernetes 1.13.0或更高版本的集群,尚不具有网络负载平衡功能。</li><li>一个 集群网络配置 可以与MetalLB共存。</li><li>一些用于MetalLB的IPv4地址。</li><li>使用BGP工作模式时,您将需要一台或多台能够讲话的路由器 BGP协议。</li><li>节点之间必须允许端口7946（TCP＆UDP）上的流量,具体取决于 会员列表。</li></ul><p>GBP 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    peers:</span><br><span class="line">    - peer-address: 10.0.0.1</span><br><span class="line">      peer-asn: 64501</span><br><span class="line">      my-asn: 64500</span><br><span class="line">    address-pools:</span><br><span class="line">    - name: default</span><br><span class="line">      protocol: bgp</span><br><span class="line">      addresses:</span><br><span class="line">      - 192.168.10.0/24</span><br></pre></td></tr></table></figure><h3 id="创建configmap"><a href="#创建configmap" class="headerlink" title="创建configmap"></a>创建configmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f configmap.yaml</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集群内部负载均衡-lb&quot;&gt;&lt;a href=&quot;#集群内部负载均衡-lb&quot; class=&quot;headerlink&quot; title=&quot;集群内部负载均衡 lb&quot;&gt;&lt;/a&gt;集群内部负载均衡 lb&lt;/h1&gt;&lt;p&gt;k8s的LoadBalancer类型的Service依赖云服务商的L</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>如何在本地调试istio</title>
    <link href="http://example.com/2021/03/22/k8s/istio/debug-istio/"/>
    <id>http://example.com/2021/03/22/k8s/istio/debug-istio/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-12-20T02:36:55.190Z</updated>
    
    <content type="html"><![CDATA[<p>本文档主要是帮助我们如何在本地使用调试istio</p><p>因为我们使用的istio都是在1.8.4上面做的,所以我在下面的讲解的版本也是在istio release-1.8.4版本上面进行</p><p>istio 核心模块有两个</p><ul><li>pilot-discovery: 这个模块就是我们的istiod istio/pilot/pilot-discovery 目录下</li><li>pilot-agent: 这个模块 就是proxy istio/pilot/pilot-discovery 目录下</li></ul><p><img src="/2021/03/22/k8s/istio/debug-istio/img_2.png" alt="img.png"></p><p>如果我们使用kind 则需要 –config trustworthy-jwt.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">kubeadmConfigPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">    <span class="attr">etcd:</span></span><br><span class="line">      <span class="attr">local:</span></span><br><span class="line">        <span class="comment"># Run etcd in a tmpfs (in RAM) for performance improvements</span></span><br><span class="line">        <span class="attr">dataDir:</span> <span class="string">/tmp/kind-cluster-etcd</span></span><br><span class="line">    <span class="attr">apiServer:</span></span><br><span class="line">      <span class="attr">extraArgs:</span></span><br><span class="line">        <span class="attr">&quot;service-account-issuer&quot;:</span> <span class="string">&quot;kubernetes.default.svc&quot;</span></span><br><span class="line">        <span class="attr">&quot;service-account-signing-key-file&quot;:</span> <span class="string">&quot;/etc/kubernetes/pki/sa.key&quot;</span></span><br><span class="line"><span class="attr">containerdConfigPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|-</span></span><br><span class="line">    [<span class="string">plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;localhost:5000&quot;</span>]</span><br><span class="line">      <span class="string">endpoint</span> <span class="string">=</span> [<span class="string">&quot;http://kind-registry:5000&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="运行kind"><a href="#运行kind" class="headerlink" title="运行kind"></a>运行kind</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kind create cluster --image  docker.io/kindest/node:v1.17.5 --config trustworthy-jwt.yaml  --name kind-2</span><br></pre></td></tr></table></figure><h3 id="本地代理pilot-discovery"><a href="#本地代理pilot-discovery" class="headerlink" title="本地代理pilot-discovery"></a>本地代理<code>pilot-discovery</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装istio</span></span><br><span class="line">$ istioctl install</span><br></pre></td></tr></table></figure><p>等待istio 安装完成以后我们将 istiod的流量转到本地,主要目的是为了更改endpoint </p><p>使用外部 istiod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置外部 IP</span></span><br><span class="line">$ <span class="built_in">export</span> ip=192.168.110.206</span><br><span class="line">$ kubectl -n istio-system delete svc istiod</span><br><span class="line">$ kubectl -n istio-system delete endpoints istiod</span><br><span class="line"></span><br><span class="line">$ cat &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 443</span></span><br><span class="line"><span class="string">    targetPort: 15017</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Endpoints</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">subsets:</span></span><br><span class="line"><span class="string">- addresses:</span></span><br><span class="line"><span class="string">  - ip: $&#123;ip&#125;</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 15017</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>还原istio 的svc地址 使svc指向 集群内部 istiod.istio-system pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n istio-system delete svc istiod</span><br><span class="line">$ kubectl -n istio-system delete endpoints istiod</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  annotations:</span></span><br><span class="line"><span class="string">    kubectl.kubernetes.io/last-applied-configuration: |</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;:&quot;Service&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;istiod&quot;,&quot;install.operator.istio.io/owning-resource&quot;:&quot;unknown&quot;,&quot;install.operator.istio.io/owning-resource-namespace&quot;:&quot;istio-system&quot;,&quot;istio&quot;:&quot;pilot&quot;,&quot;istio.io/rev&quot;:&quot;default&quot;,&quot;operator.istio.io/component&quot;:&quot;Pilot&quot;,&quot;operator.istio.io/managed&quot;:&quot;Reconcile&quot;,&quot;operator.istio.io/version&quot;:&quot;1.8.4&quot;,&quot;release&quot;:&quot;istio&quot;&#125;,&quot;name&quot;:&quot;istiod&quot;,&quot;namespace&quot;:&quot;istio-system&quot;&#125;,&quot;spec&quot;:&#123;&quot;ports&quot;:[&#123;&quot;name&quot;:&quot;grpc-xds&quot;,&quot;port&quot;:15010,&quot;protocol&quot;:&quot;TCP&quot;&#125;,&#123;&quot;name&quot;:&quot;https-dns&quot;,&quot;port&quot;:15012,&quot;protocol&quot;:&quot;TCP&quot;&#125;,&#123;&quot;name&quot;:&quot;https-webhook&quot;,&quot;port&quot;:443,&quot;protocol&quot;:&quot;TCP&quot;,&quot;targetPort&quot;:15017&#125;,&#123;&quot;name&quot;:&quot;http-monitoring&quot;,&quot;port&quot;:15014,&quot;protocol&quot;:&quot;TCP&quot;&#125;],&quot;selector&quot;:&#123;&quot;app&quot;:&quot;istiod&quot;,&quot;istio&quot;:&quot;pilot&quot;&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">  creationTimestamp: &quot;2021-03-22T07:08:32Z&quot;</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: istiod</span></span><br><span class="line"><span class="string">    install.operator.istio.io/owning-resource: unknown</span></span><br><span class="line"><span class="string">    install.operator.istio.io/owning-resource-namespace: istio-system</span></span><br><span class="line"><span class="string">    istio: pilot</span></span><br><span class="line"><span class="string">    istio.io/rev: default</span></span><br><span class="line"><span class="string">    operator.istio.io/component: Pilot</span></span><br><span class="line"><span class="string">    operator.istio.io/managed: Reconcile</span></span><br><span class="line"><span class="string">    operator.istio.io/version: 1.8.4</span></span><br><span class="line"><span class="string">    release: istio</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">  resourceVersion: &quot;826&quot;</span></span><br><span class="line"><span class="string">  selfLink: /api/v1/namespaces/istio-system/services/istiod</span></span><br><span class="line"><span class="string">  uid: 44ee44a6-9003-4f8d-9196-49e47b6667c1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  clusterIP: 10.96.3.250</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15010</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15012</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 443</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15017</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15014</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    app: istiod</span></span><br><span class="line"><span class="string">    istio: pilot</span></span><br><span class="line"><span class="string">  sessionAffinity: None</span></span><br><span class="line"><span class="string">  type: ClusterIP</span></span><br><span class="line"><span class="string">status:</span></span><br><span class="line"><span class="string">  loadBalancer: &#123;&#125;</span></span><br><span class="line"><span class="string">EOF</span>  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文档主要是帮助我们如何在本地使用调试istio&lt;/p&gt;
&lt;p&gt;因为我们使用的istio都是在1.8.4上面做的,所以我在下面的讲解的版本也是在istio release-1.8.4版本上面进行&lt;/p&gt;
&lt;p&gt;istio 核心模块有两个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pilot</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>lxc</title>
    <link href="http://example.com/2021/03/16/linux/lxc/"/>
    <id>http://example.com/2021/03/16/linux/lxc/</id>
    <published>2021-03-16T14:29:22.000Z</published>
    <updated>2021-12-20T02:36:55.129Z</updated>
    
    <content type="html"><![CDATA[<p>运行虚拟机时,容器几乎接近裸机。托管虚拟实例时,它们几乎没有开销。<br>LXC于2008年首次引入,从其之前的Solaris Containers（或Solaris Zones）和FreeBSD jail中采用了其大部分功能。<br>LXC无需创建完整的虚拟机,而是可以通过自己的进程和网络空间来实现虚拟环境。<br>通过使用命名空间来强制执行进程隔离,并利用内核本身的控制组（cgroup）功能,该功能可以限制,说明和隔离一个或多个进程的CPU,内存,磁盘I / O和网络使用情况。<br>将此用户空间框架视为的一种非常高级的形式 chroot。</p><p>注意：LXC使用名称空间来实现进程隔离,同时使用内核自己的cgroup来解决并限制一个或多个进程中的CPU,内存,磁盘I / O和网络使用情况。</p><h3 id="但是容器到底是什么？"><a href="#但是容器到底是什么？" class="headerlink" title="但是容器到底是什么？"></a>但是容器到底是什么？</h3><p>简短的答案是,容器使软件应用程序与操作系统脱钩,从而为用户提供了一个干净而最小的Linux环境,同时在一个或多个隔离的“容器”中运行其他所有内容。容器的目的是启动一组有限的应用程序或服务（通常称为微服务）,并使它们在独立的沙盒环境中运行。</p><p>这种隔离可防止在给定容器中运行的进程监视或影响在另一个容器中运行的进程。同样,这些容器化服务不会影响或干扰主机。能够将分散在多个物理服务器上的许多服务整合为一个的想法是数据中心选择采用该技术的众多原因之一。</p><h3 id="容器功能包括："><a href="#容器功能包括：" class="headerlink" title="容器功能包括："></a>容器功能包括：</h3><ul><li>安全性：网络服务可以在容器中运行,从而限制了由于安全漏洞或违反而造成的损害。入侵者成功利用该容器中运行的一个应用程序上的安全漏洞,仅限于该容器中可能采取的一系列操作。</li><li>隔离：容器允许在同一台物理计算机上部署一个或多个应用程序,即使这些应用程序必须在不同的域下运行,每个域都需要对其各自资源的独占访问权。例如,在不同容器中运行的多个应用程序可以通过使用与每个容器关联的不同IP地址绑定到同一物理网络接口。</li><li>虚拟化和透明性：容器为系统提供了虚拟化的环境,可以隐藏或限制其下的物理设备或系统配置的可见性。容器背后的一般原则是,除了解决安全性或隔离性问题之外,避免更改运行应用程序的环境。</li></ul><p>Docker主要致力于：</p><ul><li>可移植性：Docker提供了基于映像的部署模型。这种类型的可移植性提供了一种跨多个环境共享应用程序或服务集（及其所有依赖项）的简便方法。</li><li>版本控制：单个Docker映像由一系列组合的层组成。每当更改图像时,都会创建一个新层。例如,每次用户指定命令（例如run或）时 ,都会创建一个新层 copy。Docker将这些层重用于新的容器构建。与Docker分层是它自己的版本控制方法。</li><li>回滚：同样,每个Docker映像都有层。如果您不想使用当前运行的图层,则可以回滚到以前的版本。这种敏捷性使软件开发人员可以更轻松地连续集成和部署他们的软件技术。</li><li>快速部署：置备新硬件通常可能需要几天的时间。而且,安装和配置它的工作量和开销非常重。使用Docker,您可以通过将启动和运行映像所需的时间减少到几秒钟来避免所有这些情况。用完容器后,就可以轻松销毁它。</li></ul><p>*** 从根本上说,Docker和LXC都非常相似。它们都是用户空间和轻量级虚拟化平台,它们实现cgroup和名称空间来管理资源隔离。但是,两者之间存在许多明显的差异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行虚拟机时,容器几乎接近裸机。托管虚拟实例时,它们几乎没有开销。&lt;br&gt;LXC于2008年首次引入,从其之前的Solaris Containers（或Solaris Zones）和FreeBSD jail中采用了其大部分功能。&lt;br&gt;LXC无需创建完整的虚拟机,而是可以通</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>route</title>
    <link href="http://example.com/2021/03/14/linux/route/"/>
    <id>http://example.com/2021/03/14/linux/route/</id>
    <published>2021-03-13T16:25:54.000Z</published>
    <updated>2021-08-24T16:25:21.617Z</updated>
    
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
</feed>
