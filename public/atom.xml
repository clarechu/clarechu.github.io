<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-12T16:24:23.472Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在go中查看代码的内存及cpu使用情况 (二)</title>
    <link href="http://example.com/2021/09/13/go-gc/go-heap2/"/>
    <id>http://example.com/2021/09/13/go-gc/go-heap2/</id>
    <published>2021-09-12T16:20:13.000Z</published>
    <updated>2021-09-12T16:24:23.472Z</updated>
    
    <content type="html"><![CDATA[<p>在上面的章节我们讲了如何在go的代码中发现内存和cpu的使用情况, 这个章节主要是讲一个具体的例子,通过这个例子我们怎么来找到我们代码中的问题 , 然后我们怎么去解决的。</p><p>首先我们来看一下现象, 以下图片是我查询prometheus返回的图片, 以下是promql 语句, 意思就是查询 6h小时内 simple 这个服务内存使用情况,<br>我们从图中很明显看出来这个服务的内存一直在增加。在内存增加的过程中我们可以看到有一些波谷的情况, 这是由于go的垃圾回收机制在起作用，但是 回收的真是杯水车薪。主要的趋势还是在增加的。在10-11 点的时候我中断请求,<br>内存有显著的下降但是也有很多没有回收, 从这个图我们可以明显得出结论, 当前这个服务存在内存泄漏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_memory_usage_bytes&#123;container&#x3D;&quot;simple&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/13/go-gc/go-heap2/img4.png" alt="img.png"></p><p>当我们定位出了内存泄漏, 接下来我们怎么来定位代码中哪个地方内存泄漏了呢？ 接下来我们需要使用pprof来定位具体的原因,在上一个章节我们已经讲过如果使用 pprof 这里我就不在多余的赘述这个问题。 接下来我们具体看现象,<br>在图中我们看到了一处异常的情况。当前服务使用了79399次gorouting。我不确定这个是不是引起内存泄漏的根本原因,但是出现这个问题 对于服务也是很严重的。我们首先看看为什么会产生这么多的gorouting吧。</p><p><img src="/2021/09/13/go-gc/go-heap2/img5.png" alt="img.png"></p><p>接下来我们来看看具体是哪个代码导致的。在下图中我们可以看到是由于pipeline.go 61行导致的。 我们来看看代码吧。</p><p><img src="/2021/09/13/go-gc/go-heap2/img6.png" alt="img.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilterService</span><span class="params">(itemChan &lt;-<span class="keyword">chan</span> ingress.Access, services []<span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">ingress</span>.<span class="title">Access</span></span> &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> ingress.Access)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(channel)</span><br><span class="line">data := &lt;-itemChan</span><br><span class="line"><span class="keyword">if</span> data == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, service := <span class="keyword">range</span> services &#123;</span><br><span class="line"><span class="keyword">if</span> data.ServiceName() == service &#123;</span><br><span class="line"><span class="comment">// 主要是由于这行死锁导致这么多gorouting的</span></span><br><span class="line">channel &lt;- data</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到这里我们已经知道是什么原因了？ 我们在这里先了解以下channel会产生死锁的因素。</p><h3 id="例一"><a href="#例一" class="headerlink" title="例一:"></a>例一:</h3><p>如果a为空时 那么b := &lt;-a这个地方会一直死锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        a &lt;- <span class="number">1</span></span><br><span class="line">        <span class="built_in">close</span>(a)</span><br><span class="line">    &#125;()</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleep !!!&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">    a = <span class="literal">nil</span></span><br><span class="line">    b := &lt;-a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b :%d \n&quot;</span>, b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;complete !!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例二"><a href="#例二" class="headerlink" title="例二:"></a>例二:</h3><p>当我们新建一个size 为0 的channel 时, 这个时候当前channel 的缓冲区为0, 如果没有消费者的时候也会造成死锁的情况。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc1</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">mu := sync.WaitGroup&#123;&#125;</span><br><span class="line">mu.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(a)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">a &lt;- <span class="number">1</span></span><br><span class="line">mu.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(<span class="number">1</span> * time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> cc := &lt;-a:</span><br><span class="line">fmt.Println(<span class="string">&quot;xx&quot;</span>, cc)</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">fmt.Println(<span class="string">&quot;ticker&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">mu.Done()</span><br><span class="line">&#125;()</span><br><span class="line">mu.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;complete !!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从上面俩个例子看应该是第二种 没有消费者导致这个死锁的产生。因为在放入这个channel 中上面的代码已经判断这个data是否为空。<br>所以我们往后看。data就是消费这个channel的, 我们可以看到这个地方只有一个select，所以这个地方 要么就走了这个data,要么就<br>走进了这个tick 定时器。这个定时器的时长是12s, 所以就是这个时长超过了12s 导致了走了定时器, 消费者没了。到了这个地方似乎是明确了<br>问题的所在。但是这个也是一个猜测，这个时候我们就使用了opentracing在代码中埋点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalculateQPS</span><span class="params">(data &lt;-<span class="keyword">chan</span> ingress.Access, timeTick &lt;-<span class="keyword">chan</span> time.Time,</span></span></span><br><span class="line"><span class="function"><span class="params">qpsRecord <span class="keyword">map</span>[<span class="keyword">string</span>]*metrics.Calculate)</span> &lt;-<span class="title">chan</span> *<span class="title">serviceInfo</span></span> &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> *serviceInfo)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(channel)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> item := &lt;-data:</span><br><span class="line"><span class="keyword">if</span> item == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record, exist := qpsRecord[item.ServiceName()]; exist &#123;</span><br><span class="line">record.Update(item.Upstream(), item.AccessTime())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">qpsRecord[item.ServiceName()] = metrics.NewCalculate(item.Upstream(), item.AccessTime())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-timeTick:</span><br><span class="line"><span class="keyword">for</span> service, calculate := <span class="keyword">range</span> qpsRecord &#123;</span><br><span class="line">channel &lt;- &amp;serviceInfo&#123;Name: service, AvgQps: calculate.AvgQps(), PodCount: calculate.GetPodCount()&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我看到这个消费能力很不错都控制在12us以内, 所以我猜想的这个想法是所务的。</p><p><img src="/2021/09/13/go-gc/go-heap2/img8.png" alt="img.png"></p><p>改了这个问题后服务的内存恢复了正常, 这个时候我们需要回顾一下, 为什么那么多的gorouting 会产生内存 很高的情况，cpu 基本没有什么变化。<br>那么下一讲我们来介绍死锁会导致内存高 还是cpu高还是都高呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上面的章节我们讲了如何在go的代码中发现内存和cpu的使用情况, 这个章节主要是讲一个具体的例子,通过这个例子我们怎么来找到我们代码中的问题 , 然后我们怎么去解决的。&lt;/p&gt;
&lt;p&gt;首先我们来看一下现象, 以下图片是我查询prometheus返回的图片, 以下是prom</summary>
      
    
    
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>在go中查看代码的内存及cpu使用情况 (一)</title>
    <link href="http://example.com/2021/09/10/go-gc/go-heap/"/>
    <id>http://example.com/2021/09/10/go-gc/go-heap/</id>
    <published>2021-09-10T15:23:13.000Z</published>
    <updated>2021-09-12T15:33:18.914Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的开发过程中, 开发者很容易忽略一个问题。我们代码使用的内存堆栈的大小, 我们是在什么地方使用了较大的内存, cpu<br>的消耗在什么地方。以下我就针对我之前写的一个服务对我代码中内存和cpu进行分析。</p><p>首先这种方式仅限于在go中使用,对其他的语言不适用。</p><p>在我们的代码main中引入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//pprof</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      http.ListenAndServe(<span class="string">&quot;0.0.0.0:6060&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动之后我们访问localhost:6060 我们就可以看到我们内存堆栈的信息。如下图</p><p><img src="/2021/09/10/go-gc/go-heap/img.png" alt="img.png"></p><p>allocs： 过去所有内存分配的样本<br>block： 导致同步原语阻塞的堆栈跟踪<br>cmdline： 当前程序的命令行调用<br>goroutine： 所有当前 goroutine 的堆栈跟踪<br>heap：活动对象的内存分配示例。您可以指定 gc GET 参数以在获取堆样本之前运行 GC。<br>mutex： 竞争互斥锁持有者的堆栈跟踪<br>profile：CPU 配置文件。您可以在 seconds GET 参数中指定持续时间。获取配置文件后，使用 go tool pprof 命令调查配置文件。<br>threadcreate： 导致创建新操作系统线程的堆栈跟踪<br>trace：当前程序的执行轨迹。您可以在 seconds GET 参数中指定持续时间。获取跟踪文件后，使用 go tool trace 命令调查跟踪。</p><h2 id="火力图"><a href="#火力图" class="headerlink" title="火力图"></a>火力图</h2><p>以下我们展示一下, 在go中展示火力图 看起来很炫酷。</p><p><img src="/2021/09/10/go-gc/go-heap/img1.png" alt="img1.png"></p><p>我们来看一下怎么做的首先我们先安装uber 开发的<code>go-torch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/uber/go-torch</span><br></pre></td></tr></table></figure><p>这个需要依赖一个flamegraph <a class="link" href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install flamegraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我们生成我们的火力图吧</span></span><br><span class="line">go-torch -u http://10.10.13.118:31795/debug/pprof</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行完以上命令会生成一个svg文件打开当前文件我们就可以看到火力图了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/09/10/go-gc/go-heap/img2.png" alt="img2.png"></p><p>我们可以从红色的框可以看到具体内存使用的地方在哪里。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simple-hpa/src/handler.(*nginxDataHandler).parseData.func1</span><br><span class="line">这个函数使用了<span class="number">43.42</span>%</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我们的开发过程中, 开发者很容易忽略一个问题。我们代码使用的内存堆栈的大小, 我们是在什么地方使用了较大的内存, cpu&lt;br&gt;的消耗在什么地方。以下我就针对我之前写的一个服务对我代码中内存和cpu进行分析。&lt;/p&gt;
&lt;p&gt;首先这种方式仅限于在go中使用,对其他的语言不适</summary>
      
    
    
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>istio无法访问外部tcp服务(一)</title>
    <link href="http://example.com/2021/08/24/k8s/istio/istio-network/"/>
    <id>http://example.com/2021/08/24/k8s/istio/istio-network/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-09-12T16:10:12.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天在生产环境出现了一个非常奇怪的问题, 集群内部环境无法访问集群外部的mysql, 好像redis也有类似的问题, 当时k8s版本1.11 istio 1.4,<br>istio和k8s 版本都比较低。后面 用istio1.6 貌似也有同样的问题。</p><h2 id="使用集群内部的mysql"><a href="#使用集群内部的mysql" class="headerlink" title="使用集群内部的mysql"></a>使用集群内部的mysql</h2><p>首先我们在集群内访问试一下, 我使用一个mysql的client 端和server 来模拟这种情况</p><p>mysql-client —-&gt; mysql-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  generation: 2</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  name: mysql-server</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  progressDeadlineSeconds: 600</span></span><br><span class="line"><span class="string">  replicas: 1</span></span><br><span class="line"><span class="string">  revisionHistoryLimit: 10</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: mysql-server</span></span><br><span class="line"><span class="string">  strategy:</span></span><br><span class="line"><span class="string">    rollingUpdate:</span></span><br><span class="line"><span class="string">      maxSurge: 25%</span></span><br><span class="line"><span class="string">      maxUnavailable: 25%</span></span><br><span class="line"><span class="string">    type: RollingUpdate</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      creationTimestamp: null</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        app: mysql-server</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">        - env:</span></span><br><span class="line"><span class="string">            - name: MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="string">              value: password</span></span><br><span class="line"><span class="string">          image: mysql</span></span><br><span class="line"><span class="string">          imagePullPolicy: Always</span></span><br><span class="line"><span class="string">          name: mysql</span></span><br><span class="line"><span class="string">          ports:</span></span><br><span class="line"><span class="string">            - containerPort: 3306</span></span><br><span class="line"><span class="string">              protocol: TCP</span></span><br><span class="line"><span class="string">          resources: &#123;&#125;</span></span><br><span class="line"><span class="string">          terminationMessagePath: /dev/termination-log</span></span><br><span class="line"><span class="string">          terminationMessagePolicy: File</span></span><br><span class="line"><span class="string">      dnsPolicy: ClusterFirst</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">      schedulerName: default-scheduler</span></span><br><span class="line"><span class="string">      securityContext: &#123;&#125;</span></span><br><span class="line"><span class="string">      terminationGracePeriodSeconds: 30</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  name: mysql-server</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  clusterIP: 10.68.228.107</span></span><br><span class="line"><span class="string">  externalTrafficPolicy: Cluster</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">    - name: 3306-3306</span></span><br><span class="line"><span class="string">      nodePort: 32011</span></span><br><span class="line"><span class="string">      port: 3306</span></span><br><span class="line"><span class="string">      protocol: TCP</span></span><br><span class="line"><span class="string">      targetPort: 3306</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    app: mysql-server</span></span><br><span class="line"><span class="string">  sessionAffinity: None</span></span><br><span class="line"><span class="string">  type: NodePort</span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"></span><br><span class="line">$ kubectl apply -f - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  generation: 2</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: mysql-client</span></span><br><span class="line"><span class="string">  name: mysql-client</span></span><br><span class="line"><span class="string">  namespace: demo1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  progressDeadlineSeconds: 600</span></span><br><span class="line"><span class="string">  replicas: 1</span></span><br><span class="line"><span class="string">  revisionHistoryLimit: 10</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: mysql-client</span></span><br><span class="line"><span class="string">  strategy:</span></span><br><span class="line"><span class="string">    rollingUpdate:</span></span><br><span class="line"><span class="string">      maxSurge: 25%</span></span><br><span class="line"><span class="string">      maxUnavailable: 25%</span></span><br><span class="line"><span class="string">    type: RollingUpdate</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      creationTimestamp: null</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        app: mysql-client</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">        - image: clarechu/mysql-client:v1</span></span><br><span class="line"><span class="string">          imagePullPolicy: Always</span></span><br><span class="line"><span class="string">          name: mysql</span></span><br><span class="line"><span class="string">          resources: &#123;&#125;</span></span><br><span class="line"><span class="string">          terminationMessagePath: /dev/termination-log</span></span><br><span class="line"><span class="string">          terminationMessagePolicy: File</span></span><br><span class="line"><span class="string">      dnsPolicy: ClusterFirst</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">      schedulerName: default-scheduler</span></span><br><span class="line"><span class="string">      securityContext: &#123;&#125;</span></span><br><span class="line"><span class="string">      terminationGracePeriodSeconds: 30</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看pod状态并注入sidecar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl get po</span><br><span class="line"> </span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-client-b7db8cc46-99cx5    2/2     Running   0          81s</span><br><span class="line">mysql-server-6c845f449b-525q6   2/2     Running   0          81s</span><br></pre></td></tr></table></figure><p>当我们注入sidecar 之后我们测试一下 client端能否访问的server mysql, 可以看到是可以正常访问mysql-server 的，我们现在看看其中到底发生了什么？ 在同一个ns下是可以正常的访问mysql-server的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet mysql-server 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to mysql-server</span><br><span class="line">J</span><br><span class="line">8.0.26*F?eZTM\�~h<span class="comment">#DD#2)caching_sha2_password</span></span><br></pre></td></tr></table></figure><p>我们首先查看mysql-client 这个pod 出口的listener(监听器), 从下面的返回的监听器我们可以看出3306 端口只有一个<code>mysql-server.demo1.svc.cluster.local</code>的监听器, 然后我们看看这个监听器的cluster是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl  pc listener mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ADDRESS       PORT MATCH DESTINATION</span><br><span class="line">10.68.228.107 3306 ALL   Cluster: outbound|3306||mysql-server.demo1.svc.cluster.local</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为监听器的打印太多了 我就截了一小段, 可以看到3306出口cluster 为<code>outbound|3306||mysql-server.demo1.svc.cluster.local</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.filters.network.tcp_proxy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;statPrefix&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cluster&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accessLog&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.access_loggers.file&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/dev/stdout&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;logFormat&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;textFormat&quot;</span>: <span class="string">&quot;[%START_TIME%] \&quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&quot; %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% \&quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&quot;%REQ(X-FORWARDED-FOR)%\&quot; \&quot;%REQ(USER-AGENT)%\&quot; \&quot;%REQ(X-REQUEST-ID)%\&quot; \&quot;%REQ(:AUTHORITY)%\&quot; \&quot;%UPSTREAM_HOST%\&quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们查询当前pod的cluster</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">$ stioctl pc cluster mysql-client-b7db8cc46-99cx5 --fqdn <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span> -o json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;transportSocketMatches&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tlsMode-istio&quot;</span>,</span><br><span class="line">                <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;tlsMode&quot;</span>: <span class="string">&quot;istio&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;transportSocket&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.transport_sockets.tls&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;commonTlsContext&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;tlsCertificateSdsSecretConfigs&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;sdsConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;apiConfigSource&quot;</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;apiType&quot;</span>: <span class="string">&quot;GRPC&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;transportApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;grpcServices&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="string">&quot;envoyGrpc&quot;</span>: &#123;</span><br><span class="line">                                                        <span class="string">&quot;clusterName&quot;</span>: <span class="string">&quot;sds-grpc&quot;</span></span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ],</span><br><span class="line">                                            <span class="string">&quot;setNodeOnFirstMessageOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="string">&quot;initialFetchTimeout&quot;</span>: <span class="string">&quot;0s&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            <span class="string">&quot;combinedValidationContext&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;defaultValidationContext&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;matchSubjectAltNames&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="string">&quot;exact&quot;</span>: <span class="string">&quot;spiffe://cluster.local/ns/demo1/sa/default&quot;</span></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;validationContextSdsSecretConfig&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ROOTCA&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;sdsConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="string">&quot;apiConfigSource&quot;</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;apiType&quot;</span>: <span class="string">&quot;GRPC&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;transportApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;grpcServices&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="string">&quot;envoyGrpc&quot;</span>: &#123;</span><br><span class="line">                                                        <span class="string">&quot;clusterName&quot;</span>: <span class="string">&quot;sds-grpc&quot;</span></span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ],</span><br><span class="line">                                            <span class="string">&quot;setNodeOnFirstMessageOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="string">&quot;initialFetchTimeout&quot;</span>: <span class="string">&quot;0s&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="string">&quot;alpnProtocols&quot;</span>: [</span><br><span class="line">                                <span class="string">&quot;istio-peer-exchange&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;istio&quot;</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;sni&quot;</span>: <span class="string">&quot;outbound_.3306_._.mysql-server.demo1.svc.cluster.local&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tlsMode-disabled&quot;</span>,</span><br><span class="line">                <span class="string">&quot;match&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;transportSocket&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.transport_sockets.raw_buffer&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EDS&quot;</span>,</span><br><span class="line">        <span class="string">&quot;edsClusterConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;edsConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ads&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;resourceApiVersion&quot;</span>: <span class="string">&quot;V3&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;serviceName&quot;</span>: <span class="string">&quot;outbound|3306||mysql-server.demo1.svc.cluster.local&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;connectTimeout&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;circuitBreakers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;thresholds&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;maxConnections&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxPendingRequests&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxRequests&quot;</span>: 4294967295,</span><br><span class="line">                    <span class="string">&quot;maxRetries&quot;</span>: 4294967295</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;filterMetadata&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;istio&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;default_original_port&quot;</span>: 3306,</span><br><span class="line">                    <span class="string">&quot;services&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;mysql-server.demo1.svc.cluster.local&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql-server&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;demo1&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;filters&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;istio.metadata_exchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/udpa.type.v1.TypedStruct&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;typeUrl&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;istio-peer-exchange&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们从cluster的配置我们知道</p><p>使用EDS来找到destination 的pod, Envoy 将查找名为的服务的列表 <code>outbound|3306||mysql-server.demo1.svc.cluster.local</code></p><p>下面我们看看envoy 中endpoint <code>outbound|3306||mysql-server.demo1.svc.cluster.local</code> 列表,  从而找到mysql-server 的pod ip<br>–&gt; <code>172.20.0.30</code> 看起来没有任何问题。所以我们从这个地方可以得出一个结论。</p><p>我当时认为流量是这么路由的 但是通过我们对ep的查看流量是没有经过svc地址的 直接访问当前服务的<code>endpoint</code>地址<br><img src="/2021/08/24/k8s/istio/istio-network/img_2.png" alt="img2.png"></p><p>此时是这个样子的, 当服务注入sidecar之后是不经过k8s 的svc的直接访问出口的pod ip。</p><p><img src="/2021/08/24/k8s/istio/istio-network/img_1.png" alt="img1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  istioctl pc ep mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ENDPOINT             STATUS      OUTLIER CHECK     CLUSTER</span><br><span class="line">172.20.0.30:3306     HEALTHY     OK                outbound|3306||mysql-server.demo1.svc.cluster.local</span><br><span class="line"></span><br><span class="line">➜  ~ k get po -o wide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">mysql-client-b7db8cc46-99cx5    2/2     Running   0          33m   172.20.0.31   10.10.13.118   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">mysql-server-6c845f449b-525q6   2/2     Running   0          33m   172.20.0.30   10.10.13.118   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="使用集群外部mysql"><a href="#使用集群外部mysql" class="headerlink" title="使用集群外部mysql"></a>使用集群外部mysql</h2><p>集群里面的流量是正常的,现在我们在集群外面部署一个mysql 从集群内部pod(mysql-client-b7db8cc46-99cx5)访问集群外部的mysql, 此时我们看看能不能正常访问当前的mysql-server, 此时也可以访问的 这个时候我们在来看看listener</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet 10.10.13.110 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to 10.10.13.110</span><br><span class="line">J</span><br><span class="line">8.0.26\r(Juh�5kguvqI2<span class="string">&quot;&#125;!caching_sha2_password</span></span><br></pre></td></tr></table></figure><p>我们现在在任意的命名空间创建一个serviceentry, 这个时候我们在来看发生来什么变化，从下面的例子我们可以看出我们不能正常访问集群外部的流量了, 此时我们看看这个流量到哪里去了呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 telnet 10.10.13.110 3306</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">Connected to 10.10.13.110</span><br><span class="line">Connection closed by foreign host</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure><p>我们获取client 的listener, 我们发现多了一个<code>0.0.0.0</code> 的监听器, 这个是由于我在别的ns下创建了一个se导致的,<br>默认在所有监听器都匹配不上的时候就会默认去访问这个<code>0.0.0.0</code>的listener。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl pc listener mysql-client-b7db8cc46-99cx5 --port 3306</span><br><span class="line">ADDRESS       PORT MATCH DESTINATION</span><br><span class="line">0.0.0.0       3306 ALL   Cluster: outbound|3306||mysql.demo</span><br><span class="line">10.68.228.107 3306 ALL   Cluster: outbound|3306||mysql-server.demo1.svc.cluster.local</span><br></pre></td></tr></table></figure><p>接下来我们来看看cluster是什么, 默认访问的是<code>outbound|3306||mysql.demo</code>, 这个地址指向到一个空的svc上面, 所以我们访问不了外部的svc地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ istioctl pc listener mysql-client-b7db8cc46-99cx5 --port 3306 -o json</span><br><span class="line">        </span><br><span class="line">&#123;</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.filters.network.tcp_proxy&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;statPrefix&quot;</span>: <span class="string">&quot;outbound|3306||mysql.demo&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;cluster&quot;</span>: <span class="string">&quot;outbound|3306||mysql.demo&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;accessLog&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;envoy.access_loggers.file&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;typedConfig&quot;</span>: &#123;</span><br><span class="line">                                        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&quot;</span>,</span><br><span class="line">                                        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/dev/stdout&quot;</span>,</span><br><span class="line">                                        <span class="attr">&quot;logFormat&quot;</span>: &#123;</span><br><span class="line">                                            <span class="attr">&quot;textFormat&quot;</span>: <span class="string">&quot;[%START_TIME%] \&quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&quot; %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% \&quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&quot;%REQ(X-FORWARDED-FOR)%\&quot; \&quot;%REQ(USER-AGENT)%\&quot; \&quot;%REQ(X-REQUEST-ID)%\&quot; \&quot;%REQ(:AUTHORITY)%\&quot; \&quot;%UPSTREAM_HOST%\&quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&quot;</span></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br></pre></td></tr></table></figure><p>在别的命名空间下创建serviceentry 会影响当前namespace 下服务。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>使用sidecar crd资源</li></ol><p>在我们创建serviceentry 的namespace 中写入一个sidecar的资源，该例子是在demo1的<br>命名空间中声明了一个全局默认配置，该配置在所有命名空间中配置sidecar以仅允许出口流量到同一命名空间中的其他工作负载以及命名空间中的服务 istio-system</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sidecar</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;./*&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;istio-system/*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们创建了sidecar 资源后我们在观察mysql-client 这个pod的listener, 此时少了一个0.0.0.0 的监听器，我们在来求证一下mysql-client 是否能正常访问外部mysql服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">istioctl</span> <span class="string">pc</span>  <span class="string">listener</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">--port</span> <span class="number">3306</span></span><br><span class="line"><span class="string">ADDRESS</span>       <span class="string">PORT</span> <span class="string">MATCH</span> <span class="string">DESTINATION</span></span><br><span class="line"><span class="attr">10.68.228.107 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-server.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">10.68.66.97   3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-client.demo1.svc.cluster.local</span></span><br><span class="line"></span><br><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">kubectl</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">telnet</span> <span class="number">10.10</span><span class="number">.13</span><span class="number">.110</span> <span class="number">3306</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">exec</span> [<span class="string">POD</span>] [<span class="string">COMMAND</span>] <span class="string">is</span> <span class="string">DEPRECATED</span> <span class="string">and</span> <span class="string">will</span> <span class="string">be</span> <span class="string">removed</span> <span class="string">in</span> <span class="string">a</span> <span class="string">future</span> <span class="string">version.</span> <span class="string">Use</span> <span class="string">kubectl</span> <span class="string">exec</span> [<span class="string">POD</span>] <span class="string">--</span> [<span class="string">COMMAND</span>] <span class="string">instead.</span></span><br><span class="line"><span class="string">Defaulted</span> <span class="string">container</span> <span class="string">&quot;mysql&quot;</span> <span class="attr">out of:</span> <span class="string">mysql,</span> <span class="string">istio-proxy,</span> <span class="string">istio-init</span> <span class="string">(init)</span></span><br><span class="line"><span class="string">Connected</span> <span class="string">to</span> <span class="number">10.10</span><span class="number">.13</span><span class="number">.110</span></span><br><span class="line"><span class="string">J</span></span><br><span class="line"><span class="string">B5&gt;�I=6s=E6,&amp;M&#125;Qcaching_sha2_password</span></span><br><span class="line"></span><br><span class="line"><span class="type">!#08S01Got</span> <span class="string">packets</span> <span class="string">out</span> <span class="string">of</span> <span class="string">orderConnection</span> <span class="string">closed</span> <span class="string">by</span> <span class="string">foreign</span> <span class="string">host</span></span><br><span class="line"><span class="string">command</span> <span class="string">terminated</span> <span class="string">with</span> <span class="string">exit</span> <span class="string">code</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>更改其他的端口</li></ol><p>这种方式当创建了一个端口的se之后我们更改mysql的port 那么就不会匹配到0.0.0.0 3306 的端口这样就不会有这个问题。</p><ol start="3"><li>开启智能dns</li></ol><p>在安装istio的时候开启istio 智能dns,不过这个功能是istio1.8才有的功能，如果版本偏低建议还是升级一下.</p><p>在安装istio的过程中我们需要在iop资源中添加一下以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">meshConfig:</span></span><br><span class="line">  <span class="attr">accessLogFile:</span> <span class="string">/dev/stdout</span></span><br><span class="line">  <span class="attr">defaultConfig:</span></span><br><span class="line">    <span class="attr">proxyMetadata:</span></span><br><span class="line">      <span class="attr">ISTIO_META_DNS_CAPTURE:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>在创建se的时候指定address 使 mysql.demo122 这个host指向这个ip</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">addresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">240.0</span><span class="number">.221</span><span class="number">.130</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql.demo122</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">MESH_INTERNAL</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">resolution:</span> <span class="string">STATIC</span></span><br></pre></td></tr></table></figure><p>当我们创建了这个serviceentry 之后我们在mysql-client中在访问这个host的时候指向这个<code>240.0.221.130</code>的虚拟ip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl <span class="built_in">exec</span> -it mysql-client-b7db8cc46-99cx5 ping mysql.demo122</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">Defaulted container <span class="string">&quot;mysql&quot;</span> out of: mysql, istio-proxy, istio-init (init)</span><br><span class="line">PING mysql.demo122 (240.0.221.130) 56(84) bytes of data.</span><br></pre></td></tr></table></figure><p>在来看mysql-client-b7db8cc46-99cx5的监听器少了0.0.0.0 的监听器 多了一条<code>240.0.221.130 3306 ALL   Cluster: outbound|3306||mysql.demo122</code>的监听器，我们在来访问外部的mysql的时候就不会冲突匹配到0.0.0.0的监听器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">istioctl</span> <span class="string">pc</span>  <span class="string">listener</span> <span class="string">mysql-client-b7db8cc46-99cx5</span> <span class="string">--port</span> <span class="number">3306</span></span><br><span class="line"><span class="string">ADDRESS</span>       <span class="string">PORT</span> <span class="string">MATCH</span> <span class="string">DESTINATION</span></span><br><span class="line"><span class="attr">10.68.228.107 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-server.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">10.68.66.97   3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql-client.demo1.svc.cluster.local</span></span><br><span class="line"><span class="attr">240.0.221.130 3306 ALL   Cluster:</span> <span class="string">outbound|3306||mysql.demo122</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果存在集群内部访问集群外部的应用的时候, 我们应该做到以下几点</p><ol><li>在每个namespace 空间内部创建默认的sidecar, 这样即可降低envoy的内存, 也可以避免其他命名空间的干扰</li><li>访问外部的服务的时候创建serivceentry</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天在生产环境出现了一个非常奇怪的问题, 集群内部环境无法访问集群外部的mysql, 好像redis也有类似的问题, 当时k8s版本1.1</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>在istio1.9中iptables链规则的意义</title>
    <link href="http://example.com/2021/07/19/istio/istio-iptables/"/>
    <id>http://example.com/2021/07/19/istio/istio-iptables/</id>
    <published>2021-07-19T15:23:13.000Z</published>
    <updated>2021-08-24T16:25:21.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在istio1-9中iptables链规则的意义"><a href="#在istio1-9中iptables链规则的意义" class="headerlink" title="在istio1.9中iptables链规则的意义"></a>在istio1.9中iptables链规则的意义</h2><p>我们在k8s集群中安装1.9.4 版本的 istio 。</p><p>基于 istio1.9.4 版本，我们主要介绍istio在虚拟机中对iptables设置规则是什么样的？</p><p>在虚拟机中安装istio中, istio进程交给system进程保管，<br>进程中主要是运行了一个脚本，<br>我们可以看到istio dep 包的脚本如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/<span class="built_in">local</span>/bin/istio-start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright Istio Authors. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Script to configure and start the Istio sidecar.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Match pilot/docker/Dockerfile.proxyv2</span></span><br><span class="line"><span class="comment"># istio 的版本</span></span><br><span class="line"><span class="built_in">export</span> ISTIO_META_ISTIO_VERSION=<span class="string">&quot;1.9.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -a</span><br><span class="line"><span class="comment"># Load optional config variables</span></span><br><span class="line"><span class="comment"># 读取配置文件</span></span><br><span class="line">ISTIO_SIDECAR_CONFIG=<span class="variable">$&#123;ISTIO_SIDECAR_CONFIG:-/var/lib/istio/envoy/sidecar.env&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ -r <span class="variable">$&#123;ISTIO_SIDECAR_CONFIG&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line">  . <span class="string">&quot;<span class="variable">$ISTIO_SIDECAR_CONFIG</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load config variables ISTIO_SYSTEM_NAMESPACE, CONTROL_PLANE_AUTH_POLICY</span></span><br><span class="line">ISTIO_CLUSTER_CONFIG=<span class="variable">$&#123;ISTIO_CLUSTER_CONFIG:-/var/lib/istio/envoy/cluster.env&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ -r <span class="variable">$&#123;ISTIO_CLUSTER_CONFIG&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line">  . <span class="string">&quot;<span class="variable">$ISTIO_CLUSTER_CONFIG</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">set</span> +a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set defaults</span></span><br><span class="line">ISTIO_BIN_BASE=<span class="variable">$&#123;ISTIO_BIN_BASE:-/usr/local/bin&#125;</span></span><br><span class="line">ISTIO_LOG_DIR=<span class="variable">$&#123;ISTIO_LOG_DIR:-/var/log/istio&#125;</span></span><br><span class="line">NS=<span class="variable">$&#123;ISTIO_NAMESPACE:-default&#125;</span></span><br><span class="line">SVC=<span class="variable">$&#123;ISTIO_SERVICE:-rawvm&#125;</span></span><br><span class="line">ISTIO_SYSTEM_NAMESPACE=<span class="variable">$&#123;ISTIO_SYSTEM_NAMESPACE:-istio-system&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default matches the default istio.yaml - use sidecar.env to override this if you</span></span><br><span class="line"><span class="comment"># enable auth. This requires node-agent to be running.</span></span><br><span class="line"><span class="comment"># istiod 控制面的网关地址</span></span><br><span class="line">ISTIO_PILOT_PORT=<span class="variable">$&#123;ISTIO_PILOT_PORT:-15012&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, override the default</span></span><br><span class="line">CONTROL_PLANE_AUTH_POLICY=<span class="variable">$&#123;ISTIO_CP_AUTH:-&quot;MUTUAL_TLS&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;ISTIO_SVC_IP:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  ISTIO_SVC_IP=$(hostname --all-ip-addresses | cut -d <span class="string">&#x27; &#x27;</span> -f 1)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;POD_NAME:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  POD_NAME=$(hostname -s)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Init option will only initialize iptables. set ISTIO_CUSTOM_IP_TABLES to true if you would like to ignore this step</span></span><br><span class="line"><span class="comment"># 初始化iptables 目的讲虚拟机上面的流量打到envoy中</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;ISTIO_CUSTOM_IP_TABLES&#125;</span>&quot;</span> != <span class="string">&quot;true&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 如果是初始化容器 </span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;1-&#125;</span> == <span class="string">&quot;init&quot;</span> || <span class="variable">$&#123;1-&#125;</span> == <span class="string">&quot;-p&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># clean the previous Istio iptables chains. This part is different from the init image mode,</span></span><br><span class="line">      <span class="comment"># where the init container runs in a fresh environment and there cannot be previous Istio chains</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 在istio启动的时候应该清理掉所有的iptables的链</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-clean-iptables</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Update iptables, based on current config. This is for backward compatibility with the init image mode.</span></span><br><span class="line">      <span class="comment"># The sidecar image can replace the k8s init image, to avoid downloading 2 different images.</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 根据规则设置iptables的链</span></span><br><span class="line">      </span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-iptables <span class="string">&quot;<span class="variable">$&#123;@&#125;</span>&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 如果没有在运行的时候</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;1-&#125;</span> != <span class="string">&quot;run&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># clean the previous Istio iptables chains. This part is different from the init image mode,</span></span><br><span class="line">      <span class="comment"># where the init container runs in a fresh environment and there cannot be previous Istio chains</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-clean-iptables</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Update iptables, based on config file</span></span><br><span class="line">      <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> istio-iptables</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">EXEC_USER=<span class="variable">$&#123;EXEC_USER:-istio-proxy&#125;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;ISTIO_INBOUND_INTERCEPTION_MODE&#125;</span>&quot;</span> = <span class="string">&quot;TPROXY&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># In order to allow redirect inbound traffic using TPROXY, run envoy with the CAP_NET_ADMIN capability.</span></span><br><span class="line">  <span class="comment"># This allows configuring listeners with the &quot;transparent&quot; socket option set to true.</span></span><br><span class="line">  EXEC_USER=root</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;PILOT_ADDRESS:-&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  PILOT_ADDRESS=istiod.<span class="variable">$&#123;ISTIO_SYSTEM_NAMESPACE&#125;</span>.svc:<span class="variable">$&#123;ISTIO_PILOT_PORT&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">CA_ADDR=<span class="variable">$&#123;CA_ADDR:-<span class="variable">$&#123;PILOT_ADDRESS&#125;</span>&#125;</span></span><br><span class="line">PROV_CERT=<span class="variable">$&#123;PROV_CERT-/etc/certs&#125;</span></span><br><span class="line">OUTPUT_CERTS=<span class="variable">$&#123;OUTPUT_CERTS-/etc/certs&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PROV_CERT</span><br><span class="line"><span class="built_in">export</span> OUTPUT_CERTS</span><br><span class="line"><span class="built_in">export</span> CA_ADDR</span><br><span class="line"></span><br><span class="line"><span class="comment"># If predefined ISTIO_AGENT_FLAGS is null, make it an empty string.</span></span><br><span class="line">ISTIO_AGENT_FLAGS=<span class="variable">$&#123;ISTIO_AGENT_FLAGS:-&#125;</span></span><br><span class="line"><span class="comment"># Split ISTIO_AGENT_FLAGS by spaces.</span></span><br><span class="line">IFS=<span class="string">&#x27; &#x27;</span> <span class="built_in">read</span> -r -a ISTIO_AGENT_FLAGS_ARRAY &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$ISTIO_AGENT_FLAGS</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PROXY_CONFIG=<span class="variable">$&#123;PROXY_CONFIG:-&quot;</span></span><br><span class="line"><span class="variable">serviceCluster: $SVC</span></span><br><span class="line"><span class="variable">controlPlaneAuthPolicy: <span class="variable">$&#123;CONTROL_PLANE_AUTH_POLICY&#125;</span></span></span><br><span class="line"><span class="variable">discoveryAddress: <span class="variable">$&#123;PILOT_ADDRESS&#125;</span></span></span><br><span class="line"><span class="variable">&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;EXEC_USER&#125;</span> == <span class="string">&quot;<span class="variable">$&#123;USER:-&#125;</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># if started as istio-proxy (or current user), do a normal start, without</span></span><br><span class="line">  <span class="comment"># redirecting stderr.</span></span><br><span class="line">  INSTANCE_IP=<span class="variable">$&#123;ISTIO_SVC_IP&#125;</span> POD_NAME=<span class="variable">$&#123;POD_NAME&#125;</span> POD_NAMESPACE=<span class="variable">$&#123;NS&#125;</span> <span class="string">&quot;<span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent&quot;</span> proxy <span class="string">&quot;<span class="variable">$&#123;ISTIO_AGENT_FLAGS_ARRAY[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will run: $&#123;ISTIO_BIN_BASE&#125;/envoy -c $ENVOY_CFG --restart-epoch 0 --drain-time-s 2 --parent-shutdown-time-s 3 --service-cluster $SVC --service-node &#x27;sidecar~$&#123;ISTIO_SVC_IP&#125;~$&#123;POD_NAME&#125;.$&#123;NS&#125;.svc.cluster.local~$&#123;NS&#125;.svc.cluster.local&#x27; $ISTIO_DEBUG &gt;$&#123;ISTIO_LOG_DIR&#125;/istio.log&quot; istio-proxy</span></span><br><span class="line"><span class="built_in">exec</span> su -s /bin/bash -c <span class="string">&quot;INSTANCE_IP=<span class="variable">$&#123;ISTIO_SVC_IP&#125;</span> POD_NAME=<span class="variable">$&#123;POD_NAME&#125;</span> POD_NAMESPACE=<span class="variable">$&#123;NS&#125;</span> exec <span class="variable">$&#123;ISTIO_BIN_BASE&#125;</span>/pilot-agent proxy <span class="variable">$&#123;ISTIO_AGENT_FLAGS_ARRAY[*]&#125;</span> 2&gt; <span class="variable">$&#123;ISTIO_LOG_DIR&#125;</span>/istio.err.log &gt; <span class="variable">$&#123;ISTIO_LOG_DIR&#125;</span>/istio.log&quot;</span> <span class="variable">$&#123;EXEC_USER&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="运行的进程为"><a href="#运行的进程为" class="headerlink" title="运行的进程为"></a>运行的进程为</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># INSTANCE_IP 当前虚拟机的ip</span></span><br><span class="line"><span class="comment"># 虚拟机中设置的ip</span></span><br><span class="line"><span class="comment"># 运行 pilot-agent proxy 当前进程</span></span><br><span class="line">$ su -s /bin/bash -c INSTANCE_IP=10.10.13.113 POD_NAME=localhost POD_NAMESPACE=vm <span class="built_in">exec</span> /usr/<span class="built_in">local</span>/bin/pilot-agent proxy  2&gt; /var/<span class="built_in">log</span>/istio/istio.err.log &gt; /var/<span class="built_in">log</span>/istio/istio.log istio-proxy</span><br></pre></td></tr></table></figure><p>我们来看看pilot-agent proxy 具体干了些什么吧？</p><p>我们来到istio/pilot/cmd/pilot-agent/main.go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">agent := envoy.NewAgent(envoyProxy, drainDuration)</span><br><span class="line"></span><br><span class="line">// Watcher is also kicking envoy start.</span><br><span class="line">watcher := envoy.NewWatcher(agent.Restart)</span><br><span class="line">go watcher.Run(ctx)</span><br><span class="line"></span><br><span class="line">// On SIGINT or SIGTERM, cancel the context, triggering a graceful shutdown</span><br><span class="line">go cmd.WaitSignalFunc(cancel)</span><br><span class="line">            <span class="comment"># 前面是数据组装我们就不过多的讲解, 最后一句agent 运行 envoy </span></span><br><span class="line"><span class="built_in">return</span> agent.Run(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我们看看实现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (a *agent) Run(ctx context.Context) error &#123;</span><br><span class="line">log.Info(<span class="string">&quot;Starting proxy agent&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">select &#123;</span><br><span class="line"><span class="keyword">case</span> status := &lt;-a.statusCh:</span><br><span class="line">a.mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> status.err != nil &#123;</span><br><span class="line"><span class="keyword">if</span> status.err.Error() == errOutOfMemory &#123;</span><br><span class="line">log.Warnf(<span class="string">&quot;Envoy may have been out of memory killed. Check memory usage and limits.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Errorf(<span class="string">&quot;Epoch %d exited with error: %v&quot;</span>, status.epoch, status.err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Infof(<span class="string">&quot;Epoch %d exited normally&quot;</span>, status.epoch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete(a.activeEpochs, status.epoch)</span><br><span class="line"></span><br><span class="line">active := len(a.activeEpochs)</span><br><span class="line">a.mutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> active == 0 &#123;</span><br><span class="line">log.Infof(<span class="string">&quot;No more active epochs, terminating&quot;</span>)</span><br><span class="line"><span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Infof(<span class="string">&quot;%d active epochs running&quot;</span>, active)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="comment"># terminate</span></span><br><span class="line">a.terminate()</span><br><span class="line">log.Info(<span class="string">&quot;Agent has successfully terminated&quot;</span>)</span><br><span class="line"><span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用enovy的API 运行envoy 动态加载配置</span></span><br><span class="line">func doEnvoyPost(path, contentType, body string, adminPort uint32) (*bytes.Buffer, error) &#123;</span><br><span class="line">requestURL := fmt.Sprintf(<span class="string">&quot;http://127.0.0.1:%d/%s&quot;</span>, adminPort, path)</span><br><span class="line">buffer, err := doHTTPPost(requestURL, contentType, body)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span> nil, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> buffer, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在istio启动时的日志及设置链的规则如下"><a href="#在istio启动时的日志及设置链的规则如下" class="headerlink" title="在istio启动时的日志及设置链的规则如下"></a>在istio启动时的日志及设置链的规则如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- Logs begin at 一 2021-07-19 08:59:42 UTC, end at 一 2021-07-19 16:01:01 UTC. --</span><br><span class="line">7月 19 09:03:35 localhost.localdomain systemd[1]: Started istio-sidecar: The Istio sidecar.</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -F ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t mangle -X ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -F ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables -t nat -X ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_DIVERT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -F ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t mangle -X ISTIO_TPROXY</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -F ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables -t nat -X ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by ip6tables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by ip6tables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Environment:</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ------------</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ENVOY_PORT=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_CAPTURE_PORT=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_INTERCEPTION_MODE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_TPROXY_MARK=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_TPROXY_ROUTE_TABLE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_INBOUND_PORTS=8080</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_OUTBOUND_PORTS=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_LOCAL_EXCLUDE_PORTS=15090,15021</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_SERVICE_CIDR=*</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ISTIO_SERVICE_EXCLUDE_CIDR=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Variables:</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ----------</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_PORT=15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_INBOUND_CAPTURE_PORT=15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_TUNNEL_PORT=15008</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_UID=997</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: PROXY_GID=997</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_INTERCEPTION_MODE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_TPROXY_MARK=1337</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_TPROXY_ROUTE_TABLE=133</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_PORTS_INCLUDE=8080</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: INBOUND_PORTS_EXCLUDE=15090,15021</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_IP_RANGES_INCLUDE=*</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_IP_RANGES_EXCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_PORTS_INCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: OUTBOUND_PORTS_EXCLUDE=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: KUBEVIRT_INTERFACES=</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ENABLE_INBOUND_IPV6=<span class="literal">false</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: DNS_SERVERS=[10.10.10.6],[]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Writing following contents to rules file:  /tmp/iptables-rules-1626685415906987113.txt145448538</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: * nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -N ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp --dport 8080 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -p tcp ! --dport 53 -m owner --uid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -p tcp --dport 53 -d 10.10.10.6/32 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp --dport 53 -d 10.10.10.6/32 -j REDIRECT --to-port 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-restore --noflush /tmp/iptables-rules-1626685415906987113.txt145448538</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: Writing following contents to rules file:  /tmp/ip6tables-rules-1626685415940193066.txt564611057</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: ip6tables-restore --noflush /tmp/ip6tables-rules-1626685415940193066.txt564611057</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: iptables-save</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *mangle</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :FORWARD ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Generated by iptables-save v1.4.21 on Mon Jul 19 17:03:35 2021</span></span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: *nat</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :PREROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :INPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :OUTPUT ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :POSTROUTING ACCEPT [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_INBOUND - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_IN_REDIRECT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_OUTPUT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: :ISTIO_REDIRECT - [0:0]</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp -m udp --dport 53 -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -p udp -m udp --dport 53 -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A OUTPUT -d 10.10.10.6/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp -m tcp --dport 15008 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_INBOUND -p tcp -m tcp --dport 8080 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -s 127.0.0.6/32 -o lo -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -p tcp -m tcp ! --dport 53 -m owner --uid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp -m tcp ! --dport 53 -m owner ! --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --uid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --gid-owner 997 -j ISTIO_IN_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -o lo -p tcp -m tcp ! --dport 53 -m owner ! --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -m owner --gid-owner 997 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 10.10.10.6/32 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 15053</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: COMMIT</span><br><span class="line">7月 19 09:03:35 localhost.localdomain istio-start.sh[6717]: <span class="comment"># Completed on Mon Jul 19 17:03:35 2021</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在istio1-9中iptables链规则的意义&quot;&gt;&lt;a href=&quot;#在istio1-9中iptables链规则的意义&quot; class=&quot;headerlink&quot; title=&quot;在istio1.9中iptables链规则的意义&quot;&gt;&lt;/a&gt;在istio1.9中ipta</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>孤儿进程与僵尸进程</title>
    <link href="http://example.com/2021/07/12/dale/"/>
    <id>http://example.com/2021/07/12/dale/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-08-24T16:25:21.601Z</updated>
    
    <content type="html"><![CDATA[<p>孤儿进程：一个父进程退出，<br>而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。<br>孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p><p>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，<br>而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。<br>这种进程称之为僵死进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;孤儿进程：一个父进程退出，&lt;br&gt;而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。&lt;br&gt;孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。&lt;/p&gt;
&lt;p&gt;僵尸进程：一个进程使用fork创建子进程，如果子进程退出，&lt;br&gt;而</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ebpf</title>
    <link href="http://example.com/2021/07/12/ebpf/"/>
    <id>http://example.com/2021/07/12/ebpf/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-08-24T16:25:21.602Z</updated>
    
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>wasm项目</title>
    <link href="http://example.com/2021/07/12/wasm/"/>
    <id>http://example.com/2021/07/12/wasm/</id>
    <published>2021-07-12T05:31:12.000Z</published>
    <updated>2021-08-24T16:25:21.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wasm项目"><a href="#wasm项目" class="headerlink" title="wasm项目"></a>wasm项目</h1><h2 id="envoy为什么使用WASM-filter"><a href="#envoy为什么使用WASM-filter" class="headerlink" title="envoy为什么使用WASM filter"></a>envoy为什么使用WASM filter</h2><h4 id="通过-WASM-filter的实现，我们可以得到："><a href="#通过-WASM-filter的实现，我们可以得到：" class="headerlink" title="通过 WASM filter的实现，我们可以得到："></a>通过 WASM filter的实现，我们可以得到：</h4><ul><li><p>敏捷性 - 过滤器可以动态加载到正在运行的 Envoy 进程中，而无需停止或重新编译。</p></li><li><p>可维护性 - 我们不必更改 Envoy 的代码库来扩展其功能。</p></li><li><p>多样性 - 流行的编程语言如 C/C++ 和 Rust 可以编译成 WASM，因此开发人员可以使用他们选择的编程语言来实现过滤器。</p></li><li><p>可靠性和隔离 - 过滤器部署到 VM（沙箱）中，因此与托管 Envoy 进程本身隔离（例如，当 WASM 过滤器崩溃时，它不会影响 Envoy 进程）。</p></li><li><p>安全性 - 由于过滤器通过定义良好的 API 与主机（Envoy 代理）通信，因此它们可以访问并且只能修改有限数量的连接或请求属性。</p></li></ul><h4 id="它还具有一些需要考虑的缺点："><a href="#它还具有一些需要考虑的缺点：" class="headerlink" title="它还具有一些需要考虑的缺点："></a>它还具有一些需要考虑的缺点：</h4><ul><li>性能比原生 C++ 快约 70%。</li><li>由于需要启动一个或多个 WASM 虚拟机，因此内存使用量更高。</li></ul><h3 id="envoy-代理-WASM-SDK"><a href="#envoy-代理-WASM-SDK" class="headerlink" title="envoy 代理 WASM SDK"></a>envoy 代理 WASM SDK</h3><p>Envoy Proxy 在基于堆栈的虚拟机中运行 WASM 过滤器，因此过滤器的内存与主机环境隔离。嵌入主机（Envoy Proxy）和 WASM 过滤器之间的所有交互都是通过 Envoy Proxy WASM SDK 提供的函数和回调实现的。WASM SDK 具有多种编程语言的实现，例如：</p><ul><li>C++</li><li>rust</li><li>AssemblyScript</li><li>Go</li></ul><p>在这篇文章中，我们将讨论如何使用Go Envoy Proxy WASM SDK为 Envoy 编写 WASM 过滤器。我们不打算详细讨论 Envoy Proxy WASM SDK 的 API，因为它超出了本文的范围。但是，我们将涉及掌握为 Envoy 编写 WASM 过滤器的基础知识所必需的一些内容。<br>我们的过滤器实现必须派生自以下两个类：<br>当加载 WASM 插件（包含过滤器的 WASM 二进制文件）时，会创建一个根上下文。根上下文与 VM 实例具有相同的生命周期，它执行我们的过滤器并用于：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> rootContext <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// You&#x27;d better embed the default root context</span></span><br><span class="line"><span class="comment">// so that you don&#x27;t need to reimplement all the methods by yourself.</span></span><br><span class="line">proxywasm.DefaultRootContext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> httpHeaders <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// we must embed the default context so that you need not to reimplement all the methods by yourself</span></span><br><span class="line">proxywasm.DefaultHttpContext</span><br><span class="line">contextID <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>初始化wasm项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  cmd git:(istio-1.9.4-dev) ✗ ./cmd init demo</span><br><span class="line"> buildVersion = unknown, buildGitRevision = unknown, buildStatus = unknown, buildTag  = unknown, buildHub = unknown</span><br><span class="line">Use the arrow keys to navigate: ↓ ↑ → ← </span><br><span class="line">? What language <span class="keyword">do</span> you wish to use <span class="keyword">for</span> the filter: </span><br><span class="line">  ▸ cpp</span><br><span class="line">    rust</span><br><span class="line">    assemblyscript</span><br><span class="line">    tinygo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>项目结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo</span><br><span class="line">|-- go.mod</span><br><span class="line">|-- main.go</span><br><span class="line">|-- runtime-config.json</span><br></pre></td></tr></table></figure><ol start="2"><li><p>我们在代码中加上我们所需的代码 例如:<br>在http的头中加上一个key=”hello”  value=”world”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Override DefaultHttpContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ctx *httpHeaders)</span> <span class="title">OnHttpResponseHeaders</span><span class="params">(numHeaders <span class="keyword">int</span>, endOfStream <span class="keyword">bool</span>)</span> <span class="title">types</span>.<span class="title">Action</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := proxywasm.SetHttpResponseHeader(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">proxywasm.LogCriticalf(<span class="string">&quot;failed to set response header: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.ActionContinue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译demo项目</p></li></ol><p>使用go语言构建wasm的时候需要安装tinygo</p><p>macos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tinygo</span><br></pre></td></tr></table></figure><p>安装完成后，在当前项目的根目录执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinygo build -o filter.wasm -target=wasi -wasm-abi=generic .</span><br></pre></td></tr></table></figure><p>执行当前命令后会生成 <code>filter.wasm</code></p><ol start="4"><li>将wasm的包scp 到某个sidecar 容器中, 例如:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -n demo</span><br><span class="line"></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-5588477696-2sw7b       2/2     Running   0          8d</span><br><span class="line">productpage-v1-5bd6875444-j75dp   2/2     Running   0          8d</span><br><span class="line">ratings-v1-c9d5c65fc-l65mq        2/2     Running   0          8d</span><br><span class="line">reviews-v2-c789c7bdc-tsg7q        2/2     Running   0          8d</span><br><span class="line">reviews-v3-78944b866f-96nbw       2/2     Running   0          8d</span><br><span class="line"></span><br><span class="line">kubectl cp filter.wasm -n demo productpage-v1-5bd6875444-j75dp:/var/<span class="built_in">local</span>/filter.wasm</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们查看一下容器中是否包含<code>filter.wasm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  wasm git:(main) ✗ k <span class="built_in">exec</span> -it productpage-v1-5bd6875444-j75dp ls /var/<span class="built_in">local</span></span><br><span class="line">Defaulting container name to productpage.</span><br><span class="line">Use <span class="string">&#x27;kubectl describe pod/productpage-v1-5bd6875444-j75dp -n demo&#x27;</span> to see all of the containers <span class="keyword">in</span> this pod.</span><br><span class="line">filter.wasm</span><br></pre></td></tr></table></figure><p>可以看到/var/local 中包含<code>filter.wasm</code></p><ol start="5"><li>创建envoyfilter</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f-&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EnvoyFilter</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">productpage-v1-examplefilter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">configPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">applyTo:</span> <span class="string">HTTP_FILTER</span></span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">SIDECAR_INBOUND</span></span><br><span class="line">      <span class="attr">proxy:</span></span><br><span class="line">        <span class="attr">proxyVersion:</span> <span class="string">&#x27;^1\.8.*&#x27;</span></span><br><span class="line">      <span class="attr">listener:</span></span><br><span class="line">        <span class="attr">portNumber:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">filterChain:</span></span><br><span class="line">          <span class="attr">filter:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">envoy.http_connection_manager</span></span><br><span class="line">            <span class="attr">subFilter:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">envoy.router</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">operation:</span> <span class="string">INSERT_BEFORE</span></span><br><span class="line">      <span class="attr">value:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">productpage-demo</span></span><br><span class="line">            <span class="attr">rootId:</span> <span class="string">my_root_id</span></span><br><span class="line">            <span class="attr">vmConfig:</span></span><br><span class="line">              <span class="attr">code:</span></span><br><span class="line">                <span class="attr">local:</span></span><br><span class="line">                  <span class="attr">filename:</span> <span class="string">/var/local/filter.wasm</span></span><br><span class="line">              <span class="attr">runtime:</span> <span class="string">envoy.wasm.runtime.v8</span></span><br><span class="line">              <span class="attr">vmId:</span> <span class="string">filter</span></span><br><span class="line">              <span class="attr">allow_precompiled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">envoy.filters.http.wasm</span></span><br><span class="line">  <span class="attr">workloadSelector:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">productpage</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol><li>向productpage服务上的 HTTP 端口 8080 发送一些流量：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=xxx --restart=Never -it --rm sh</span><br><span class="line"></span><br><span class="line">~ <span class="comment"># curl -L -v http://productpage.demo:9080</span></span><br></pre></td></tr></table></figure><p>在响应中，我们希望看到过滤器的标头添加到响应标头中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">About</span> <span class="string">to</span> <span class="string">connect()</span> <span class="string">to</span> <span class="string">frontpage.backyards-demo</span> <span class="string">port</span> <span class="number">8080</span> <span class="string">(#0)</span></span><br><span class="line"><span class="string">*</span>   <span class="string">Trying</span> <span class="number">10.10</span><span class="number">.178</span><span class="number">.38</span><span class="string">...</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: conn:</span> <span class="number">0x10eadbd8</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: send:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Adding handle: recv:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="attr">Curl_addHandleToPipeline: length:</span> <span class="number">1</span></span><br><span class="line"><span class="string">*</span> <span class="bullet">-</span> <span class="string">Conn</span> <span class="number">0</span> <span class="string">(0x10eadbd8)</span> <span class="attr">send_pipe:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">recv_pipe:</span> <span class="number">0</span></span><br><span class="line"><span class="string">*</span> <span class="string">Connected</span> <span class="string">to</span> <span class="string">frontpage.backyards-demo</span> <span class="string">(10.10.178.38)</span> <span class="string">port</span> <span class="number">8080</span> <span class="string">(#0)</span></span><br><span class="line"><span class="string">&gt;</span> <span class="string">GET</span> <span class="string">/</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">User-Agent:</span> <span class="string">curl/7.30.0</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">Host:</span> <span class="string">frontpage.backyards-demo:8080</span></span><br><span class="line"><span class="string">&gt;</span> <span class="attr">Accept:</span> <span class="string">*/*</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;</span> <span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">content-type:</span> <span class="string">text/plain</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">date:</span> <span class="string">Thu,</span> <span class="number">16</span> <span class="string">Apr</span> <span class="number">2020 16:32:20 </span><span class="string">GMT</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">content-length:</span> <span class="number">9</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-upstream-service-time:</span> <span class="number">10</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">resp-header-demo:</span> <span class="string">added</span> <span class="string">by</span> <span class="string">our</span> <span class="string">filter</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-peer-metadata:</span> <span class="string">CjYKDElOU1RBTkNFX0lQUxImGiQxMC4yMC4xLjU3LGZlODA6OmQwNDM6NDdmZjpmZWYwOmVkMjkK2QEKBkxBQkVMUxLOASrLAQoSCgNhcHASCxoJZnJvbnRwYWdlCiEKEXBvZC10ZW1wbGF0ZS1oYXNoEgwaCjU3OGM2NTU0ZDQKJAoZc2VjdXJpdHkuaXN0aW8uaW8vdGxzTW9k</span></span><br><span class="line"><span class="string">ZRIHGgVpc3RpbwouCh9zZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1uYW1lEgsaCWZyb250cGFnZQorCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIEGgJ2MQoPCgd2ZXJzaW9uEgQaAnYxChoKB01FU0hfSUQSDxoNY2x1c3Rlci5sb2NhbAonCgROQU1FEh8aHWZyb250cGFnZS12MS01N</span></span><br><span class="line"><span class="string">zhjNjU1NGQ0LWxidnFrCh0KCU5BTUVTUEFDRRIQGg5iYWNreWFyZHMtZGVtbwpXCgVPV05FUhJOGkxrdWJlcm5ldGVzOi8vYXBpcy9hcHBzL3YxL25hbWVzcGFjZXMvYmFja3lhcmRzLWRlbW8vZGVwbG95bWVudHMvZnJvbnRwYWdlLXYxCi8KEVBMQVRGT1JNX01FVEFEQVRBEhoqGAoWCgpjbHVzdGVyX2lkEg</span></span><br><span class="line"><span class="string">gaBm1hc3RlcgocCg9TRVJWSUNFX0FDQ09VTlQSCRoHZGVmYXVsdAofCg1XT1JLTE9BRF9OQU1FEg4aDGZyb250cGFnZS12MQ==</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-peer-metadata-id:</span> <span class="string">sidecar~10.20.1.57~frontpage-v1-578c6554d4-lbvqk.backyards-demo~backyards-demo.svc.cluster.local</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-by-metadata:</span> <span class="string">CjYKDElOU1RBTkNFX0lQUxImGiQxMC4yMC4xLjU3LGZlODA6OmQwNDM6NDdmZjpmZWYwOmVkMjkK2QEKBkxBQkVMUxLOASrLAQoSCgNhcHASCxoJZnJvbnRwYWdlCiEKEXBvZC10ZW1wbGF0ZS1oYXNoEgwaCjU3OGM2NTU0ZDQKJAoZc2VjdXJpdHkuaXN0aW8uaW8vdGxzTW9kZRIHGgVp</span></span><br><span class="line"><span class="string">c3RpbwouCh9zZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1uYW1lEgsaCWZyb250cGFnZQorCiNzZXJ2aWNlLmlzdGlvLmlvL2Nhbm9uaWNhbC1yZXZpc2lvbhIEGgJ2MQoPCgd2ZXJzaW9uEgQaAnYxChoKB01FU0hfSUQSDxoNY2x1c3Rlci5sb2NhbAonCgROQU1FEh8aHWZyb250cGFnZS12MS01NzhjNjU1N</span></span><br><span class="line"><span class="string">GQ0LWxidnFrCh0KCU5BTUVTUEFDRRIQGg5iYWNreWFyZHMtZGVtbwpXCgVPV05FUhJOGkxrdWJlcm5ldGVzOi8vYXBpcy9hcHBzL3YxL25hbWVzcGFjZXMvYmFja3lhcmRzLWRlbW8vZGVwbG95bWVudHMvZnJvbnRwYWdlLXYxCi8KEVBMQVRGT1JNX01FVEFEQVRBEhoqGAoWCgpjbHVzdGVyX2lkEggaBm1hc3</span></span><br><span class="line"><span class="string">RlcgocCg9TRVJWSUNFX0FDQ09VTlQSCRoHZGVmYXVsdAofCg1XT1JLTE9BRF9OQU1FEg4aDGZyb250cGFnZS12MQ==</span></span><br><span class="line"><span class="string">*</span> <span class="string">Server</span> <span class="string">istio-envoy</span> <span class="string">is</span> <span class="string">not</span> <span class="string">blacklisted</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">server:</span> <span class="string">istio-envoy</span></span><br><span class="line"><span class="string">&lt;</span> <span class="attr">x-envoy-decorator-operation:</span> <span class="string">frontpage.backyards-demo.svc.cluster.local:8080/*</span></span><br><span class="line"><span class="string">&lt;</span></span><br><span class="line"><span class="string">*</span> <span class="string">Connection</span> <span class="comment">#0 to host frontpage.backyards-demo left intact</span></span><br><span class="line"><span class="string">frontpage</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wasm项目&quot;&gt;&lt;a href=&quot;#wasm项目&quot; class=&quot;headerlink&quot; title=&quot;wasm项目&quot;&gt;&lt;/a&gt;wasm项目&lt;/h1&gt;&lt;h2 id=&quot;envoy为什么使用WASM-filter&quot;&gt;&lt;a href=&quot;#envoy为什么使用WASM-f</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>golang 中的读写锁与互斥锁、自旋锁</title>
    <link href="http://example.com/2021/06/28/lock/"/>
    <id>http://example.com/2021/06/28/lock/</id>
    <published>2021-06-28T06:43:55.000Z</published>
    <updated>2021-08-24T16:25:21.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读写锁-RWMutex"><a href="#读写锁-RWMutex" class="headerlink" title="读写锁(RWMutex)"></a>读写锁(RWMutex)</h2><p>读写锁是针对于读写操作的互斥锁。它与普通的互斥锁最大的不同就是，<br>它可以分别针对读操作和写操作进行锁定和解锁操作。<br>读写锁遵循的访问控制规则与互斥锁有所不同。<br>在读写锁管辖的范围内，它允许任意个读操作的同时进行。<br>但是，在同一时刻，它只允许有一个写操作在进行。<br>并且，在某一个写操作被进行的过程中，读操作的进行也是不被允许的。<br>也就是说，读写锁控制下的多个写操作之间都是互斥的，并且写操作与读操作之间也都是互斥的。<br>但是，多个读操作之间却不存在互斥关系。</p><p>换句话说：</p><p>1、 读锁: 所有的 goroutine 都可以同时读, 但不允许写。</p><p>2、 写锁: 写锁 只允许一个goroutine 写, 其他的goroutine 不允许读也不允许写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span>       //写锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span>     //写解锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span>      //读锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span>    //读解锁</span></span><br></pre></td></tr></table></figure><h2 id="互斥锁-Mutex"><a href="#互斥锁-Mutex" class="headerlink" title="互斥锁(Mutex)"></a>互斥锁(Mutex)</h2><p>使用互斥锁（Mutex，全称 mutual exclusion）是为了来保护一个资源不会因为并发操作而引起冲突导致<br>数据不准确。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(count *<span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">*count = *count + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">wg.Add(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"><span class="keyword">go</span> add(&amp;count, &amp;wg)</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;count 的值为：&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;读写锁-RWMutex&quot;&gt;&lt;a href=&quot;#读写锁-RWMutex&quot; class=&quot;headerlink&quot; title=&quot;读写锁(RWMutex)&quot;&gt;&lt;/a&gt;读写锁(RWMutex)&lt;/h2&gt;&lt;p&gt;读写锁是针对于读写操作的互斥锁。它与普通的互斥锁最大的不同就是，</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 内存分配之逃逸分析</title>
    <link href="http://example.com/2021/05/30/go-gc/"/>
    <id>http://example.com/2021/05/30/go-gc/</id>
    <published>2021-05-30T13:58:12.000Z</published>
    <updated>2021-08-24T16:25:21.603Z</updated>
    
    <content type="html"><![CDATA[<p>在C/C++开发中，动态分配内存(new/malloc)需要我们手动释放资源。<br>这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。<br>但是这有个缺点，如果忘记释放内存，则会导致内存泄漏。<br>在很多高级语言中(python/Go/java)都加上了垃圾回收机制。</p><p>golang 的内存分配之堆和栈</p><p>Go的垃圾回收，让堆和栈堆程序员保持透明。真正解放了程序员的双手，让他们可以专注于业务，“高效”地完成代码编写。把那些内存管理的复杂机制交给编译器。</p><p>栈 可以简单得理解成一次函数调用内部申请到的内存，它们会随着函数的返回把内存还给系统。下面来看看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子，内函数内部申请的临时变量，即使你是用make申请到的内存，如果发现在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配比堆上快很多。</p><p>下面在看看一个堆的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> []<span class="title">int</span></span>&#123;</span><br><span class="line">    a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而上面这段代码，申请的代码和上面的一模一样，但是申请后作为返回值返回了，编译器会认为在退出函数之后还有其他地方在引用，当函数返回之后并不会将其内存归还。那么就申请到堆里。</p><p>如果变量都分配到堆上，堆不像栈可以自动清理。它会引起Go频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。</p><p>堆和栈相比</p><p>堆适合不可预知的大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片。</p><p>栈内存分配则会非常快，栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块。之后要通过垃圾回收才能释放。</p><p>逃逸分析</p><p>逃逸分析是一种确定指针动态范围的方法。简单来说就是分析在程序的哪些地方可以访问到该指针。</p><p>简单来说，编译器会根据变量是否被外部引用来决定是否逃逸：</p><p>1、如果函数外部没有引用，则优先放到栈中；<br>2、如果函数外部存在引用，则必定放到堆中；</p><p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p><p>注意：go 在编译阶段确立逃逸，并不是在运行时。</p><p>如何得知变量是分配在栈（stack）上还是堆（heap）上？</p><p>准确地说，你并不需要知道。Golang 中的变量只要被引用就一直会存活，存储在堆上还是栈上由内部实现决定而和具体的语法没有关系。</p><p>知道变量的存储位置确实和效率编程有关系。如果可能，Golang 编译器会将函数的局部变量分配到函数栈帧（stack frame）上。 然而，如果编译器不能确保变量在函数 return之后不再被引用，编译器就会将变量分配到堆上。而且，如果一个局部变量非常大，那么它也应该被分配到堆上而不是栈上。</p><p>当前情况下，如果一个变量被取地址，那么它就有可能被分配到堆上。然而，还要对这些变量做逃逸分析，如果函数return之后，变量不再被引用，则将其分配到栈上。</p><p>Go可以返回局部变量指针，这其实是一个典型的变量逃逸案例，示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StudentRegister</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line">s := <span class="built_in">new</span>(Student) <span class="comment">//局部变量s逃逸到堆</span></span><br><span class="line"></span><br><span class="line">    s.Name = name</span><br><span class="line">    s.Age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">StudentRegister(<span class="string">&quot;Jim&quot;</span>, <span class="number">18</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然在函数 StudentRegister() 内部 s 为局部变量，其值通过函数返回值返回，s 本身为一指针，其指向的内存地址不会是栈而是堆，这就是典型的逃逸案例。</p><p>终端运行命令查看逃逸分析日志：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build -gcflags=-m</span><br></pre></td></tr></table></figure><p>指令集 -gcflags 用于将标识参数传递给 Go 编译器。</p><p>-m 会打印出逃逸分析的优化策略。</p><p>可见在StudentRegister()函数中，也即代码第9行显示”escapes to heap”，代表该行内存分配发生了逃逸现象。</p><p>栈空间不足逃逸</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, _ := <span class="keyword">range</span> s &#123;</span><br><span class="line">        s[index] = index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码主函数中分配了一个1000个长度的切片，是否逃逸取决于栈空间是否足够大。 直接查看编译提示，如下：</p><p>终端运行命令查看逃逸分析日志：</p><p>根据上面的信息，没有发生逃逸。分配了一个1000的长度还不足以发生逃逸现象。然后就x10倍吧，再看看情况。</p><p>逃逸分析的作用是什么呢？</p><p>1、逃逸分析的好处是为了减少gc的压力，不逃逸的对象分配在栈上，当函数返回时就回收了资源，不需要gc标记清除。</p><p>2、逃逸分析完后可以确定哪些变量可以分配在栈上，栈的分配比堆快，性能好(逃逸的局部变量会在堆上分配 ,而没有发生逃逸的则有编译器在栈上分配)。</p><p>3、同步消除，如果你定义的对象的方法上有同步锁，但在运行时，却只有一个线程在访问，此时逃逸分析后的机器码，会去掉同步锁运行。</p><p>总结</p><p>1、堆上动态分配内存比栈上静态分配内存，开销大很多。</p><p>2、变量分配在栈上需要能在编译期确定它的作用域，否则会分配到堆上。</p><p>3、Go编译器会在编译期对考察变量的作用域，并作一系列检查，如果它的作用域在运行期间对编译器一直是可知的，那么就会分配到栈上。简单来说，编译器会根据变量是否被外部引用来决定是否逃逸。</p><p>4、对于Go程序员来说，编译器的这些逃逸分析规则不需要掌握，我们只需通过go build -gcflags ‘-m’命令来观察变量逃逸情况就行了。</p><p>5、不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。</p><p>6、逃逸分析在编译阶段完成的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C/C++开发中，动态分配内存(new/malloc)需要我们手动释放资源。&lt;br&gt;这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。&lt;br&gt;但是这有个缺点，如果忘记释放内存，则会导致内存泄漏。&lt;br&gt;在很多高级语言中(python/Go/java)都加上了垃圾</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>集群内部负载均衡 lb</title>
    <link href="http://example.com/2021/04/07/k8s/lb/"/>
    <id>http://example.com/2021/04/07/k8s/lb/</id>
    <published>2021-04-07T14:50:01.000Z</published>
    <updated>2021-08-24T16:25:21.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集群内部负载均衡-lb"><a href="#集群内部负载均衡-lb" class="headerlink" title="集群内部负载均衡 lb"></a>集群内部负载均衡 lb</h1><p>k8s的LoadBalancer类型的Service依赖云服务商的Load Balancer, 如阿里云的slb。</p><p>当我们把k8s部署在私有云时，需要简单的LoadBalancer来验证工作，开源的metallb就是一个不错的选择。</p><p>MetalLB支持2种 一种是<code>Layer2</code> 、<code>BGP</code></p><h2 id="MetalLB-安装"><a href="#MetalLB-安装" class="headerlink" title="MetalLB 安装"></a>MetalLB 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml;</span><br><span class="line">kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<span class="string">&quot;<span class="subst">$(openssl rand -base64 128)</span>&quot;</span>;</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml;</span><br></pre></td></tr></table></figure><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>MetalLB需要以下功能才能发挥作用：</p><ul><li>一个 Kubernetes 运行Kubernetes 1.13.0或更高版本的集群，尚不具有网络负载平衡功能。</li><li>一个 集群网络配置 可以与MetalLB共存。</li><li>一些用于MetalLB的IPv4地址。</li><li>使用BGP工作模式时，您将需要一台或多台能够讲话的路由器 BGP协议。</li><li>节点之间必须允许端口7946（TCP＆UDP）上的流量，具体取决于 会员列表。</li></ul><p>GBP 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    peers:</span><br><span class="line">    - peer-address: 10.0.0.1</span><br><span class="line">      peer-asn: 64501</span><br><span class="line">      my-asn: 64500</span><br><span class="line">    address-pools:</span><br><span class="line">    - name: default</span><br><span class="line">      protocol: bgp</span><br><span class="line">      addresses:</span><br><span class="line">      - 192.168.10.0/24</span><br></pre></td></tr></table></figure><h3 id="创建configmap"><a href="#创建configmap" class="headerlink" title="创建configmap"></a>创建configmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f configmap.yaml</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集群内部负载均衡-lb&quot;&gt;&lt;a href=&quot;#集群内部负载均衡-lb&quot; class=&quot;headerlink&quot; title=&quot;集群内部负载均衡 lb&quot;&gt;&lt;/a&gt;集群内部负载均衡 lb&lt;/h1&gt;&lt;p&gt;k8s的LoadBalancer类型的Service依赖云服务商的L</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>如何在本地调试istio</title>
    <link href="http://example.com/2021/03/22/k8s/istio/debug-istio/"/>
    <id>http://example.com/2021/03/22/k8s/istio/debug-istio/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-09-09T08:04:42.167Z</updated>
    
    <content type="html"><![CDATA[<p>本文档主要是帮助我们如何在本地使用调试istio</p><p>因为我们使用的istio都是在1.8.4上面做的,所以我在下面的讲解的版本也是在istio release-1.8.4版本上面进行</p><p>istio 核心模块有两个</p><ul><li>pilot-discovery: 这个模块就是我们的istiod istio/pilot/pilot-discovery 目录下</li><li>pilot-agent: 这个模块 就是proxy istio/pilot/pilot-discovery 目录下</li></ul><p><img src="/2021/03/22/k8s/istio/debug-istio/img_2.png" alt="img.png"></p><p>如果我们使用kind 则需要 –config trustworthy-jwt.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">kubeadmConfigPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">    <span class="attr">etcd:</span></span><br><span class="line">      <span class="attr">local:</span></span><br><span class="line">        <span class="comment"># Run etcd in a tmpfs (in RAM) for performance improvements</span></span><br><span class="line">        <span class="attr">dataDir:</span> <span class="string">/tmp/kind-cluster-etcd</span></span><br><span class="line">    <span class="attr">apiServer:</span></span><br><span class="line">      <span class="attr">extraArgs:</span></span><br><span class="line">        <span class="attr">&quot;service-account-issuer&quot;:</span> <span class="string">&quot;kubernetes.default.svc&quot;</span></span><br><span class="line">        <span class="attr">&quot;service-account-signing-key-file&quot;:</span> <span class="string">&quot;/etc/kubernetes/pki/sa.key&quot;</span></span><br><span class="line"><span class="attr">containerdConfigPatches:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|-</span></span><br><span class="line">    [<span class="string">plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;localhost:5000&quot;</span>]</span><br><span class="line">      <span class="string">endpoint</span> <span class="string">=</span> [<span class="string">&quot;http://kind-registry:5000&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="运行kind"><a href="#运行kind" class="headerlink" title="运行kind"></a>运行kind</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kind create cluster --image  docker.io/kindest/node:v1.17.5 --config trustworthy-jwt.yaml  --name kind-2</span><br></pre></td></tr></table></figure><h3 id="本地代理pilot-discovery"><a href="#本地代理pilot-discovery" class="headerlink" title="本地代理pilot-discovery"></a>本地代理<code>pilot-discovery</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装istio</span></span><br><span class="line">$ istioctl install</span><br></pre></td></tr></table></figure><p>等待istio 安装完成以后我们将 istiod的流量转到本地，主要目的是为了更改endpoint </p><p>使用外部 istiod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置外部 IP</span></span><br><span class="line">$ <span class="built_in">export</span> ip=192.168.110.206</span><br><span class="line">$ kubectl -n istio-system delete svc istiod</span><br><span class="line">$ kubectl -n istio-system delete endpoints istiod</span><br><span class="line"></span><br><span class="line">$ cat &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 443</span></span><br><span class="line"><span class="string">    targetPort: 15017</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Endpoints</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">subsets:</span></span><br><span class="line"><span class="string">- addresses:</span></span><br><span class="line"><span class="string">  - ip: $&#123;ip&#125;</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 15017</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>还原istio 的svc地址 使svc指向 集群内部 istiod.istio-system pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n istio-system delete svc istiod</span><br><span class="line">$ kubectl -n istio-system delete endpoints istiod</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  annotations:</span></span><br><span class="line"><span class="string">    kubectl.kubernetes.io/last-applied-configuration: |</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;:&quot;Service&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;istiod&quot;,&quot;install.operator.istio.io/owning-resource&quot;:&quot;unknown&quot;,&quot;install.operator.istio.io/owning-resource-namespace&quot;:&quot;istio-system&quot;,&quot;istio&quot;:&quot;pilot&quot;,&quot;istio.io/rev&quot;:&quot;default&quot;,&quot;operator.istio.io/component&quot;:&quot;Pilot&quot;,&quot;operator.istio.io/managed&quot;:&quot;Reconcile&quot;,&quot;operator.istio.io/version&quot;:&quot;1.8.4&quot;,&quot;release&quot;:&quot;istio&quot;&#125;,&quot;name&quot;:&quot;istiod&quot;,&quot;namespace&quot;:&quot;istio-system&quot;&#125;,&quot;spec&quot;:&#123;&quot;ports&quot;:[&#123;&quot;name&quot;:&quot;grpc-xds&quot;,&quot;port&quot;:15010,&quot;protocol&quot;:&quot;TCP&quot;&#125;,&#123;&quot;name&quot;:&quot;https-dns&quot;,&quot;port&quot;:15012,&quot;protocol&quot;:&quot;TCP&quot;&#125;,&#123;&quot;name&quot;:&quot;https-webhook&quot;,&quot;port&quot;:443,&quot;protocol&quot;:&quot;TCP&quot;,&quot;targetPort&quot;:15017&#125;,&#123;&quot;name&quot;:&quot;http-monitoring&quot;,&quot;port&quot;:15014,&quot;protocol&quot;:&quot;TCP&quot;&#125;],&quot;selector&quot;:&#123;&quot;app&quot;:&quot;istiod&quot;,&quot;istio&quot;:&quot;pilot&quot;&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">  creationTimestamp: &quot;2021-03-22T07:08:32Z&quot;</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: istiod</span></span><br><span class="line"><span class="string">    install.operator.istio.io/owning-resource: unknown</span></span><br><span class="line"><span class="string">    install.operator.istio.io/owning-resource-namespace: istio-system</span></span><br><span class="line"><span class="string">    istio: pilot</span></span><br><span class="line"><span class="string">    istio.io/rev: default</span></span><br><span class="line"><span class="string">    operator.istio.io/component: Pilot</span></span><br><span class="line"><span class="string">    operator.istio.io/managed: Reconcile</span></span><br><span class="line"><span class="string">    operator.istio.io/version: 1.8.4</span></span><br><span class="line"><span class="string">    release: istio</span></span><br><span class="line"><span class="string">  name: istiod</span></span><br><span class="line"><span class="string">  namespace: istio-system</span></span><br><span class="line"><span class="string">  resourceVersion: &quot;826&quot;</span></span><br><span class="line"><span class="string">  selfLink: /api/v1/namespaces/istio-system/services/istiod</span></span><br><span class="line"><span class="string">  uid: 44ee44a6-9003-4f8d-9196-49e47b6667c1</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  clusterIP: 10.96.3.250</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: grpc-xds</span></span><br><span class="line"><span class="string">    port: 15010</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15010</span></span><br><span class="line"><span class="string">  - name: https-dns</span></span><br><span class="line"><span class="string">    port: 15012</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15012</span></span><br><span class="line"><span class="string">  - name: https-webhook</span></span><br><span class="line"><span class="string">    port: 443</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15017</span></span><br><span class="line"><span class="string">  - name: http-monitoring</span></span><br><span class="line"><span class="string">    port: 15014</span></span><br><span class="line"><span class="string">    protocol: TCP</span></span><br><span class="line"><span class="string">    targetPort: 15014</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    app: istiod</span></span><br><span class="line"><span class="string">    istio: pilot</span></span><br><span class="line"><span class="string">  sessionAffinity: None</span></span><br><span class="line"><span class="string">  type: ClusterIP</span></span><br><span class="line"><span class="string">status:</span></span><br><span class="line"><span class="string">  loadBalancer: &#123;&#125;</span></span><br><span class="line"><span class="string">EOF</span>  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文档主要是帮助我们如何在本地使用调试istio&lt;/p&gt;
&lt;p&gt;因为我们使用的istio都是在1.8.4上面做的,所以我在下面的讲解的版本也是在istio release-1.8.4版本上面进行&lt;/p&gt;
&lt;p&gt;istio 核心模块有两个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pilot</summary>
      
    
    
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>lxc</title>
    <link href="http://example.com/2021/03/16/linux/lxc/"/>
    <id>http://example.com/2021/03/16/linux/lxc/</id>
    <published>2021-03-16T14:29:22.000Z</published>
    <updated>2021-08-24T16:25:21.610Z</updated>
    
    <content type="html"><![CDATA[<p>运行虚拟机时，容器几乎接近裸机。托管虚拟实例时，它们几乎没有开销。<br>LXC于2008年首次引入，从其之前的Solaris Containers（或Solaris Zones）和FreeBSD jail中采用了其大部分功能。<br>LXC无需创建完整的虚拟机，而是可以通过自己的进程和网络空间来实现虚拟环境。<br>通过使用命名空间来强制执行进程隔离，并利用内核本身的控制组（cgroup）功能，该功能可以限制，说明和隔离一个或多个进程的CPU，内存，磁盘I / O和网络使用情况。<br>将此用户空间框架视为的一种非常高级的形式 chroot。</p><p>注意：LXC使用名称空间来实现进程隔离，同时使用内核自己的cgroup来解决并限制一个或多个进程中的CPU，内存，磁盘I / O和网络使用情况。</p><h3 id="但是容器到底是什么？"><a href="#但是容器到底是什么？" class="headerlink" title="但是容器到底是什么？"></a>但是容器到底是什么？</h3><p>简短的答案是，容器使软件应用程序与操作系统脱钩，从而为用户提供了一个干净而最小的Linux环境，同时在一个或多个隔离的“容器”中运行其他所有内容。容器的目的是启动一组有限的应用程序或服务（通常称为微服务），并使它们在独立的沙盒环境中运行。</p><p>这种隔离可防止在给定容器中运行的进程监视或影响在另一个容器中运行的进程。同样，这些容器化服务不会影响或干扰主机。能够将分散在多个物理服务器上的许多服务整合为一个的想法是数据中心选择采用该技术的众多原因之一。</p><h3 id="容器功能包括："><a href="#容器功能包括：" class="headerlink" title="容器功能包括："></a>容器功能包括：</h3><ul><li>安全性：网络服务可以在容器中运行，从而限制了由于安全漏洞或违反而造成的损害。入侵者成功利用该容器中运行的一个应用程序上的安全漏洞，仅限于该容器中可能采取的一系列操作。</li><li>隔离：容器允许在同一台物理计算机上部署一个或多个应用程序，即使这些应用程序必须在不同的域下运行，每个域都需要对其各自资源的独占访问权。例如，在不同容器中运行的多个应用程序可以通过使用与每个容器关联的不同IP地址绑定到同一物理网络接口。</li><li>虚拟化和透明性：容器为系统提供了虚拟化的环境，可以隐藏或限制其下的物理设备或系统配置的可见性。容器背后的一般原则是，除了解决安全性或隔离性问题之外，避免更改运行应用程序的环境。</li></ul><p>Docker主要致力于：</p><ul><li>可移植性：Docker提供了基于映像的部署模型。这种类型的可移植性提供了一种跨多个环境共享应用程序或服务集（及其所有依赖项）的简便方法。</li><li>版本控制：单个Docker映像由一系列组合的层组成。每当更改图像时，都会创建一个新层。例如，每次用户指定命令（例如run或）时 ，都会创建一个新层 copy。Docker将这些层重用于新的容器构建。与Docker分层是它自己的版本控制方法。</li><li>回滚：同样，每个Docker映像都有层。如果您不想使用当前运行的图层，则可以回滚到以前的版本。这种敏捷性使软件开发人员可以更轻松地连续集成和部署他们的软件技术。</li><li>快速部署：置备新硬件通常可能需要几天的时间。而且，安装和配置它的工作量和开销非常重。使用Docker，您可以通过将启动和运行映像所需的时间减少到几秒钟来避免所有这些情况。用完容器后，就可以轻松销毁它。</li></ul><p>*** 从根本上说，Docker和LXC都非常相似。它们都是用户空间和轻量级虚拟化平台，它们实现cgroup和名称空间来管理资源隔离。但是，两者之间存在许多明显的差异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行虚拟机时，容器几乎接近裸机。托管虚拟实例时，它们几乎没有开销。&lt;br&gt;LXC于2008年首次引入，从其之前的Solaris Containers（或Solaris Zones）和FreeBSD jail中采用了其大部分功能。&lt;br&gt;LXC无需创建完整的虚拟机，而是可以通</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>route</title>
    <link href="http://example.com/2021/03/14/linux/route/"/>
    <id>http://example.com/2021/03/14/linux/route/</id>
    <published>2021-03-13T16:25:54.000Z</published>
    <updated>2021-08-24T16:25:21.617Z</updated>
    
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 虚拟网络设备详解之 Bridge 网桥</title>
    <link href="http://example.com/2021/03/13/linux/bridge/"/>
    <id>http://example.com/2021/03/13/linux/bridge/</id>
    <published>2021-03-13T14:44:26.000Z</published>
    <updated>2021-08-24T16:25:21.609Z</updated>
    
    <content type="html"><![CDATA[<p>同 tap/tun、veth-pair 一样，Bridge 也是一种虚拟网络设备，所以具备虚拟网络设备的所有特性，比如可以配置 IP、MAC 等。</p><p>除此之外，Bridge 还是一个交换机，具有交换机所有的功能。</p><p>对于普通的网络设备，就像一个管道，只有两端，数据从一端进，从另一端出。而 Bridge 有多个端口，数据可以从多个端口进，从多个端口出。</p><p>Bridge 的这个特性让它可以接入其他的网络设备.</p><p>使用 来操作linux Bridge</p><h3 id="安装-brctl"><a href="#安装-brctl" class="headerlink" title="安装 brctl"></a>安装 <code>brctl</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install bridge-utils -y</span><br></pre></td></tr></table></figure><p>我们模拟一个docker0 类似的网桥</p><ol><li>添加网桥(br0)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ brctl addbr br0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一:</span></span><br><span class="line">$ sudo ifconfig br0 192.168.100.1 netmask  255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"></span><br><span class="line">$ sudo ip addr add 192.168.100.0/16 dev bridge0</span><br><span class="line"></span><br><span class="line">$ sudo ip link <span class="built_in">set</span> dev bridge0 up</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>2.查看网桥</p><p>1）显示所有的网桥信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl show</span><br></pre></td></tr></table></figure><p>2）显示某个网桥(br0)的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl show br0</span><br></pre></td></tr></table></figure><p>3.删除网桥(br0)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl delbr br0</span><br></pre></td></tr></table></figure><ol start="4"><li>将eth0端口加入网桥br0</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brctl addif br0 eth0</span><br></pre></td></tr></table></figure><ol start="5"><li>从网桥br0中删除eth0端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brctl delif br0 eth0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;同 tap/tun、veth-pair 一样，Bridge 也是一种虚拟网络设备，所以具备虚拟网络设备的所有特性，比如可以配置 IP、MAC 等。&lt;/p&gt;
&lt;p&gt;除此之外，Bridge 还是一个交换机，具有交换机所有的功能。&lt;/p&gt;
&lt;p&gt;对于普通的网络设备，就像一个管道，</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="network" scheme="http://example.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>如何快速安装zsh</title>
    <link href="http://example.com/2021/03/12/zsh/"/>
    <id>http://example.com/2021/03/12/zsh/</id>
    <published>2021-03-12T06:16:56.000Z</published>
    <updated>2021-08-24T16:25:21.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-安装并配置zsh"><a href="#Linux-安装并配置zsh" class="headerlink" title="Linux 安装并配置zsh"></a>Linux 安装并配置zsh</h2><p>1.1 安装zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y zsh</span><br></pre></td></tr></table></figure><p>1.2 安装oh-my-zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>1.3 安装powerline font字体库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure><p>1.4 打开zsh配置文件 ~/.zshrc，修改主题为agnoster</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="comment"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span></span><br><span class="line">2 <span class="comment"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class="line">3 <span class="comment"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class="line">4 <span class="comment"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line">5 ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-安装并配置zsh&quot;&gt;&lt;a href=&quot;#Linux-安装并配置zsh&quot; class=&quot;headerlink&quot; title=&quot;Linux 安装并配置zsh&quot;&gt;&lt;/a&gt;Linux 安装并配置zsh&lt;/h2&gt;&lt;p&gt;1.1 安装zsh&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何快速安装k8s集群</title>
    <link href="http://example.com/2021/03/12/k8s/install-k8s/"/>
    <id>http://example.com/2021/03/12/k8s/install-k8s/</id>
    <published>2021-03-12T05:13:13.000Z</published>
    <updated>2021-08-24T16:25:21.604Z</updated>
    
    <content type="html"><![CDATA[<p>有时候需要快速搭建一个k8s集群帮组我测试代码的功能，这样可以帮我省去很多时间，把更多的时间都投入到写代码中，我觉得这也是很有必要的。<br>接下来我就讲解如何快速搭建k8s集群。</p><p>首先准备若干个机器，这里我只是举例子 </p><p>我现在准备了 三台机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10.10.13.113 master</span><br><span class="line"></span><br><span class="line">10.10.13.114 node01</span><br><span class="line"></span><br><span class="line">10.10.13.115 node02</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在ansible控制端配置免密码登录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者传统 RSA 算法</span></span><br><span class="line">$ ssh-keygen -t rsa -b 2048 -N <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">$ ssh-copy-id root@<span class="variable">$IPs</span> <span class="comment">#$IPs为所有节点地址包括自身，按照提示输入yes 和root密码</span></span><br><span class="line"></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/Users/clare/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@xxx.xxx.xxx.xxx<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added:        1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>root@xxx.xxx.xxx.xxx<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试是否可以免密登陆</span></span><br><span class="line"></span><br><span class="line">$ ssh root@<span class="variable">$IPs</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.1 安装ansible (也可以使用容器化运行kubeasz，已经预装好ansible)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 注意pip 21.0以后不再支持python2和python3.5，需要如下安装</span></span><br><span class="line"><span class="comment"># To install pip for Python 2.7 install it from https://bootstrap.pypa.io/2.7/ :</span></span><br><span class="line">curl -O https://bootstrap.pypa.io/2.7/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">python -m pip install --upgrade <span class="string">&quot;pip &lt; 21.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip安装ansible(国内如果安装太慢可以直接用pip阿里云加速)</span></span><br><span class="line">pip install ansible -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h3 id="下载工具脚本ezdown"><a href="#下载工具脚本ezdown" class="headerlink" title="下载工具脚本ezdown"></a>下载工具脚本<code>ezdown</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载工具脚本ezdown，举例使用kubeasz版本3.0.0</span></span><br><span class="line">$ <span class="built_in">export</span> release=3.0.0</span><br><span class="line"></span><br><span class="line">$ curl -C- -fLO --retry 3 https://github.com/easzlab/kubeasz/releases/download/<span class="variable">$&#123;release&#125;</span>/ezdown</span><br><span class="line"></span><br><span class="line">$ chmod +x ./ezdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工具脚本下载</span></span><br><span class="line">$ chmod +x ezdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line"><span class="comment"># k 指定kubernetes的版本</span></span><br><span class="line">$ ./ezdown -D -k v1.18.3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.2 创建集群配置实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ezctl new k8s-01</span><br><span class="line">2021-01-19 10:48:23 DEBUG generate custom cluster files <span class="keyword">in</span> /etc/kubeasz/clusters/k8s-01</span><br><span class="line">2021-01-19 10:48:23 DEBUG <span class="built_in">set</span> version of common plugins</span><br><span class="line">2021-01-19 10:48:23 DEBUG cluster k8s-01: files successfully created.</span><br><span class="line">2021-01-19 10:48:23 INFO next steps 1: to config <span class="string">&#x27;/etc/kubeasz/clusters/k8s-01/hosts&#x27;</span></span><br><span class="line">2021-01-19 10:48:23 INFO next steps 2: to config <span class="string">&#x27;/etc/kubeasz/clusters/k8s-01/config.yml&#x27;</span></span><br><span class="line">然后根据提示配置<span class="string">&#x27;/etc/kubeasz/clusters/k8s-01/hosts&#x27;</span> 和 <span class="string">&#x27;/etc/kubeasz/clusters/k8s-01/config.yml&#x27;</span>: 根据前面节点规划修改hosts 文件和其他集群层面的主要配置选项；其他集群组件等配置项可以在config.yml 文件中修改。</span><br></pre></td></tr></table></figure><p>4.3 开始安装 如果你对集群安装流程不熟悉，请阅读项目首页 安装步骤 讲解后分步安装，并对 每步都进行验证</p><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ezctl setup k8s-01 all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者分步安装，具体使用 ezctl help setup 查看分步安装帮助信息</span></span><br><span class="line"><span class="comment"># ezctl setup k8s-01 01</span></span><br><span class="line"><span class="comment"># ezctl setup k8s-01 02</span></span><br><span class="line"><span class="comment"># ezctl setup k8s-01 03</span></span><br><span class="line"><span class="comment"># ezctl setup k8s-01 04</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候需要快速搭建一个k8s集群帮组我测试代码的功能，这样可以帮我省去很多时间，把更多的时间都投入到写代码中，我觉得这也是很有必要的。&lt;br&gt;接下来我就讲解如何快速搭建k8s集群。&lt;/p&gt;
&lt;p&gt;首先准备若干个机器，这里我只是举例子 &lt;/p&gt;
&lt;p&gt;我现在准备了 三台机器&lt;</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>cgroups Linux控制组</title>
    <link href="http://example.com/2021/03/10/linux/cgroups/"/>
    <id>http://example.com/2021/03/10/linux/cgroups/</id>
    <published>2021-03-10T10:06:35.000Z</published>
    <updated>2021-08-24T16:25:21.609Z</updated>
    
    <content type="html"><![CDATA[<p>实话实说,某些软件应用程序可能需要控制或限制-至少出于稳定性和某种程度上的安全性考虑。<br>错误或错误代码常常会破坏整个计算机,并可能破坏整个生态系统。<br>幸运的是,有一种方法可以检查那些相同的应用程序。<br>控制组（cgroups）是一项内核功能,可以限制,说明和隔离一个或多个进程的CPU,内存,磁盘I / O和网络使用情况。</p><p>cgroups框架提供以下内容：</p><p>资源限制： 可以将组配置为不超过指定的内存限制或使用的处理器数量不超过期望的数量,或者限制为特定的外围设备。<br>优先级： 可以将一个或多个组配置为利用更少或更多的CPU或磁盘 I/O 吞吐量。<br>监控： 监视和衡量组的资源使用情况。<br>控制： 可以冻结或停止并重新启动一组进程。</p><p>一个<code>cgroup</code>可以包含一个或多个绑定到同一组限制的进程。这些组也可以是分层的,这意味着子组继承了对其父组管理的限制。</p><p>Linux内核提供对cgroup技术的一系列控制器或子系统的访问。控制器负责将特定类型的系统资源分配给一组一个或多个进程。<br>例如,memory控制器是在cpuacct监视CPU使用率时限制内存使用率的。</p><p>您可以直接和间接（使用LXC,libvirt或Docker）访问和管理cgroup,在此我将首先通过sysfs和libcgroups库来介绍和管理cgroup 。<br>要遵循此处的示例,您首先需要安装必要的软件包。在Red Hat Enterprise Linux或CentOS上,在命令行上键入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">blkio：设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及usb等等。</span><br><span class="line">cpu：使用调度程序为cgroup任务提供cpu的访问。</span><br><span class="line">cpuacct：产生cgroup任务的cpu资源报告。</span><br><span class="line">cpuset：如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存。</span><br><span class="line">devices：允许或拒绝cgroup任务对设备的访问。</span><br><span class="line">freezer：暂停和恢复cgroup任务。</span><br><span class="line">memory：设置每个cgroup的内存限制以及产生内存资源报告。</span><br><span class="line">net_cls：标记每个网络包以供cgroup方便使用。</span><br><span class="line">ns：命名空间子系统。</span><br><span class="line">perf_event：增加了对每group的监测跟踪的能力，即可以监测属于某个特定的group的所有线程以及运行在特定CPU上的线程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cgroups-对内存的限制"><a href="#cgroups-对内存的限制" class="headerlink" title="cgroups 对内存的限制"></a>cgroups 对内存的限制</h2><h3 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h3><p>安装了正确的软件包后，您可以直接通过sysfs层次结构配置cgroup。例如，要foo在memory子系统下创建一个名为cgroup 的目录，请在/ sys / fs / cgroup / memory中创建一个名为foo的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /sys/fs/cgroup/memory/foo</span><br></pre></td></tr></table></figure><p>默认情况下，每个新创建的cgroup都将继承对系统整个内存池的访问权限。对于某些应用程序，主要是那些继续分配更多内存但拒绝释放已经分配的内存的应用程序，可能不是一个好主意。要将应用程序限制在合理的范围内，您需要更新 memory.limit_in_bytes文件。</p><p>将在cgroup下运行的任何内容的内存限制foo为50MB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 50000000 | sudo tee /sys/fs/cgroup/memory/foo/memory.limit_in_bytes</span><br></pre></td></tr></table></figure><p>验证设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat memory.limit_in_bytes</span><br><span class="line">50003968</span><br></pre></td></tr></table></figure><p>请注意，回读的值始终是内核页面大小的倍数（即4096字节或4KB）。该值是最小的可分配内存大小。</p><p>启动应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh ~/test.sh &amp;</span><br></pre></td></tr></table></figure><p>使用其进程ID（PID），将应用程序移动到控制器foo下的 cgroup memory：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 2845 &gt; /sys/fs/cgroup/memory/foo/cgroup.procs</span><br></pre></td></tr></table></figure><p>使用相同的PID编号，列出正在运行的进程并验证其是否在所需的cgroup中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -o cgroup 2845</span><br><span class="line">CGROUP</span><br><span class="line">8:memory:/foo,1:name=systemd:/user.slice/user-0.slice/session-4.scope</span><br></pre></td></tr></table></figure><p>您还可以通过读取所需的文件来监视该cgroup当前正在使用的内容。在这种情况下，您将需要查看由您的进程（和产生的子进程）分配的内存量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /sys/fs/cgroup/memory/foo/memory.usage_in_bytes</span><br><span class="line">253952</span><br></pre></td></tr></table></figure><h3 id="当我改变limit"><a href="#当我改变limit" class="headerlink" title="当我改变limit"></a>当我改变limit</h3><p>现在，让我们重新创建相同的场景，但不要将cgroup限制 foo为50MB内存，而是将其限制为500个字节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 500 | sudo tee /sys/fs/cgroup/memory/foo/memory.limit_in_bytes</span><br></pre></td></tr></table></figure><p>注意：如果一项任务超出其定义的限制，内核将进行干预，在某些情况下，将终止该任务。</p><p>同样，当您读回该值时，该值将始终是内核页面大小的倍数。因此，尽管将其设置为500字节，但实际上设置为4 KB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /sys/fs/cgroup/memory/foo/memory.limit_in_bytes</span><br><span class="line">4096</span><br></pre></td></tr></table></figure><p>启动应用程序，将其移至cgroup并监视系统日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo tail -f /var/<span class="built_in">log</span>/messages</span><br><span class="line"></span><br><span class="line">Oct 14 10:22:40 localhost kernel: sh invoked oom-killer:</span><br><span class="line">↪gfp_mask=0xd0, order=0, oom_score_adj=0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: sh cpuset=/ mems_allowed=0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: CPU: 0 PID: 2687 Comm:</span><br><span class="line">↪sh Tainted: G</span><br><span class="line">OE  ------------   3.10.0-327.36.3.el7.x86_64 <span class="comment">#1</span></span><br><span class="line">Oct 14 10:22:40 localhost kernel: Hardware name: innotek GmbH</span><br><span class="line">VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006</span><br><span class="line">Oct 14 10:22:40 localhost kernel: ffff880036ea5c00</span><br><span class="line">↪0000000093314010 ffff88000002bcd0 ffffffff81636431</span><br><span class="line">Oct 14 10:22:40 localhost kernel: ffff88000002bd60</span><br><span class="line">↪ffffffff816313cc 01018800000000d0 ffff88000002bd68</span><br><span class="line">Oct 14 10:22:40 localhost kernel: ffffffffbc35e040</span><br><span class="line">↪fffeefff00000000 0000000000000001 ffff880036ea6103</span><br><span class="line">Oct 14 10:22:40 localhost kernel: Call Trace:</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff81636431&gt;]</span><br><span class="line">↪dump_stack+0x19/0x1b</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff816313cc&gt;]</span><br><span class="line">↪dump_header+0x8e/0x214</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff8116d21e&gt;]</span><br><span class="line">↪oom_kill_process+0x24e/0x3b0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff81088e4e&gt;] ?</span><br><span class="line">↪has_capability_noaudit+0x1e/0x30</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff811d4285&gt;]</span><br><span class="line">↪mem_cgroup_oom_synchronize+0x575/0x5a0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff811d3650&gt;] ?</span><br><span class="line">↪mem_cgroup_charge_common+0xc0/0xc0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff8116da94&gt;]</span><br><span class="line">↪pagefault_out_of_memory+0x14/0x90</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff8162f815&gt;]</span><br><span class="line">↪mm_fault_error+0x68/0x12b</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff816422d2&gt;]</span><br><span class="line">↪__do_page_fault+0x3e2/0x450</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff81642363&gt;]</span><br><span class="line">↪do_page_fault+0x23/0x80</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [&lt;ffffffff8163e648&gt;]</span><br><span class="line">↪page_fault+0x28/0x30</span><br><span class="line">Oct 14 10:22:40 localhost kernel: Task <span class="keyword">in</span> /foo killed as</span><br><span class="line">↪a result of <span class="built_in">limit</span> of /foo</span><br><span class="line">Oct 14 10:22:40 localhost kernel: memory: usage 4kB, <span class="built_in">limit</span></span><br><span class="line">↪4kB, failcnt 8</span><br><span class="line">Oct 14 10:22:40 localhost kernel: memory+swap: usage 4kB,</span><br><span class="line">↪<span class="built_in">limit</span> 9007199254740991kB, failcnt 0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: kmem: usage 0kB, <span class="built_in">limit</span></span><br><span class="line">↪9007199254740991kB, failcnt 0</span><br><span class="line">Oct 14 10:22:40 localhost kernel: Memory cgroup stats <span class="keyword">for</span> /foo:</span><br><span class="line">↪cache:0KB rss:4KB rss_huge:0KB mapped_file:0KB swap:0KB</span><br><span class="line">↪inactive_anon:0KB active_anon:0KB inactive_file:0KB</span><br><span class="line">↪active_file:0KB unevictable:0KB</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [ pid ]   uid  tgid total_vm</span><br><span class="line">↪rss nr_ptes swapents oom_score_adj name</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [ 2687]     0  2687    28281</span><br><span class="line">↪347     12        0             0 sh</span><br><span class="line">Oct 14 10:22:40 localhost kernel: [ 2702]     0  2702    28281</span><br><span class="line">↪50    7        0             0 sh</span><br><span class="line">Oct 14 10:22:40 localhost kernel: Memory cgroup out of memory:</span><br><span class="line">↪Kill process 2687 (sh) score 0 or sacrifice child</span><br><span class="line">Oct 14 10:22:40 localhost kernel: Killed process 2702 (sh)</span><br><span class="line">↪total-vm:113124kB, anon-rss:200kB, file-rss:0kB</span><br><span class="line">Oct 14 10:22:41 localhost kernel: sh invoked oom-killer:</span><br><span class="line">↪gfp_mask=0xd0, order=0, oom_score_adj=0</span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure><p>请注意，一旦应用程序达到4KB的限制，内核的“内存不足杀手”（或oom-killer）就会介入。它终止了该应用程序，并且不再运行。您可以通过键入以下内容进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ps -o cgroup 2687</span><br><span class="line">CGROUP</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用libcgroup"><a href="#使用libcgroup" class="headerlink" title="使用libcgroup"></a>使用<code>libcgroup</code></h2><p>libcgroup软件包中 提供的管理实用程序简化了此处描述的许多早期步骤。例如，使用cgcreate二进制文件的单个命令调用将负责创建sysfs条目和文件的过程。</p><p>要创建在 子系统foo下命名的组memory，请键入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cgcreate -g memory:foo</span><br></pre></td></tr></table></figure><p>注意：libcgroup提供了一种用于管理控制组中的任务的机制。</p><p>使用与以前相同的方法，您可以开始设置阈值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 50000000 | sudo tee</span><br><span class="line">↪/sys/fs/cgroup/memory/foo/memory.limit_in_bytes</span><br></pre></td></tr></table></figure><p>验证新配置的设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat memory.limit_in_bytes</span><br><span class="line">50003968</span><br></pre></td></tr></table></figure><p>foo使用 cgexec二进制文件 在cgroup中运行应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cgexec -g memory:foo ~/test.sh</span><br></pre></td></tr></table></figure><p>使用其PID编号，验证应用程序正在cgroup中并在已定义的子系统（memory）下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$  ps -o cgroup 2945</span><br><span class="line">CGROUP</span><br><span class="line">6:memory:/foo,1:name=systemd:/user.slice/user-0.slice/</span><br><span class="line">↪session-1.scope</span><br></pre></td></tr></table></figure><p>如果您的应用程序不再运行，并且您想要清理并删除cgroup，则可以使用cgdelete二进制文件来完成。要从控制器foo 下面删除组memory，请键入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cgdelete memory:foo</span><br></pre></td></tr></table></figure><p>持久群体<br>您还可以通过一个简单的配置文件和启动服务来完成上述所有操作。您可以在/etc/cgconfig.conf文件中定义所有cgroup名称和属性。以下内容为该组添加了一些属性foo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cat /etc/cgconfig.conf</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Copyright IBM Corporation. 2007</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Authors:     Balbir Singh &lt;balbir@linux.vnet.ibm.com&gt;</span></span><br><span class="line"><span class="comment">#  This program is free software; you can redistribute it</span></span><br><span class="line"><span class="comment">#  and/or modify it under the terms of version 2.1 of the GNU</span></span><br><span class="line"><span class="comment">#  Lesser General Public License as published by the Free</span></span><br><span class="line"><span class="comment">#  Software Foundation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  This program is distributed in the hope that it would be</span></span><br><span class="line"><span class="comment">#  useful, but WITHOUT ANY WARRANTY; without even the implied</span></span><br><span class="line"><span class="comment">#  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR</span></span><br><span class="line"><span class="comment">#  PURPOSE.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default, we expect systemd mounts everything on boot,</span></span><br><span class="line"><span class="comment"># so there is not much to do.</span></span><br><span class="line"><span class="comment"># See man cgconfig.conf for further details, how to create</span></span><br><span class="line"><span class="comment"># groups on system boot using this file.</span></span><br><span class="line"></span><br><span class="line">group foo &#123;</span><br><span class="line">cpu &#123;</span><br><span class="line">cpu.shares = 100;</span><br><span class="line">&#125;</span><br><span class="line">memory &#123;</span><br><span class="line">memory.limit_in_bytes = 5000000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些cpu.shares选项定义组的CPU优先级。默认情况下，所有组都继承1,024个份额或100％的CPU时间。通过将此值降低到较为保守的程度（例如100），该组将被限制为大约CPU时间的10％。</p><p>如前所述，在cgroup中运行的进程也可以限制为它可以访问的CPU（核心）数量。将以下部分添加到相同的cgconfig.conf文件中，并在所需的组名称下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cpuset &#123;</span><br><span class="line">cpuset.cpus=<span class="string">&quot;0-5&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了这个限制，此cgroup会将应用程序绑定到核心0到5-也就是说，它将仅看到系统上的前六个CPU核心。</p><p>接下来，您需要使用该cgconfig服务加载此配置。首先，启用cgconfig以在系统启动时加载以上配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> cgconfig</span><br><span class="line">Create symlink from /etc/systemd/system/sysinit.target.wants/</span><br><span class="line">↪cgconfig.service</span><br><span class="line">to /usr/lib/systemd/system/cgconfig.service.</span><br></pre></td></tr></table></figure><p>现在，启动cgconfig服务并手动加载相同的配置文件（或者您可以跳过此步骤并重新引导系统）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start cgconfig</span><br></pre></td></tr></table></figure><p>将应用程序启动到cgroup中，foo并将其绑定到您的 memory和cpu 限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cgexec -g memory,cpu,cpuset:foo ~/test.sh &amp;</span><br></pre></td></tr></table></figure><p>除了将应用程序启动到预定义的cgroup中之外，其余所有内容将在系统重新引导后继续存在。但是，您可以通过定义依赖于cgconfig 服务的启动初始化脚本来启动该应用程序，从而自动执行该过程 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实话实说,某些软件应用程序可能需要控制或限制-至少出于稳定性和某种程度上的安全性考虑。&lt;br&gt;错误或错误代码常常会破坏整个计算机,并可能破坏整个生态系统。&lt;br&gt;幸运的是,有一种方法可以检查那些相同的应用程序。&lt;br&gt;控制组（cgroups）是一项内核功能,可以限制,说明和</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="kernal" scheme="http://example.com/tags/kernal/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命名空间概述</title>
    <link href="http://example.com/2021/03/10/linux/namespace/"/>
    <id>http://example.com/2021/03/10/linux/namespace/</id>
    <published>2021-03-10T09:12:47.000Z</published>
    <updated>2021-08-24T16:25:21.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="namespace-的概念"><a href="#namespace-的概念" class="headerlink" title="namespace 的概念"></a>namespace 的概念</h2><p>namespace 是 Linux 内核用来隔离内核资源的方式。<br>通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。<br>具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。</p><h2 id="namespace-的比喻"><a href="#namespace-的比喻" class="headerlink" title="namespace 的比喻"></a>namespace 的比喻</h2><p>对于某些人来说，namespace这个定义有很多不能让人理解的地方，因此以下这种比方可能会对你有所帮助。<br>考虑一下我的公寓楼。从技术上讲，这是两座不同的建筑，都有自己的入口。<br>但是，停车场，健身房，游泳池和公共休息室是共享的。这些建筑物有自己的名称，城市广场和城市广场2。<br>他们有自己的街道地址，楼层和电梯。然而，它们依附于相同的物理复合体。</p><p>物理复合体与计算机的想法相同。两个名称空间（或多个名称空间）可以驻留在同一台物理计算机上，<br>并且与公寓楼一样，名称空间可以共享对某些资源的访问权限，也可以具有独占访问权限。</p><p>今天，有七种常见的名称空间被广泛使用。<br>以公寓为指导，让我们逐步总结每种类型的功能。<br>下面是每种名称空间类型的简要概述。在后续文章中，我们将通过示例展示每个命名空间的工作方式。</p><h2 id="namespace-的类型有哪些"><a href="#namespace-的类型有哪些" class="headerlink" title="namespace 的类型有哪些"></a>namespace 的类型有哪些</h2><ul><li>进程隔离（PID名称空间）</li><li>网络接口（网络名称空间）</li></ul><ul><li>Unix时间共享系统（uts名称空间）</li><li>用户名称空间</li><li>挂载（mnt名称空间）</li><li>进程间通信（IPC）</li><li>CGroups</li></ul><h2 id="linux-网络命名空间"><a href="#linux-网络命名空间" class="headerlink" title="linux 网络命名空间"></a>linux 网络命名空间</h2><ol><li>ip netns add xx 建立一個 namespace</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ip netns add net1</span><br><span class="line">$ ip netns ls</span><br><span class="line">net1</span><br></pre></td></tr></table></figure><ol start="2"><li>ip netns exec <netns namespace> <BASH shell> 在新 namespace net1 中執行 BASH SHELL 命令</BASH></netns></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> net1 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit 退出容器空间</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/linux/namespace/img.png" alt="img.png"></p><p>每個 namespace 在建立的時候會自動建立一個迴環介面 lo ，預設不啟用，可以通過  啟用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip link <span class="built_in">set</span> lo up</span><br></pre></td></tr></table></figure><p>network namespace 之間的通訊<br>新建立的 namespace 預設不能和主機網路，以及其他 namespace 通訊。</p><p>可以使用 Linux 提供的 veth pair 來完成通訊。下面顯示兩個 namespace 之间的网络拓扑图：</p><p><img src="/2021/03/10/linux/namespace/img_2.png" alt="img_2.png"></p><p>3.1 ip link add type veth 建立 veth pair</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看veth</span></span><br><span class="line"></span><br><span class="line">$ ip link</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:a9:e9:17 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    link/ether 02:42:8b:f3:61:ac brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>添加 link veth pair</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 veth pair</span></span><br><span class="line"></span><br><span class="line">$ ip link add <span class="built_in">type</span> veth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令 ip link add xxx type veth peer name yyy 指定 veth pair 的名字。</span></span><br><span class="line"></span><br><span class="line">$ ip link add veth1 <span class="built_in">type</span> veth peer name veth2</span><br><span class="line"></span><br><span class="line">$ ip link</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:a9:e9:17 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    link/ether 02:42:8b:f3:61:ac brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: veth2@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 6e:86:2f:10:5c:50 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">9: veth1@veth2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 0a:b8:54:5b:9f:7d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line">veth pair 因为是成对出现的 所以 有8和9 </span><br><span class="line"></span><br><span class="line">分别是`veth1@veth2` -- `veth2@veth1` </span><br></pre></td></tr></table></figure><p>3.2 ip link set xx netns yy 將 veth xx 加入到 namespace yy 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ip link <span class="built_in">set</span> veth1 netns net1</span><br><span class="line"></span><br><span class="line">$ ip link <span class="built_in">set</span> veth2 netns net2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加入到namespace 有以下现象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ip link</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:a9:e9:17 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    link/ether 02:42:8b:f3:61:ac brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: veth2@if9: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 6e:86:2f:10:5c:50 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    </span><br><span class="line">$ ip link <span class="built_in">set</span> veth2 netns net2</span><br><span class="line"></span><br><span class="line">$ ip link</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:a9:e9:17 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    link/ether 02:42:8b:f3:61:ac brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>3.3 給 veth pair 配上 ip 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给net0 namespace 空间 veth0 up</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> net1 ip link <span class="built_in">set</span> veth1 up</span><br><span class="line"></span><br><span class="line">$ ip addr add 10.1.1.1/24 dev veth1</span><br><span class="line"><span class="comment"># veth0 up 设置ip 启动起来</span></span><br><span class="line"></span><br><span class="line">$ ip route</span><br><span class="line">10.1.1.0/24 dev veth1 proto kernel scope link src 10.1.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给net2 namespace 空间 veth2 up</span></span><br><span class="line"></span><br><span class="line">$ ip addr add 10.1.1.2/24 dev veth2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/linux/namespace/img_3.png" alt="img_3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;namespace-的概念&quot;&gt;&lt;a href=&quot;#namespace-的概念&quot; class=&quot;headerlink&quot; title=&quot;namespace 的概念&quot;&gt;&lt;/a&gt;namespace 的概念&lt;/h2&gt;&lt;p&gt;namespace 是 Linux 内核用来隔离内核</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="kernal" scheme="http://example.com/tags/kernal/"/>
    
  </entry>
  
  <entry>
    <title>iptables 详解</title>
    <link href="http://example.com/2021/03/09/analysis/"/>
    <id>http://example.com/2021/03/09/analysis/</id>
    <published>2021-03-09T11:03:03.000Z</published>
    <updated>2021-08-24T16:25:21.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iptables-详解"><a href="#iptables-详解" class="headerlink" title="iptables 详解"></a>iptables 详解</h1><p>iptables其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的”安全框架”中，这个”安全框架”才是真正的防火墙，这个框架的名字叫netfilter</p><p>netfilter才是防火墙真正的安全框架（framework），netfilter位于内核空间。</p><p>iptables其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p><p>iptables 的表（tables） 和链（chains）<br>描述完iptables术语后、相信大家对iptables的表和链有了初步的了解了、默认情况下。Iptables，根据功能和表的定义划分、最常用的有三个表，分别是filter,nat mangle.其中每个表又有各自包含不同的操作链（chains）</p><p><img src="/2021/03/09/analysis/iptables.png"></p><h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h4><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。</p><p>此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：</p><ul><li><p><code>ACCEPT</code>：允许数据包通过。</p></li><li><p><code>DROP</code>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</p></li><li><p><code>REJECT</code>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</p></li><li><p><code>SNAT</code>：源地址转换，解决内网用户用同一个公网地址上网的问题。</p></li><li><p><code>MASQUERADE</code>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</p></li><li><p><code>DNAT</code>：目标地址转换。</p></li><li><p><code>REDIRECT</code>：在本机做端口映射。</p></li><li><p><code>LOG</code>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p></li></ul><h3 id="iptables具有以下4个内置表"><a href="#iptables具有以下4个内置表" class="headerlink" title="iptables具有以下4个内置表"></a>iptables具有以下4个内置表</h3><h4 id="1-Filter"><a href="#1-Filter" class="headerlink" title="1. Filter"></a>1. Filter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Filter表</span><br><span class="line"></span><br><span class="line">和主机自身相关、负责防火墙（过滤本机流入、流出数据包）。</span><br><span class="line"></span><br><span class="line">是iptables默认使用的表、这个表定义了三个链（chains）说明如下</span><br><span class="line"></span><br><span class="line">INPUT  负责过滤所有目标地址是主机（防火墙）地址的数据包、通俗的讲、就是过滤进入主机的数据包。</span><br><span class="line"></span><br><span class="line">FORWARD  负责转发流经主机但不进入本机的数据包、起转发作用、和NAT表关系很大、后面会详细介绍</span><br><span class="line"></span><br><span class="line">OUTPUT  处理所有原地址是本机地址的数据包、通俗的讲就是处理从主机发出去的数据包。</span><br></pre></td></tr></table></figure><h4 id="2-NAT表"><a href="#2-NAT表" class="headerlink" title="2. NAT表"></a>2. NAT表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NAT表</span><br><span class="line"></span><br><span class="line">是网络地址转换的意思。即负责来源与目的IP地址和port的转换、和主机本身无关。一般用于局域网多人共享上网或者内网IP映射外网IP及不同端口转换服务等功能。Nat表的功能很重要、这个表定义了三个链（chains）</span><br><span class="line"></span><br><span class="line">OUTPUT</span><br><span class="line"></span><br><span class="line">主机发出去的数据包有关、在数据包路由之前改变主机产生的数据包的目的地址等。</span><br><span class="line"></span><br><span class="line">PREROUTING</span><br><span class="line"></span><br><span class="line">在数据包刚到达防火墙时、进行路由判断之前执行的规则、改变包的目的地址（DNAT功能）、端口等（通俗比喻，就是收信时、根据规则重写收件人的地址、这看上去不地道啊、）把公司IP映射到局域网的机器上、此链多用于把外部IP地址端口的服务、映射为内部IP地址及端口</span><br><span class="line"></span><br><span class="line">POSTROUTING</span><br><span class="line"></span><br><span class="line">在数据包离开防火墙时进行路由判断之后执行的规则、改变包的源地址（SNAT）、端口等（通俗比喻、就是寄信时写好发件人的地址、要让人家回信是能够有地址可回）刺链多用于局域网共享上网，把所有局域网的地址、转换为公网地址上</span><br></pre></td></tr></table></figure><h4 id="3-Mangle"><a href="#3-Mangle" class="headerlink" title="3. Mangle"></a>3. Mangle</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Mangle</span><br><span class="line"></span><br><span class="line">主要负责修改数据包中特殊的路由标记，如TTL、TOS、MARK等、这个表定义了5个链（chains）</span><br><span class="line"></span><br><span class="line">INPUT</span><br><span class="line"></span><br><span class="line">同filter表的INPUT</span><br><span class="line"></span><br><span class="line">FORWARD</span><br><span class="line"></span><br><span class="line">同filter表的FORWARD</span><br><span class="line"></span><br><span class="line">OUTPUT  同fileter表的OUTPUT</span><br><span class="line"></span><br><span class="line">PREROUTING  同nat表的PREROUTING</span><br><span class="line"></span><br><span class="line">POSTOUTING  同nat表的POSTOUTING</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-Raw"><a href="#4-Raw" class="headerlink" title="4. Raw"></a>4. Raw</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后面在说</p><h3 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-t：指定要操纵的表； `table`</span><br><span class="line"></span><br><span class="line">-A：向规则链中添加条目；`Append`</span><br><span class="line"></span><br><span class="line">-D：从规则链中删除条目； `delete`</span><br><span class="line"></span><br><span class="line">-I：向规则链中插入条目；`insert`</span><br><span class="line"></span><br><span class="line">-R：替换规则链中的条目；`replace`</span><br><span class="line"></span><br><span class="line">-L：显示规则链中已有的条目；``</span><br><span class="line"></span><br><span class="line">-F：清除规则链中已有的条目；`flush`</span><br><span class="line"></span><br><span class="line">-Z：清空规则链中的数据包计算器和字节计数器；</span><br><span class="line"></span><br><span class="line">-N：创建新的用户自定义规则链；</span><br><span class="line"></span><br><span class="line">-P：定义规则链中的默认目标；`policy`</span><br><span class="line"></span><br><span class="line">-h：显示帮助信息；`<span class="built_in">help</span>`</span><br><span class="line"></span><br><span class="line">-p：指定要匹配的数据包协议类型；`protoprotocol: by number or name, eg. tcp`</span><br><span class="line"></span><br><span class="line">-s：指定要匹配的数据包源ip地址；`<span class="built_in">source</span>`</span><br><span class="line"></span><br><span class="line">-d：指定要匹配的数据包目标ip地址；`destination`</span><br><span class="line"></span><br><span class="line">-j：指定要跳转的目标；`jump`</span><br><span class="line"></span><br><span class="line">-i：指定数据包进入本机的网络接口（网卡）；`input`</span><br><span class="line"></span><br><span class="line">-o：指定数据包离开本机的网络接口（网卡）；`onput`</span><br><span class="line"></span><br><span class="line">--sport：匹配来源端口号；`<span class="built_in">source</span> port`</span><br><span class="line"></span><br><span class="line">--dport：匹配目标端口号。`destination port`</span><br><span class="line"></span><br><span class="line">下述规则允许端口80上的传入HTTP通信。</span><br></pre></td></tr></table></figure><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ iptables -A INPUT -i eth1 -p tcp --dport 80 -d 1.2.3.4 -j ACCEPT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-A 表示我们正在添加新规则。缺省情况下，除非您指定另一个表，否则iptables会将所有新规则添加到 Filter 表中。</p><p>-i 标志指定将规则应用到的设备。如果您未指定设备，则iptables会将规则应用于所有传入流量，而与设备无关。</p><p>-p 标志指定要处理的数据包协议，在本例中为TCP。</p><p>–dport 标志指定目标端口，该端口为80。</p><p>-d 指定目标IP地址，即1.2.3.4。如果未指定目标IP地址，则该规则将适用于eth1上的所有传入流量，而不管IP地址如何。</p><p>-j 指定要执行的操作或JUMP操作。在这里，我们使用接受策略来接受数据包。</p><p>开放端口指定插入第几行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --line-number 展示行号</span></span><br><span class="line">$ iptables -nL  --line-number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第四行插入iptables</span></span><br><span class="line">$ iptables -I INPUT 4 -p tcp --dport 1234 -j ACCEPT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>禁止所有INPUT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -P INPUT DROP</span><br><span class="line">$ iptables -P OUTPUT DROP</span><br></pre></td></tr></table></figure><p>我现在用一个测试软件来测试连通性</p><h3 id="四、nc搭建简单内网聊天室"><a href="#四、nc搭建简单内网聊天室" class="headerlink" title="四、nc搭建简单内网聊天室"></a>四、nc搭建简单内网聊天室</h3><p>本机-本机 ， 单台机器开了两个shell窗口，当一个窗口输入消息时，另一个窗口也会同步显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -v -lp 8080</span><br></pre></td></tr></table></figure><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ ncat -v -lp 8080</span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::8080</span><br><span class="line">Ncat: Listening on 0.0.0.0:8080</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:45996.</span><br><span class="line">xxx</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ nc -v 127.0.0.1 8080</span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to 127.0.0.1:8080.</span><br><span class="line">xxx</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><h3 id="NAT-作用及使用"><a href="#NAT-作用及使用" class="headerlink" title="NAT 作用及使用"></a>NAT 作用及使用</h3><p>我们现在讲一下nat表主要的作用</p><p>端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 将 8080 转发到80 端口上面</span></span><br><span class="line"></span><br><span class="line"> $  iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDERECT --to-ports 8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果防火墙默认是关闭的状态</span></span><br><span class="line"></span><br><span class="line">则需要设置以下规则</span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -p tcp --dport 8000 -j ACCEPT</span><br><span class="line"></span><br><span class="line">$ iptables -A OUTPUT -p tcp --sport 8000 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="流量转发"><a href="#流量转发" class="headerlink" title="流量转发"></a>流量转发</h4><h5 id="将流量转发到服务器上面"><a href="#将流量转发到服务器上面" class="headerlink" title="将流量转发到服务器上面"></a>将流量转发到服务器上面</h5><p>在 10.10.13.111 上 设置 将 对 10.10.13.111的请求转发到10.10.13.110 并实现 逆转,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -p tcp --dport 8001 -d 10.10.13.111 -j DNAT --to-destination 10.10.13.110</span><br><span class="line"></span><br><span class="line">iptables -t nat -I POSTROUTING -p tcp --dport 8001 -d 10.10.13.110 -j SNAT --to-destination 10.10.13.111</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;iptables-详解&quot;&gt;&lt;a href=&quot;#iptables-详解&quot; class=&quot;headerlink&quot; title=&quot;iptables 详解&quot;&gt;&lt;/a&gt;iptables 详解&lt;/h1&gt;&lt;p&gt;iptables其实不是真正的防火墙，我们可以把它理解成一个客户端代</summary>
      
    
    
    
    
    <category term="iptables" scheme="http://example.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>kiali 源码解析</title>
    <link href="http://example.com/2021/01/21/k8s/kiali/"/>
    <id>http://example.com/2021/01/21/k8s/kiali/</id>
    <published>2021-01-21T10:36:28.000Z</published>
    <updated>2021-08-24T16:25:21.608Z</updated>
    
    <content type="html"><![CDATA[<p>kiali 源码解析</p><p>前言: </p><p>Kiali是用于基于Istio的服务网格的管理控制台。它提供仪表板，可观察性，并允许您使用强大的配置和验证功能来操作网格。它通过推断流量拓扑来显示服务网格的结构，并显示网格的运行状况。Kiali提供了详细的指标，强大的验证，Grafana访问以及与Jaeger进行分布式跟踪的强大集成。</p><p>以下就是kiali的流量试图 界面</p><p><img src="https://kiali.io/images/documentation/features/graph-health-v1.22.0.png" alt="kiali"></p><p>Kiali是用于基于Istio的服务网格的管理控制台 所以得使用istio来安装kiali插件</p><p>如何istio 来安装kiali</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl manifest apply --<span class="built_in">set</span> values.kiali.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>kiali 的默认 用户名与密码是 admin/admin</p><h2 id="kiali-流量试图"><a href="#kiali-流量试图" class="headerlink" title="kiali 流量试图"></a>kiali 流量试图</h2><h3 id="kiali-route-路由"><a href="#kiali-route-路由" class="headerlink" title="kiali route 路由"></a>kiali route 路由</h3><p>routing/router</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根路由 指向 静态页面</span></span><br><span class="line"><span class="keyword">if</span> webRoot != <span class="string">&quot;/&quot;</span> &#123;</span><br><span class="line">rootRouter.HandleFunc(webRoot, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">http.Redirect(w, r, webRootWithSlash, http.StatusFound)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// help the user out - if a request comes in for &quot;/&quot;, redirect to our true webroot</span></span><br><span class="line">rootRouter.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">http.Redirect(w, r, webRootWithSlash, http.StatusFound)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">appRouter = rootRouter.PathPrefix(conf.Server.WebRoot).Subrouter()</span><br><span class="line">&#125;</span><br><span class="line">appRouter = appRouter.StrictSlash(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由指向代理的function </span></span><br><span class="line">r.Routes = []Route&#123;</span><br><span class="line"><span class="comment">// swagger:route GET /healthz kiali healthz</span></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"><span class="comment">// Endpoint to get the health of Kiali</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     Produces:</span></span><br><span class="line"><span class="comment">//     - application/json</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     Schemes: http, https</span></span><br><span class="line"><span class="comment">// responses:</span></span><br><span class="line"><span class="comment">//500: internalError</span></span><br><span class="line"><span class="comment">//200</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;Healthz&quot;</span>,</span><br><span class="line"><span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="string">&quot;/healthz&quot;</span>,</span><br><span class="line">handlers.Healthz,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// swagger:route GET / kiali root</span></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"><span class="comment">// Endpoint to get the status of Kiali</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     Produces:</span></span><br><span class="line"><span class="comment">//     - application/json</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     Schemes: http, https</span></span><br><span class="line"><span class="comment">// responses:</span></span><br><span class="line"><span class="comment">//      500: internalError</span></span><br><span class="line"><span class="comment">//      200: statusInfo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;Root&quot;</span>,</span><br><span class="line"><span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="string">&quot;/api&quot;</span>,</span><br><span class="line">handlers.Root,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kiali里面最复杂的就是流量视图了 现在我们看看kiali是怎么做的</p><p>/graph/api/api</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GraphNamespaces</span><span class="params">(business *business.Layer, o graph.Options)</span> <span class="params">(code <span class="keyword">int</span>, config <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// time how long it takes to generate this graph</span></span><br><span class="line">promtimer := internalmetrics.GetGraphGenerationTimePrometheusTimer(o.GetGraphKind(), o.TelemetryOptions.GraphType, o.InjectServiceNodes)</span><br><span class="line"><span class="keyword">defer</span> promtimer.ObserveDuration()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> o.TelemetryVendor &#123;</span><br><span class="line"><span class="keyword">case</span> graph.VendorIstio:</span><br><span class="line">prom, err := prometheus.NewClientNoAuth(business.PromAddress)</span><br><span class="line">graph.CheckError(err)</span><br><span class="line"><span class="comment">//获取config 蓝图信息</span></span><br><span class="line">code, config = graphNamespacesIstio(business, prom, o)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">graph.Error(fmt.Sprintf(<span class="string">&quot;TelemetryVendor [%s] not supported&quot;</span>, o.TelemetryVendor))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update metrics</span></span><br><span class="line">internalmetrics.SetGraphNodes(o.GetGraphKind(), o.TelemetryOptions.GraphType, o.InjectServiceNodes, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> code, config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造 TrafficMap</p><p>graph/telemetry/istio/istio.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BuildNamespacesTrafficMap is required by the graph/TelemtryVendor interface</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildNamespacesTrafficMap</span><span class="params">(o graph.TelemetryOptions, client *prometheus.Client, globalInfo *graph.AppenderGlobalInfo)</span> <span class="title">graph</span>.<span class="title">TrafficMap</span></span> &#123;</span><br><span class="line">log.Tracef(<span class="string">&quot;Build [%s] graph for [%v] namespaces [%s]&quot;</span>, o.GraphType, <span class="built_in">len</span>(o.Namespaces), o.Namespaces)</span><br><span class="line"></span><br><span class="line">setLabels()</span><br><span class="line">appenders := appender.ParseAppenders(o)</span><br><span class="line">trafficMap := graph.NewTrafficMap()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, namespace := <span class="keyword">range</span> o.Namespaces &#123;</span><br><span class="line">log.Tracef(<span class="string">&quot;Build traffic map for namespace [%s]&quot;</span>, namespace)</span><br><span class="line"><span class="comment">//生成一个 namespaceTrafficMap</span></span><br><span class="line">namespaceTrafficMap := buildNamespaceTrafficMap(namespace.Name, o, client)</span><br><span class="line">namespaceInfo := graph.NewAppenderNamespaceInfo(namespace.Name)</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> appenders &#123;</span><br><span class="line">appenderTimer := internalmetrics.GetGraphAppenderTimePrometheusTimer(a.Name())</span><br><span class="line">a.AppendGraph(namespaceTrafficMap, globalInfo, namespaceInfo)</span><br><span class="line">appenderTimer.ObserveDuration()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 namespaceTrafficMap merge ----&gt;  trafficMap 中</span></span><br><span class="line">telemetry.MergeTrafficMaps(trafficMap, namespace.Name, namespaceTrafficMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The appenders can add/remove/alter nodes. After the manipulations are complete</span></span><br><span class="line"><span class="comment">// we can make some final adjustments:</span></span><br><span class="line"><span class="comment">// - mark the outsiders (i.e. nodes not in the requested namespaces)</span></span><br><span class="line"><span class="comment">// - mark the insider traffic generators (i.e. inside the namespace and only outgoing edges)</span></span><br><span class="line">telemetry.MarkOutsideOrInaccessible(trafficMap, o)</span><br><span class="line">telemetry.MarkTrafficGenerators(trafficMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> graph.GraphTypeService == o.GraphType &#123;</span><br><span class="line">trafficMap = telemetry.ReduceToServiceGraph(trafficMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> trafficMap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Appender 这个interface 主要负责获取和组装流量视图的节点信息和线的信息</p><p>graph/appender.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Appender is implemented by any code offering to append a service graph with</span></span><br><span class="line"><span class="comment">// supplemental information.  On error the appender should panic and it will be</span></span><br><span class="line"><span class="comment">// handled as an error response.</span></span><br><span class="line"><span class="keyword">type</span> Appender <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// AppendGraph performs the appender work on the provided traffic map. The map</span></span><br><span class="line"><span class="comment">// may be initially empty. An appender is allowed to add or remove map entries.</span></span><br><span class="line">AppendGraph(trafficMap TrafficMap, globalInfo *AppenderGlobalInfo, namespaceInfo *AppenderNamespaceInfo)</span><br><span class="line"><span class="comment">// Name returns a unique appender name and which is the name used to identify the appender (e.g in &#x27;appenders&#x27; query param)</span></span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="appender中有几种实现"><a href="#appender中有几种实现" class="headerlink" title="appender中有几种实现"></a>appender中有几种实现</h4><ul><li>istio: 负责标记具有特殊Istio意义的节点</li><li>deadNode: 负责从图中删除不需要的节点</li><li>serviceEntry: ServiceEntryAppender负责标识在Istio中定义为serviceEntry的服务节点。<br>单个serviceEntry可以定义多个主机，<br>因此多个服务节点可以<br>映射到单个serviceEntry的不同主机。我们将这些称为“ se-service”节点</li><li>responseTime: ResponseTimeAppender负责将responseTime信息添加到图形中</li><li>securityPolicy: SecurityPolicyAppender负责向图表添加securityPolicy信息。<br>尽管以通用方式编写，但该附加程序当前仅报告international_tls安全性。</li><li>sidecarsCheck: SidecarsCheckAppender标记其后备工作负载缺少至少一个Envoy sidecar的节点。请注意，<br>没有后备工作负载的节点未标记。</li><li>unusedNode: 调用函数成功时，函数处理时间指标的持续时间值。<br>如果不成功，则递增失败计数器。<br>如果围棋函数不在一个类型上（即是一个全局函数），请为goType传入一个空字符串。<br>当该函数返回时，定时器立即开始计时。</li></ul><p>appender中的实现必须得有先后顺序, service-entry –&gt; deadNode –&gt; responseTime —&gt; securityPolicy —&gt;  unusedNode –&gt; istio</p><p>经过appender之后将trafficMap merge 到 traffic map中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trafficMap := graph.NewTrafficMap()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 namespaceTrafficMap merge ----&gt;  trafficMap 中</span></span><br><span class="line"></span><br><span class="line">telemetry.MergeTrafficMaps(trafficMap, namespace.Name, namespaceTrafficMap)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;kiali 源码解析&lt;/p&gt;
&lt;p&gt;前言: &lt;/p&gt;
&lt;p&gt;Kiali是用于基于Istio的服务网格的管理控制台。它提供仪表板，可观察性，并允许您使用强大的配置和验证功能来操作网格。它通过推断流量拓扑来显示服务网格的结构，并显示网格的运行状况。Kiali提供了详细的指标，强</summary>
      
    
    
    
    <category term="istio" scheme="http://example.com/categories/istio/"/>
    
    
    <category term="istio" scheme="http://example.com/tags/istio/"/>
    
    <category term="kiali" scheme="http://example.com/tags/kiali/"/>
    
  </entry>
  
</feed>
